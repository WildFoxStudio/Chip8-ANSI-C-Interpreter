# 1 "main.c"
# 1 "<built-in>" 1
# 1 "<built-in>" 3
# 324 "<built-in>" 3
# 1 "<command line>" 1
# 1 "<built-in>" 2
# 1 "main.c" 2
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h" 1 3
# 12 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h" 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt.h" 1 3
# 10 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt.h" 3
# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.25.28610\\include\\vcruntime.h" 1 3
# 57 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.25.28610\\include\\vcruntime.h" 3
# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.25.28610\\include\\sal.h" 1 3
# 2970 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.25.28610\\include\\sal.h" 3
# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.25.28610\\include\\concurrencysal.h" 1 3
# 2971 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.25.28610\\include\\sal.h" 2 3
# 58 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.25.28610\\include\\vcruntime.h" 2 3
# 1 "D:\\LLVM\\lib\\clang\\9.0.0\\include\\vadefs.h" 1 3
# 18 "D:\\LLVM\\lib\\clang\\9.0.0\\include\\vadefs.h" 3
# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.25.28610\\include\\vadefs.h" 1 3
# 15 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.25.28610\\include\\vadefs.h" 3
#pragma pack(push, 8)
# 47 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.25.28610\\include\\vadefs.h" 3
#pragma warning(push)
#pragma warning(disable: 4514 4820)
# 61 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.25.28610\\include\\vadefs.h" 3
 typedef unsigned __int64 uintptr_t;
# 72 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.25.28610\\include\\vadefs.h" 3
        typedef char* va_list;
# 145 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.25.28610\\include\\vadefs.h" 3
    void __cdecl __va_start(va_list* , ...);
# 197 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.25.28610\\include\\vadefs.h" 3
#pragma warning(pop)
#pragma pack(pop)
# 19 "D:\\LLVM\\lib\\clang\\9.0.0\\include\\vadefs.h" 2 3
# 59 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.25.28610\\include\\vcruntime.h" 2 3

#pragma warning(push)
#pragma warning(disable: 4514 4820)
# 96 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.25.28610\\include\\vcruntime.h" 3
#pragma pack(push, 8)
# 193 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.25.28610\\include\\vcruntime.h" 3
 typedef unsigned __int64 size_t;
    typedef __int64 ptrdiff_t;
    typedef __int64 intptr_t;
# 209 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.25.28610\\include\\vcruntime.h" 3
    typedef _Bool __vcrt_bool;
# 228 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.25.28610\\include\\vcruntime.h" 3
    typedef unsigned short wchar_t;
# 338 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.25.28610\\include\\vcruntime.h" 3
    void __cdecl __security_init_cookie(void);





        void __cdecl __security_check_cookie( uintptr_t _StackCookie);
        __declspec(noreturn) void __cdecl __report_gsfailure( uintptr_t _StackCookie);



extern uintptr_t __security_cookie;







#pragma pack(pop)

#pragma warning(pop)
# 11 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt.h" 2 3

#pragma pack(push, 8)
# 156 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt.h" 3
 typedef _Bool __crt_bool;
# 278 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt.h" 3
             void __cdecl _invalid_parameter_noinfo(void);
         __declspec(noreturn) void __cdecl _invalid_parameter_noinfo_noreturn(void);

__declspec(noreturn)
         void __cdecl _invoke_watson(
               wchar_t const* _Expression,
               wchar_t const* _FunctionName,
               wchar_t const* _FileName,
               unsigned int _LineNo,
               uintptr_t _Reserved);
# 511 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt.h" 3
typedef int errno_t;
typedef unsigned short wint_t;
typedef unsigned short wctype_t;
typedef long __time32_t;
typedef __int64 __time64_t;

typedef struct __crt_locale_data_public
{
      unsigned short const* _locale_pctype;
                        int _locale_mb_cur_max;
               unsigned int _locale_lc_codepage;
} __crt_locale_data_public;

typedef struct __crt_locale_pointers
{
    struct __crt_locale_data* locinfo;
    struct __crt_multibyte_data* mbcinfo;
} __crt_locale_pointers;

typedef __crt_locale_pointers* _locale_t;

typedef struct _Mbstatet
{
    unsigned long _Wchar;
    unsigned short _Byte, _State;
} _Mbstatet;

typedef _Mbstatet mbstate_t;
# 552 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt.h" 3
        typedef __time64_t time_t;
# 562 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt.h" 3
    typedef size_t rsize_t;
# 2011 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt.h" 3
#pragma pack(pop)
# 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h" 2 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h" 1 3
# 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h" 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_stdio_config.h" 1 3
# 12 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_stdio_config.h" 3
#pragma pack(push, 8)
# 85 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_stdio_config.h" 3
 __declspec(noinline) __inline unsigned __int64* __cdecl __local_stdio_printf_options(void)
    {
        static unsigned __int64 _OptionsStorage;
        return &_OptionsStorage;
    }





    __declspec(noinline) __inline unsigned __int64* __cdecl __local_stdio_scanf_options(void)
    {
        static unsigned __int64 _OptionsStorage;
        return &_OptionsStorage;
    }
# 124 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_stdio_config.h" 3
#pragma pack(pop)
# 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h" 2 3

#pragma pack(push, 8)
# 25 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h" 3
 typedef struct _iobuf
    {
        void* _Placeholder;
    } FILE;


             FILE* __cdecl __acrt_iob_func(unsigned _Ix);
# 48 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h" 3
             wint_t __cdecl fgetwc(
                FILE* _Stream
        );


             wint_t __cdecl _fgetwchar(void);


             wint_t __cdecl fputwc(
                wchar_t _Character,
                FILE* _Stream);


             wint_t __cdecl _fputwchar(
             wchar_t _Character
        );


             wint_t __cdecl getwc(
                FILE* _Stream
        );


             wint_t __cdecl getwchar(void);




             wchar_t* __cdecl fgetws(
                                     wchar_t* _Buffer,
                                     int _BufferCount,
                                     FILE* _Stream
        );


             int __cdecl fputws(
                wchar_t const* _Buffer,
                FILE* _Stream
        );



             wchar_t* __cdecl _getws_s(
                                     wchar_t* _Buffer,
                                     size_t _BufferCount
        );
# 102 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h" 3
             wint_t __cdecl putwc(
                wchar_t _Character,
                FILE* _Stream
        );


             wint_t __cdecl putwchar(
             wchar_t _Character
        );


             int __cdecl _putws(
               wchar_t const* _Buffer
        );


             wint_t __cdecl ungetwc(
                wint_t _Character,
                FILE* _Stream
        );


             FILE * __cdecl _wfdopen(
               int _FileHandle,
               wchar_t const* _Mode
        );

                   __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wfopen_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
             FILE* __cdecl _wfopen(
               wchar_t const* _FileName,
               wchar_t const* _Mode
        );


             errno_t __cdecl _wfopen_s(
                                  FILE** _Stream,
                                  wchar_t const* _FileName,
                                  wchar_t const* _Mode
        );


    __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wfreopen_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
             FILE* __cdecl _wfreopen(
                wchar_t const* _FileName,
                wchar_t const* _Mode,
                FILE* _OldStream
        );


             errno_t __cdecl _wfreopen_s(
                                  FILE** _Stream,
                                  wchar_t const* _FileName,
                                  wchar_t const* _Mode,
                                  FILE* _OldStream
        );


             FILE* __cdecl _wfsopen(
               wchar_t const* _FileName,
               wchar_t const* _Mode,
               int _ShFlag
        );

             void __cdecl _wperror(
                   wchar_t const* _ErrorMessage
        );




                 FILE* __cdecl _wpopen(
                   wchar_t const* _Command,
                   wchar_t const* _Mode
            );



             int __cdecl _wremove(
               wchar_t const* _FileName
        );





             __declspec(allocator) wchar_t* __cdecl _wtempnam(
                   wchar_t const* _Directory,
                   wchar_t const* _FilePrefix
        );





             errno_t __cdecl _wtmpnam_s(
                                     wchar_t* _Buffer,
                                     size_t _BufferCount
        );







    __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wtmpnam_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) wchar_t* __cdecl _wtmpnam( wchar_t *_Buffer);
# 221 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h" 3
             wint_t __cdecl _fgetwc_nolock(
                FILE* _Stream
        );


             wint_t __cdecl _fputwc_nolock(
                wchar_t _Character,
                FILE* _Stream
        );


             wint_t __cdecl _getwc_nolock(
                FILE* _Stream
        );


             wint_t __cdecl _putwc_nolock(
                wchar_t _Character,
                FILE* _Stream
        );


             wint_t __cdecl _ungetwc_nolock(
                wint_t _Character,
                FILE* _Stream
        );
# 269 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h" 3
             int __cdecl __stdio_common_vfwprintf(
                                                unsigned __int64 _Options,
                                                FILE* _Stream,
                                                wchar_t const* _Format,
                                                _locale_t _Locale,
                                                va_list _ArgList
        );


             int __cdecl __stdio_common_vfwprintf_s(
                                                unsigned __int64 _Options,
                                                FILE* _Stream,
                                                wchar_t const* _Format,
                                                _locale_t _Locale,
                                                va_list _ArgList
        );


             int __cdecl __stdio_common_vfwprintf_p(
                                                unsigned __int64 _Options,
                                                FILE* _Stream,
                                                wchar_t const* _Format,
                                                _locale_t _Locale,
                                                va_list _ArgList
        );


    __inline int __cdecl _vfwprintf_l(
                                                FILE* const _Stream,
                                                wchar_t const* const _Format,
                                                _locale_t const _Locale,
                                                va_list _ArgList
        )



    {
        return __stdio_common_vfwprintf((*__local_stdio_printf_options()), _Stream, _Format, _Locale, _ArgList);
    }



    __inline int __cdecl vfwprintf(
                                      FILE* const _Stream,
                                      wchar_t const* const _Format,
                                      va_list _ArgList
        )



    {
        return _vfwprintf_l(_Stream, _Format, ((void *)0), _ArgList);
    }



    __inline int __cdecl _vfwprintf_s_l(
                                                FILE* const _Stream,
                                                wchar_t const* const _Format,
                                                _locale_t const _Locale,
                                                va_list _ArgList
        )



    {
        return __stdio_common_vfwprintf_s((*__local_stdio_printf_options()), _Stream, _Format, _Locale, _ArgList);
    }





        __inline int __cdecl vfwprintf_s(
                                          FILE* const _Stream,
                                          wchar_t const* const _Format,
                                          va_list _ArgList
            )



        {
            return _vfwprintf_s_l(_Stream, _Format, ((void *)0), _ArgList);
        }





    __inline int __cdecl _vfwprintf_p_l(
                                                FILE* const _Stream,
                                                wchar_t const* const _Format,
                                                _locale_t const _Locale,
                                                va_list _ArgList
        )



    {
        return __stdio_common_vfwprintf_p((*__local_stdio_printf_options()), _Stream, _Format, _Locale, _ArgList);
    }



    __inline int __cdecl _vfwprintf_p(
                                      FILE* const _Stream,
                                      wchar_t const* const _Format,
                                      va_list _ArgList
        )



    {
        return _vfwprintf_p_l(_Stream, _Format, ((void *)0), _ArgList);
    }



    __inline int __cdecl _vwprintf_l(
                                                wchar_t const* const _Format,
                                                _locale_t const _Locale,
                                                va_list _ArgList
        )



    {
        return _vfwprintf_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
    }



    __inline int __cdecl vwprintf(
                                      wchar_t const* const _Format,
                                      va_list _ArgList
        )



    {
        return _vfwprintf_l((__acrt_iob_func(1)), _Format, ((void *)0), _ArgList);
    }



    __inline int __cdecl _vwprintf_s_l(
                                                wchar_t const* const _Format,
                                                _locale_t const _Locale,
                                                va_list _ArgList
        )



    {
        return _vfwprintf_s_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
    }





        __inline int __cdecl vwprintf_s(
                                          wchar_t const* const _Format,
                                          va_list _ArgList
            )



        {
            return _vfwprintf_s_l((__acrt_iob_func(1)), _Format, ((void *)0), _ArgList);
        }





    __inline int __cdecl _vwprintf_p_l(
                                                wchar_t const* const _Format,
                                                _locale_t const _Locale,
                                                va_list _ArgList
        )



    {
        return _vfwprintf_p_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
    }



    __inline int __cdecl _vwprintf_p(
                                      wchar_t const* const _Format,
                                      va_list _ArgList
        )



    {
        return _vfwprintf_p_l((__acrt_iob_func(1)), _Format, ((void *)0), _ArgList);
    }



    __inline int __cdecl _fwprintf_l(
                                                FILE* const _Stream,
                                                wchar_t const* const _Format,
                                                _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        __builtin_va_start(_ArgList, _Locale);
        _Result = _vfwprintf_l(_Stream, _Format, _Locale, _ArgList);
        __builtin_va_end(_ArgList);
        return _Result;
    }



    __inline int __cdecl fwprintf(
                                      FILE* const _Stream,
                                      wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        __builtin_va_start(_ArgList, _Format);
        _Result = _vfwprintf_l(_Stream, _Format, ((void *)0), _ArgList);
        __builtin_va_end(_ArgList);
        return _Result;
    }



    __inline int __cdecl _fwprintf_s_l(
                                                FILE* const _Stream,
                                                wchar_t const* const _Format,
                                                _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        __builtin_va_start(_ArgList, _Locale);
        _Result = _vfwprintf_s_l(_Stream, _Format, _Locale, _ArgList);
        __builtin_va_end(_ArgList);
        return _Result;
    }





        __inline int __cdecl fwprintf_s(
                                          FILE* const _Stream,
                                          wchar_t const* const _Format,
            ...)



        {
            int _Result;
            va_list _ArgList;
            __builtin_va_start(_ArgList, _Format);
            _Result = _vfwprintf_s_l(_Stream, _Format, ((void *)0), _ArgList);
            __builtin_va_end(_ArgList);
            return _Result;
        }





    __inline int __cdecl _fwprintf_p_l(
                                                FILE* const _Stream,
                                                wchar_t const* const _Format,
                                                _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        __builtin_va_start(_ArgList, _Locale);
        _Result = _vfwprintf_p_l(_Stream, _Format, _Locale, _ArgList);
        __builtin_va_end(_ArgList);
        return _Result;
    }



    __inline int __cdecl _fwprintf_p(
                                      FILE* const _Stream,
                                      wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        __builtin_va_start(_ArgList, _Format);
        _Result = _vfwprintf_p_l(_Stream, _Format, ((void *)0), _ArgList);
        __builtin_va_end(_ArgList);
        return _Result;
    }



    __inline int __cdecl _wprintf_l(
                                                wchar_t const* const _Format,
                                                _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        __builtin_va_start(_ArgList, _Locale);
        _Result = _vfwprintf_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
        __builtin_va_end(_ArgList);
        return _Result;
    }



    __inline int __cdecl wprintf(
                                      wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        __builtin_va_start(_ArgList, _Format);
        _Result = _vfwprintf_l((__acrt_iob_func(1)), _Format, ((void *)0), _ArgList);
        __builtin_va_end(_ArgList);
        return _Result;
    }



    __inline int __cdecl _wprintf_s_l(
                                                wchar_t const* const _Format,
                                                _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        __builtin_va_start(_ArgList, _Locale);
        _Result = _vfwprintf_s_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
        __builtin_va_end(_ArgList);
        return _Result;
    }





        __inline int __cdecl wprintf_s(
                                          wchar_t const* const _Format,
            ...)



        {
            int _Result;
            va_list _ArgList;
            __builtin_va_start(_ArgList, _Format);
            _Result = _vfwprintf_s_l((__acrt_iob_func(1)), _Format, ((void *)0), _ArgList);
            __builtin_va_end(_ArgList);
            return _Result;
        }





    __inline int __cdecl _wprintf_p_l(
                                                wchar_t const* const _Format,
                                                _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        __builtin_va_start(_ArgList, _Locale);
        _Result = _vfwprintf_p_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
        __builtin_va_end(_ArgList);
        return _Result;
    }



    __inline int __cdecl _wprintf_p(
                                      wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        __builtin_va_start(_ArgList, _Format);
        _Result = _vfwprintf_p_l((__acrt_iob_func(1)), _Format, ((void *)0), _ArgList);
        __builtin_va_end(_ArgList);
        return _Result;
    }
# 702 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h" 3
             int __cdecl __stdio_common_vfwscanf(
                                               unsigned __int64 _Options,
                                               FILE* _Stream,
                                               wchar_t const* _Format,
                                               _locale_t _Locale,
                                               va_list _ArgList
        );


    __inline int __cdecl _vfwscanf_l(
                FILE* const _Stream,
                                      wchar_t const* const _Format,
                                      _locale_t const _Locale,
                                      va_list _ArgList
        )



    {
        return __stdio_common_vfwscanf(
            (*__local_stdio_scanf_options ()),
            _Stream, _Format, _Locale, _ArgList);
    }



    __inline int __cdecl vfwscanf(
                FILE* const _Stream,
                                      wchar_t const* const _Format,
                                      va_list _ArgList
        )



    {
        return _vfwscanf_l(_Stream, _Format, ((void *)0), _ArgList);
    }



    __inline int __cdecl _vfwscanf_s_l(
                                      FILE* const _Stream,
                                      wchar_t const* const _Format,
                                      _locale_t const _Locale,
                                      va_list _ArgList
        )



    {
        return __stdio_common_vfwscanf(
            (*__local_stdio_scanf_options ()) | (1ULL << 0),
            _Stream, _Format, _Locale, _ArgList);
    }





        __inline int __cdecl vfwscanf_s(
                                          FILE* const _Stream,
                                          wchar_t const* const _Format,
                                          va_list _ArgList
            )



        {
            return _vfwscanf_s_l(_Stream, _Format, ((void *)0), _ArgList);
        }




    __inline int __cdecl _vwscanf_l(
                                      wchar_t const* const _Format,
                                      _locale_t const _Locale,
                                      va_list _ArgList
        )



    {
        return _vfwscanf_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
    }



    __inline int __cdecl vwscanf(
                                      wchar_t const* const _Format,
                                      va_list _ArgList
        )



    {
        return _vfwscanf_l((__acrt_iob_func(0)), _Format, ((void *)0), _ArgList);
    }



    __inline int __cdecl _vwscanf_s_l(
                                      wchar_t const* const _Format,
                                      _locale_t const _Locale,
                                      va_list _ArgList
        )



    {
        return _vfwscanf_s_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
    }





        __inline int __cdecl vwscanf_s(
                                          wchar_t const* const _Format,
                                          va_list _ArgList
            )



        {
            return _vfwscanf_s_l((__acrt_iob_func(0)), _Format, ((void *)0), _ArgList);
        }




                       __declspec(deprecated("This function or variable may be unsafe. Consider using " "_fwscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _fwscanf_l(
                                               FILE* const _Stream,
                                               wchar_t const* const _Format,
                                               _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        __builtin_va_start(_ArgList, _Locale);
        _Result = _vfwscanf_l(_Stream, _Format, _Locale, _ArgList);
        __builtin_va_end(_ArgList);
        return _Result;
    }


                   __declspec(deprecated("This function or variable may be unsafe. Consider using " "fwscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl fwscanf(
                                     FILE* const _Stream,
                                     wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        __builtin_va_start(_ArgList, _Format);
        _Result = _vfwscanf_l(_Stream, _Format, ((void *)0), _ArgList);
        __builtin_va_end(_ArgList);
        return _Result;
    }



    __inline int __cdecl _fwscanf_s_l(
                                                 FILE* const _Stream,
                                                 wchar_t const* const _Format,
                                                 _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        __builtin_va_start(_ArgList, _Locale);
        _Result = _vfwscanf_s_l(_Stream, _Format, _Locale, _ArgList);
        __builtin_va_end(_ArgList);
        return _Result;
    }





        __inline int __cdecl fwscanf_s(
                                           FILE* const _Stream,
                                           wchar_t const* const _Format,
            ...)



        {
            int _Result;
            va_list _ArgList;
            __builtin_va_start(_ArgList, _Format);
            _Result = _vfwscanf_s_l(_Stream, _Format, ((void *)0), _ArgList);
            __builtin_va_end(_ArgList);
            return _Result;
        }




                       __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _wscanf_l(
                                               wchar_t const* const _Format,
                                               _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        __builtin_va_start(_ArgList, _Locale);
        _Result = _vfwscanf_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
        __builtin_va_end(_ArgList);
        return _Result;
    }


                   __declspec(deprecated("This function or variable may be unsafe. Consider using " "wscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl wscanf(
                                     wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        __builtin_va_start(_ArgList, _Format);
        _Result = _vfwscanf_l((__acrt_iob_func(0)), _Format, ((void *)0), _ArgList);
        __builtin_va_end(_ArgList);
        return _Result;
    }



    __inline int __cdecl _wscanf_s_l(
                                                 wchar_t const* const _Format,
                                                 _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        __builtin_va_start(_ArgList, _Locale);
        _Result = _vfwscanf_s_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
        __builtin_va_end(_ArgList);
        return _Result;
    }





        __inline int __cdecl wscanf_s(
                                           wchar_t const* const _Format,
            ...)



        {
            int _Result;
            va_list _ArgList;
            __builtin_va_start(_ArgList, _Format);
            _Result = _vfwscanf_s_l((__acrt_iob_func(0)), _Format, ((void *)0), _ArgList);
            __builtin_va_end(_ArgList);
            return _Result;
        }
# 1003 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h" 3
             int __cdecl __stdio_common_vswprintf(
                                                unsigned __int64 _Options,
                                                wchar_t* _Buffer,
                                                size_t _BufferCount,
                                                wchar_t const* _Format,
                                                _locale_t _Locale,
                                                va_list _ArgList
        );



             int __cdecl __stdio_common_vswprintf_s(
                                                unsigned __int64 _Options,
                                                wchar_t* _Buffer,
                                                size_t _BufferCount,
                                                wchar_t const* _Format,
                                                _locale_t _Locale,
                                                va_list _ArgList
        );



             int __cdecl __stdio_common_vsnwprintf_s(
                                                unsigned __int64 _Options,
                                                wchar_t* _Buffer,
                                                size_t _BufferCount,
                                                size_t _MaxCount,
                                                wchar_t const* _Format,
                                                _locale_t _Locale,
                                                va_list _ArgList
        );



             int __cdecl __stdio_common_vswprintf_p(
                                                unsigned __int64 _Options,
                                                wchar_t* _Buffer,
                                                size_t _BufferCount,
                                                wchar_t const* _Format,
                                                _locale_t _Locale,
                                                va_list _ArgList
        );


                       __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vsnwprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _vsnwprintf_l(
                                                     wchar_t* const _Buffer,
                                                     size_t const _BufferCount,
                                                     wchar_t const* const _Format,
                                                     _locale_t const _Locale,
                                                     va_list _ArgList
        )



    {
        int const _Result = __stdio_common_vswprintf(
            (*__local_stdio_printf_options()) | (1ULL << 0),
            _Buffer, _BufferCount, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }


#pragma warning(push)
#pragma warning(disable: 4793)



 __inline int __cdecl _vsnwprintf_s_l(
                                                          wchar_t* const _Buffer,
                                                          size_t const _BufferCount,
                                                          size_t const _MaxCount,
                                                          wchar_t const* const _Format,
                                                          _locale_t const _Locale,
                                                          va_list _ArgList
        )



    {
        int const _Result = __stdio_common_vsnwprintf_s(
            (*__local_stdio_printf_options()),
            _Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }




    __inline int __cdecl _vsnwprintf_s(
                                                          wchar_t* const _Buffer,
                                                          size_t const _BufferCount,
                                                          size_t const _MaxCount,
                                                          wchar_t const* const _Format,
                                                          va_list _ArgList
        )



    {
        return _vsnwprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, ((void *)0), _ArgList);
    }


    __declspec(deprecated("This function or variable may be unsafe. Consider using " "_snwprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __inline int __cdecl _snwprintf( wchar_t *_Buffer, size_t _BufferCount, wchar_t const* _Format, ...); __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vsnwprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __inline int __cdecl _vsnwprintf( wchar_t *_Buffer, size_t _BufferCount, wchar_t const* _Format, va_list _Args);








#pragma warning(pop)


 __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vsnwprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _vsnwprintf(
                                                     wchar_t* _Buffer,
                                                     size_t _BufferCount,
                                                     wchar_t const* _Format,
                                                     va_list _ArgList
        )



    {
#pragma warning(push)
#pragma warning(disable: 4996)
 return _vsnwprintf_l(_Buffer, _BufferCount, _Format, ((void *)0), _ArgList);
#pragma warning(pop)
 }
# 1150 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h" 3
    __inline int __cdecl _vswprintf_c_l(
                                                          wchar_t* const _Buffer,
                                                          size_t const _BufferCount,
                                                          wchar_t const* const _Format,
                                                          _locale_t const _Locale,
                                                          va_list _ArgList
        )



    {
        int const _Result = __stdio_common_vswprintf(
            (*__local_stdio_printf_options()),
            _Buffer, _BufferCount, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }




    __inline int __cdecl _vswprintf_c(
                                                          wchar_t* const _Buffer,
                                                          size_t const _BufferCount,
                                                          wchar_t const* const _Format,
                                                          va_list _ArgList
        )



    {
        return _vswprintf_c_l(_Buffer, _BufferCount, _Format, ((void *)0), _ArgList);
    }




    __inline int __cdecl _vswprintf_l(
                                                          wchar_t* const _Buffer,
                                                          size_t const _BufferCount,
                                                          wchar_t const* const _Format,
                                                          _locale_t const _Locale,
                                                          va_list _ArgList
        )



    {
#pragma warning(push)
#pragma warning(disable: 4996)
 return _vswprintf_c_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
#pragma warning(pop)
 }




    __inline int __cdecl __vswprintf_l(
                                                wchar_t* const _Buffer,
                                                wchar_t const* const _Format,
                                                _locale_t const _Locale,
                                                va_list _ArgList
        )



    {
        return _vswprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);
    }




    __inline int __cdecl _vswprintf(
                                         wchar_t* const _Buffer,
                                         wchar_t const* const _Format,
                                         va_list _ArgList
        )



    {
        return _vswprintf_l(_Buffer, (size_t)-1, _Format, ((void *)0), _ArgList);
    }




    __inline int __cdecl vswprintf(
                                                          wchar_t* const _Buffer,
                                                          size_t const _BufferCount,
                                                          wchar_t const* const _Format,
                                                          va_list _ArgList
        )



    {
        return _vswprintf_c_l(_Buffer, _BufferCount, _Format, ((void *)0), _ArgList);
    }




    __inline int __cdecl _vswprintf_s_l(
                                                      wchar_t* const _Buffer,
                                                      size_t const _BufferCount,
                                                      wchar_t const* const _Format,
                                                      _locale_t const _Locale,
                                                      va_list _ArgList
        )



    {
        int const _Result = __stdio_common_vswprintf_s(
            (*__local_stdio_printf_options()),
            _Buffer, _BufferCount, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }





        __inline int __cdecl vswprintf_s(
                                                          wchar_t* const _Buffer,
                                                          size_t const _BufferCount,
                                                          wchar_t const* const _Format,
                                                          va_list _ArgList
            )



        {
            return _vswprintf_s_l(_Buffer, _BufferCount, _Format, ((void *)0), _ArgList);
        }
# 1302 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h" 3
    __inline int __cdecl _vswprintf_p_l(
                                                      wchar_t* const _Buffer,
                                                      size_t const _BufferCount,
                                                      wchar_t const* const _Format,
                                                      _locale_t const _Locale,
                                                      va_list _ArgList
        )



    {
        int const _Result = __stdio_common_vswprintf_p(
            (*__local_stdio_printf_options()),
            _Buffer, _BufferCount, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }




    __inline int __cdecl _vswprintf_p(
                                                      wchar_t* const _Buffer,
                                                      size_t const _BufferCount,
                                                      wchar_t const* const _Format,
                                                      va_list _ArgList
        )



    {
        return _vswprintf_p_l(_Buffer, _BufferCount, _Format, ((void *)0), _ArgList);
    }




    __inline int __cdecl _vscwprintf_l(
                                                wchar_t const* const _Format,
                                                _locale_t const _Locale,
                                                va_list _ArgList
        )



    {
        int const _Result = __stdio_common_vswprintf(
            (*__local_stdio_printf_options()) | (1ULL << 1),
            ((void *)0), 0, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }




    __inline int __cdecl _vscwprintf(
                                      wchar_t const* const _Format,
                                      va_list _ArgList
        )



    {
        return _vscwprintf_l(_Format, ((void *)0), _ArgList);
    }




    __inline int __cdecl _vscwprintf_p_l(
                                                wchar_t const* const _Format,
                                                _locale_t const _Locale,
                                                va_list _ArgList
        )



    {
        int const _Result = __stdio_common_vswprintf_p(
            (*__local_stdio_printf_options()) | (1ULL << 1),
            ((void *)0), 0, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }




    __inline int __cdecl _vscwprintf_p(
                                      wchar_t const* const _Format,
                                      va_list _ArgList
        )



    {
        return _vscwprintf_p_l(_Format, ((void *)0), _ArgList);
    }




    __inline int __cdecl __swprintf_l(
                                                wchar_t* const _Buffer,
                                                wchar_t const* const _Format,
                                                _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        __builtin_va_start(_ArgList, _Locale);
        _Result = __vswprintf_l(_Buffer, _Format, _Locale, _ArgList);
        __builtin_va_end(_ArgList);
        return _Result;
    }




    __inline int __cdecl _swprintf_l(
                                                          wchar_t* const _Buffer,
                                                          size_t const _BufferCount,
                                                          wchar_t const* const _Format,
                                                          _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        __builtin_va_start(_ArgList, _Locale);
        _Result = _vswprintf_c_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
        __builtin_va_end(_ArgList);
        return _Result;
    }




    __inline int __cdecl _swprintf(
                                         wchar_t* const _Buffer,
                                         wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        __builtin_va_start(_ArgList, _Format);
        _Result = __vswprintf_l(_Buffer, _Format, ((void *)0), _ArgList);
        __builtin_va_end(_ArgList);
        return _Result;
    }




    __inline int __cdecl swprintf(
                                                          wchar_t* const _Buffer,
                                                          size_t const _BufferCount,
                                                          wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        __builtin_va_start(_ArgList, _Format);
        _Result = _vswprintf_c_l(_Buffer, _BufferCount, _Format, ((void *)0), _ArgList);
        __builtin_va_end(_ArgList);
        return _Result;
    }


#pragma warning(push)


#pragma warning(disable: 4793 4996)

 __declspec(deprecated("This function or variable may be unsafe. Consider using " "__swprintf_l_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __inline int __cdecl __swprintf_l( wchar_t *_Buffer, wchar_t const* _Format, _locale_t _Locale, ...); __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vswprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __inline int __cdecl __vswprintf_l( wchar_t *_Buffer, wchar_t const* _Format, _locale_t _Locale, va_list _Args);
# 1497 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h" 3
    __declspec(deprecated("This function or variable may be unsafe. Consider using " "swprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __inline int __cdecl _swprintf( wchar_t *_Buffer, wchar_t const* _Format, ...); __declspec(deprecated("This function or variable may be unsafe. Consider using " "vswprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __inline int __cdecl _vswprintf( wchar_t *_Buffer, wchar_t const* _Format, va_list _Args);






#pragma warning(pop)



 __inline int __cdecl _swprintf_s_l(
                                                      wchar_t* const _Buffer,
                                                      size_t const _BufferCount,
                                                      wchar_t const* const _Format,
                                                      _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        __builtin_va_start(_ArgList, _Locale);
        _Result = _vswprintf_s_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
        __builtin_va_end(_ArgList);
        return _Result;
    }





        __inline int __cdecl swprintf_s(
                                                          wchar_t* const _Buffer,
                                                          size_t const _BufferCount,
                                                          wchar_t const* const _Format,
            ...)



        {
            int _Result;
            va_list _ArgList;
            __builtin_va_start(_ArgList, _Format);
            _Result = _vswprintf_s_l(_Buffer, _BufferCount, _Format, ((void *)0), _ArgList);
            __builtin_va_end(_ArgList);
            return _Result;
        }
# 1559 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h" 3
    __inline int __cdecl _swprintf_p_l(
                                                      wchar_t* const _Buffer,
                                                      size_t const _BufferCount,
                                                      wchar_t const* const _Format,
                                                      _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        __builtin_va_start(_ArgList, _Locale);
        _Result = _vswprintf_p_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
        __builtin_va_end(_ArgList);
        return _Result;
    }




    __inline int __cdecl _swprintf_p(
                                                      wchar_t* const _Buffer,
                                                      size_t const _BufferCount,
                                                      wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        __builtin_va_start(_ArgList, _Format);
        _Result = _vswprintf_p_l(_Buffer, _BufferCount, _Format, ((void *)0), _ArgList);
        __builtin_va_end(_ArgList);
        return _Result;
    }




    __inline int __cdecl _swprintf_c_l(
                                                          wchar_t* const _Buffer,
                                                          size_t const _BufferCount,
                                                          wchar_t const* const _Format,
                                                          _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        __builtin_va_start(_ArgList, _Locale);
        _Result = _vswprintf_c_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
        __builtin_va_end(_ArgList);
        return _Result;
    }




    __inline int __cdecl _swprintf_c(
                                                          wchar_t* const _Buffer,
                                                          size_t const _BufferCount,
                                                          wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        __builtin_va_start(_ArgList, _Format);
        _Result = _vswprintf_c_l(_Buffer, _BufferCount, _Format, ((void *)0), _ArgList);
        __builtin_va_end(_ArgList);
        return _Result;
    }



                       __declspec(deprecated("This function or variable may be unsafe. Consider using " "_snwprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _snwprintf_l(
                                                     wchar_t* const _Buffer,
                                                     size_t const _BufferCount,
                                                     wchar_t const* const _Format,
                                                     _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        __builtin_va_start(_ArgList, _Locale);

#pragma warning(push)
#pragma warning(disable: 4996)
 _Result = _vsnwprintf_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
#pragma warning(pop)

 __builtin_va_end(_ArgList);
        return _Result;
    }




    __inline int __cdecl _snwprintf(
                                                     wchar_t* _Buffer,
                                                     size_t _BufferCount,
                                                     wchar_t const* _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        __builtin_va_start(_ArgList, _Format);

#pragma warning(push)
#pragma warning(disable: 4996)
 _Result = _vsnwprintf_l(_Buffer, _BufferCount, _Format, ((void *)0), _ArgList);
#pragma warning(pop)

 __builtin_va_end(_ArgList);
        return _Result;
    }




    __inline int __cdecl _snwprintf_s_l(
                                                          wchar_t* const _Buffer,
                                                          size_t const _BufferCount,
                                                          size_t const _MaxCount,
                                                          wchar_t const* const _Format,
                                                          _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        __builtin_va_start(_ArgList, _Locale);
        _Result = _vsnwprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);
        __builtin_va_end(_ArgList);
        return _Result;
    }




    __inline int __cdecl _snwprintf_s(
                                                          wchar_t* const _Buffer,
                                                          size_t const _BufferCount,
                                                          size_t const _MaxCount,
                                                          wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        __builtin_va_start(_ArgList, _Format);
        _Result = _vsnwprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, ((void *)0), _ArgList);
        __builtin_va_end(_ArgList);
        return _Result;
    }
# 1742 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h" 3
    __inline int __cdecl _scwprintf_l(
                                                wchar_t const* const _Format,
                                                _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        __builtin_va_start(_ArgList, _Locale);
        _Result = _vscwprintf_l(_Format, _Locale, _ArgList);
        __builtin_va_end(_ArgList);
        return _Result;
    }




    __inline int __cdecl _scwprintf(
                                      wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        __builtin_va_start(_ArgList, _Format);
        _Result = _vscwprintf_l(_Format, ((void *)0), _ArgList);
        __builtin_va_end(_ArgList);
        return _Result;
    }




    __inline int __cdecl _scwprintf_p_l(
                                                wchar_t const* const _Format,
                                                _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        __builtin_va_start(_ArgList, _Locale);
        _Result = _vscwprintf_p_l(_Format, _Locale, _ArgList);
        __builtin_va_end(_ArgList);
        return _Result;
    }




    __inline int __cdecl _scwprintf_p(
                                      wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        __builtin_va_start(_ArgList, _Format);
        _Result = _vscwprintf_p_l(_Format, ((void *)0), _ArgList);
        __builtin_va_end(_ArgList);
        return _Result;
    }




#pragma warning(push)
#pragma warning(disable: 4141 4412 4793 4996 6054)
# 1875 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h" 3
#pragma warning(pop)
# 1892 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h" 3
 int __cdecl __stdio_common_vswscanf(
                                               unsigned __int64 _Options,
                                               wchar_t const* _Buffer,
                                               size_t _BufferCount,
                                               wchar_t const* _Format,
                                               _locale_t _Locale,
                                               va_list _ArgList
        );



    __inline int __cdecl _vswscanf_l(
                                      wchar_t const* const _Buffer,
                                      wchar_t const* const _Format,
                                      _locale_t const _Locale,
                                      va_list _ArgList
        )



    {
        return __stdio_common_vswscanf(
            (*__local_stdio_scanf_options ()),
            _Buffer, (size_t)-1, _Format, _Locale, _ArgList);
    }




    __inline int __cdecl vswscanf(
                                      wchar_t const* _Buffer,
                                      wchar_t const* _Format,
                                      va_list _ArgList
        )



    {
        return _vswscanf_l(_Buffer, _Format, ((void *)0), _ArgList);
    }




    __inline int __cdecl _vswscanf_s_l(
                                      wchar_t const* const _Buffer,
                                      wchar_t const* const _Format,
                                      _locale_t const _Locale,
                                      va_list _ArgList
        )



    {
        return __stdio_common_vswscanf(
            (*__local_stdio_scanf_options ()) | (1ULL << 0),
            _Buffer, (size_t)-1, _Format, _Locale, _ArgList);
    }






        __inline int __cdecl vswscanf_s(
                                          wchar_t const* const _Buffer,
                                          wchar_t const* const _Format,
                                          va_list _ArgList
            )



        {
            return _vswscanf_s_l(_Buffer, _Format, ((void *)0), _ArgList);
        }
# 1980 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h" 3
                       __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vsnwscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _vsnwscanf_l(
                                               wchar_t const* const _Buffer,
                                               size_t const _BufferCount,
                                               wchar_t const* const _Format,
                                               _locale_t const _Locale,
                                               va_list _ArgList
        )



    {
        return __stdio_common_vswscanf(
            (*__local_stdio_scanf_options ()),
            _Buffer, _BufferCount, _Format, _Locale, _ArgList);
    }




    __inline int __cdecl _vsnwscanf_s_l(
                                                 wchar_t const* const _Buffer,
                                                 size_t const _BufferCount,
                                                 wchar_t const* const _Format,
                                                 _locale_t const _Locale,
                                                 va_list _ArgList
        )



    {
        return __stdio_common_vswscanf(
            (*__local_stdio_scanf_options ()) | (1ULL << 0),
            _Buffer, _BufferCount, _Format, _Locale, _ArgList);
    }



                       __declspec(deprecated("This function or variable may be unsafe. Consider using " "_swscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _swscanf_l(
                                               wchar_t const* const _Buffer,
                                               wchar_t const* const _Format,
                                               _locale_t _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        __builtin_va_start(_ArgList, _Locale);
        _Result = _vswscanf_l(_Buffer, _Format, _Locale, _ArgList);
        __builtin_va_end(_ArgList);
        return _Result;
    }



                   __declspec(deprecated("This function or variable may be unsafe. Consider using " "swscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl swscanf(
                                     wchar_t const* const _Buffer,
                                     wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        __builtin_va_start(_ArgList, _Format);
        _Result = _vswscanf_l(_Buffer, _Format, ((void *)0), _ArgList);
        __builtin_va_end(_ArgList);
        return _Result;
    }




    __inline int __cdecl _swscanf_s_l(
                                                 wchar_t const* const _Buffer,
                                                 wchar_t const* const _Format,
                                                 _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        __builtin_va_start(_ArgList, _Locale);
        _Result = _vswscanf_s_l(_Buffer, _Format, _Locale, _ArgList);
        __builtin_va_end(_ArgList);
        return _Result;
    }






        __inline int __cdecl swscanf_s(
                                           wchar_t const* const _Buffer,
                                           wchar_t const* const _Format,
            ...)



        {
            int _Result;
            va_list _ArgList;
            __builtin_va_start(_ArgList, _Format);
            _Result = _vswscanf_s_l(_Buffer, _Format, ((void *)0), _ArgList);
            __builtin_va_end(_ArgList);
            return _Result;
        }





                       __declspec(deprecated("This function or variable may be unsafe. Consider using " "_snwscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _snwscanf_l(
                                               wchar_t const* const _Buffer,
                                               size_t const _BufferCount,
                                               wchar_t const* const _Format,
                                               _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        __builtin_va_start(_ArgList, _Locale);

#pragma warning(push)
#pragma warning(disable: 4996)
 _Result = _vsnwscanf_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
#pragma warning(pop)

 __builtin_va_end(_ArgList);
        return _Result;
    }



                       __declspec(deprecated("This function or variable may be unsafe. Consider using " "_snwscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _snwscanf(
                                         wchar_t const* const _Buffer,
                                         size_t const _BufferCount,
                                         wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        __builtin_va_start(_ArgList, _Format);

#pragma warning(push)
#pragma warning(disable: 4996)
 _Result = _vsnwscanf_l(_Buffer, _BufferCount, _Format, ((void *)0), _ArgList);
#pragma warning(pop)

 __builtin_va_end(_ArgList);
        return _Result;
    }




    __inline int __cdecl _snwscanf_s_l(
                                                 wchar_t const* const _Buffer,
                                                 size_t const _BufferCount,
                                                 wchar_t const* const _Format,
                                                 _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        __builtin_va_start(_ArgList, _Locale);
        _Result = _vsnwscanf_s_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
        __builtin_va_end(_ArgList);
        return _Result;
    }




    __inline int __cdecl _snwscanf_s(
                                          wchar_t const* const _Buffer,
                                          size_t const _BufferCount,
                                          wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        __builtin_va_start(_ArgList, _Format);
        _Result = _vsnwscanf_s_l(_Buffer, _BufferCount, _Format, ((void *)0), _ArgList);
        __builtin_va_end(_ArgList);
        return _Result;
    }
# 2198 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h" 3
#pragma pack(pop)
# 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h" 2 3

#pragma pack(push, 8)
# 69 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h" 3
typedef __int64 fpos_t;






             errno_t __cdecl _get_stream_buffer_pointers(
                  FILE* _Stream,
                  char*** _Base,
                  char*** _Pointer,
                  int** _Count
        );
# 92 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h" 3
                 errno_t __cdecl clearerr_s(
                    FILE* _Stream
            );


                 errno_t __cdecl fopen_s(
                                      FILE** _Stream,
                                      char const* _FileName,
                                      char const* _Mode
            );



                 size_t __cdecl fread_s(
                                                                               void* _Buffer,
                                                                               size_t _BufferSize,
                                                                               size_t _ElementSize,
                                                                               size_t _ElementCount,
                                                                               FILE* _Stream
            );


                 errno_t __cdecl freopen_s(
                                      FILE** _Stream,
                                      char const* _FileName,
                                      char const* _Mode,
                                      FILE* _OldStream
            );


                 char* __cdecl gets_s(
                                  char* _Buffer,
                                  rsize_t _Size
            );


                 errno_t __cdecl tmpfile_s(
                                         FILE** _Stream
            );



                 errno_t __cdecl tmpnam_s(
                                  char* _Buffer,
                                  rsize_t _Size
            );



             void __cdecl clearerr(
                FILE* _Stream
        );



             int __cdecl fclose(
                FILE* _Stream
        );


             int __cdecl _fcloseall(void);


             FILE* __cdecl _fdopen(
               int _FileHandle,
               char const* _Mode
        );


             int __cdecl feof(
             FILE* _Stream
        );


             int __cdecl ferror(
             FILE* _Stream
        );


             int __cdecl fflush(
                    FILE* _Stream
        );



             int __cdecl fgetc(
                FILE* _Stream
        );


             int __cdecl _fgetchar(void);



             int __cdecl fgetpos(
                FILE* _Stream,
                fpos_t* _Position
        );



             char* __cdecl fgets(
                                  char* _Buffer,
                                  int _MaxCount,
                                  FILE* _Stream
        );


             int __cdecl _fileno(
             FILE* _Stream
        );


             int __cdecl _flushall(void);

                   __declspec(deprecated("This function or variable may be unsafe. Consider using " "fopen_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
             FILE* __cdecl fopen(
               char const* _FileName,
               char const* _Mode
        );




             int __cdecl fputc(
                int _Character,
                FILE* _Stream
        );


             int __cdecl _fputchar(
             int _Character
        );



             int __cdecl fputs(
                char const* _Buffer,
                FILE* _Stream
        );


             size_t __cdecl fread(
                                                         void* _Buffer,
                                                         size_t _ElementSize,
                                                         size_t _ElementCount,
                                                         FILE* _Stream
        );


                   __declspec(deprecated("This function or variable may be unsafe. Consider using " "freopen_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
             FILE* __cdecl freopen(
                char const* _FileName,
                char const* _Mode,
                FILE* _Stream
        );


             FILE* __cdecl _fsopen(
               char const* _FileName,
               char const* _Mode,
               int _ShFlag
        );



             int __cdecl fsetpos(
                FILE* _Stream,
                fpos_t const* _Position
        );



             int __cdecl fseek(
                FILE* _Stream,
                long _Offset,
                int _Origin
        );



             int __cdecl _fseeki64(
                FILE* _Stream,
                __int64 _Offset,
                int _Origin
        );



             long __cdecl ftell(
                FILE* _Stream
        );



             __int64 __cdecl _ftelli64(
                FILE* _Stream
        );


             size_t __cdecl fwrite(
                                                       void const* _Buffer,
                                                       size_t _ElementSize,
                                                       size_t _ElementCount,
                                                       FILE* _Stream
        );



             int __cdecl getc(
                FILE* _Stream
        );


             int __cdecl getchar(void);


             int __cdecl _getmaxstdio(void);






             int __cdecl _getw(
                FILE* _Stream
        );

             void __cdecl perror(
                   char const* _ErrorMessage
        );





                 int __cdecl _pclose(
                    FILE* _Stream
            );


                 FILE* __cdecl _popen(
                   char const* _Command,
                   char const* _Mode
            );





             int __cdecl putc(
                int _Character,
                FILE* _Stream
        );


             int __cdecl putchar(
             int _Character
        );


             int __cdecl puts(
               char const* _Buffer
        );



             int __cdecl _putw(
                int _Word,
                FILE* _Stream
        );

             int __cdecl remove(
               char const* _FileName
        );


             int __cdecl rename(
               char const* _OldFileName,
               char const* _NewFileName
        );

             int __cdecl _unlink(
               char const* _FileName
        );



        __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_unlink" ". See online help for details."))
                 int __cdecl unlink(
                   char const* _FileName
            );



             void __cdecl rewind(
                FILE* _Stream
        );


             int __cdecl _rmtmp(void);

    __declspec(deprecated("This function or variable may be unsafe. Consider using " "setvbuf" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
             void __cdecl setbuf(
                                                            FILE* _Stream,
                                                            char* _Buffer
        );


             int __cdecl _setmaxstdio(
             int _Maximum
        );



             int __cdecl setvbuf(
                                     FILE* _Stream,
                                     char* _Buffer,
                                     int _Mode,
                                     size_t _Size
        );







             __declspec(allocator) char* __cdecl _tempnam(
                   char const* _DirectoryName,
                   char const* _FilePrefix
        );





                   __declspec(deprecated("This function or variable may be unsafe. Consider using " "tmpfile_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
             FILE* __cdecl tmpfile(void);







#pragma warning(push)
#pragma warning(disable: 28726)
__declspec(deprecated("This function or variable may be unsafe. Consider using " "tmpnam_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) char* __cdecl tmpnam( char *_Buffer);




#pragma warning(pop)



 int __cdecl ungetc(
                int _Character,
                FILE* _Stream
        );
# 461 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h" 3
             void __cdecl _lock_file(
                FILE* _Stream
        );

             void __cdecl _unlock_file(
                FILE* _Stream
        );



             int __cdecl _fclose_nolock(
                FILE* _Stream
        );



             int __cdecl _fflush_nolock(
                    FILE* _Stream
        );



             int __cdecl _fgetc_nolock(
                FILE* _Stream
        );



             int __cdecl _fputc_nolock(
                int _Character,
                FILE* _Stream
        );


             size_t __cdecl _fread_nolock(
                                                         void* _Buffer,
                                                         size_t _ElementSize,
                                                         size_t _ElementCount,
                                                         FILE* _Stream
        );



             size_t __cdecl _fread_nolock_s(
                                                                         void* _Buffer,
                                                                         size_t _BufferSize,
                                                                         size_t _ElementSize,
                                                                         size_t _ElementCount,
                                                                         FILE* _Stream
        );


             int __cdecl _fseek_nolock(
                FILE* _Stream,
                long _Offset,
                int _Origin
        );


             int __cdecl _fseeki64_nolock(
                FILE* _Stream,
                __int64 _Offset,
                int _Origin
        );


             long __cdecl _ftell_nolock(
                FILE* _Stream
        );


             __int64 __cdecl _ftelli64_nolock(
                FILE* _Stream
        );


             size_t __cdecl _fwrite_nolock(
                                                       void const* _Buffer,
                                                       size_t _ElementSize,
                                                       size_t _ElementCount,
                                                       FILE* _Stream
        );


             int __cdecl _getc_nolock(
                FILE* _Stream
        );


             int __cdecl _putc_nolock(
                int _Character,
                FILE* _Stream
        );


             int __cdecl _ungetc_nolock(
                int _Character,
                FILE* _Stream
        );
# 587 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h" 3
             int* __cdecl __p__commode(void);
# 607 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h" 3
             int __cdecl __stdio_common_vfprintf(
                                                unsigned __int64 _Options,
                                                FILE* _Stream,
                                                char const* _Format,
                                                _locale_t _Locale,
                                                va_list _ArgList
        );

             int __cdecl __stdio_common_vfprintf_s(
                                                unsigned __int64 _Options,
                                                FILE* _Stream,
                                                char const* _Format,
                                                _locale_t _Locale,
                                                va_list _ArgList
        );


             int __cdecl __stdio_common_vfprintf_p(
                                                unsigned __int64 _Options,
                                                FILE* _Stream,
                                                char const* _Format,
                                                _locale_t _Locale,
                                                va_list _ArgList
        );


    __inline int __cdecl _vfprintf_l(
                 FILE* const _Stream,
                 char const* const _Format,
                 _locale_t const _Locale,
                 va_list _ArgList
        )



    {
        return __stdio_common_vfprintf((*__local_stdio_printf_options()), _Stream, _Format, _Locale, _ArgList);
    }



    __inline int __cdecl vfprintf(
                                      FILE* const _Stream,
                                      char const* const _Format,
                                      va_list _ArgList
        )



    {
        return _vfprintf_l(_Stream, _Format, ((void *)0), _ArgList);
    }



    __inline int __cdecl _vfprintf_s_l(
                 FILE* const _Stream,
                 char const* const _Format,
                 _locale_t const _Locale,
                 va_list _ArgList
        )



    {
        return __stdio_common_vfprintf_s((*__local_stdio_printf_options()), _Stream, _Format, _Locale, _ArgList);
    }





        __inline int __cdecl vfprintf_s(
                                          FILE* const _Stream,
                                          char const* const _Format,
                                          va_list _ArgList
            )



        {
            return _vfprintf_s_l(_Stream, _Format, ((void *)0), _ArgList);
        }





    __inline int __cdecl _vfprintf_p_l(
                 FILE* const _Stream,
                 char const* const _Format,
                 _locale_t const _Locale,
                 va_list _ArgList
        )



    {
        return __stdio_common_vfprintf_p((*__local_stdio_printf_options()), _Stream, _Format, _Locale, _ArgList);
    }



    __inline int __cdecl _vfprintf_p(
                                      FILE* const _Stream,
                                      char const* const _Format,
                                      va_list _ArgList
        )



    {
        return _vfprintf_p_l(_Stream, _Format, ((void *)0), _ArgList);
    }



    __inline int __cdecl _vprintf_l(
                                                char const* const _Format,
                                                _locale_t const _Locale,
                                                va_list _ArgList
        )



    {
        return _vfprintf_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
    }



    __inline int __cdecl vprintf(
                                      char const* const _Format,
                                      va_list _ArgList
        )



    {
        return _vfprintf_l((__acrt_iob_func(1)), _Format, ((void *)0), _ArgList);
    }



    __inline int __cdecl _vprintf_s_l(
                                                char const* const _Format,
                                                _locale_t const _Locale,
                                                va_list _ArgList
        )



    {
        return _vfprintf_s_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
    }





        __inline int __cdecl vprintf_s(
                                          char const* const _Format,
                                          va_list _ArgList
            )



        {
            return _vfprintf_s_l((__acrt_iob_func(1)), _Format, ((void *)0), _ArgList);
        }





    __inline int __cdecl _vprintf_p_l(
                                                char const* const _Format,
                                                _locale_t const _Locale,
                                                va_list _ArgList
        )



    {
        return _vfprintf_p_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
    }



    __inline int __cdecl _vprintf_p(
                                      char const* const _Format,
                                      va_list _ArgList
        )



    {
        return _vfprintf_p_l((__acrt_iob_func(1)), _Format, ((void *)0), _ArgList);
    }



    __inline int __cdecl _fprintf_l(
                                                FILE* const _Stream,
                                                char const* const _Format,
                                                _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        __builtin_va_start(_ArgList, _Locale);
        _Result = _vfprintf_l(_Stream, _Format, _Locale, _ArgList);
        __builtin_va_end(_ArgList);
        return _Result;
    }



    __inline int __cdecl fprintf(
                                      FILE* const _Stream,
                                      char const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        __builtin_va_start(_ArgList, _Format);
        _Result = _vfprintf_l(_Stream, _Format, ((void *)0), _ArgList);
        __builtin_va_end(_ArgList);
        return _Result;
    }


             int __cdecl _set_printf_count_output(
             int _Value
        );

             int __cdecl _get_printf_count_output(void);


    __inline int __cdecl _fprintf_s_l(
                                                FILE* const _Stream,
                                                char const* const _Format,
                                                _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        __builtin_va_start(_ArgList, _Locale);
        _Result = _vfprintf_s_l(_Stream, _Format, _Locale, _ArgList);
        __builtin_va_end(_ArgList);
        return _Result;
    }





        __inline int __cdecl fprintf_s(
                                          FILE* const _Stream,
                                          char const* const _Format,
            ...)



        {
            int _Result;
            va_list _ArgList;
            __builtin_va_start(_ArgList, _Format);
            _Result = _vfprintf_s_l(_Stream, _Format, ((void *)0), _ArgList);
            __builtin_va_end(_ArgList);
            return _Result;
        }





    __inline int __cdecl _fprintf_p_l(
                                                FILE* const _Stream,
                                                char const* const _Format,
                                                _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        __builtin_va_start(_ArgList, _Locale);
        _Result = _vfprintf_p_l(_Stream, _Format, _Locale, _ArgList);
        __builtin_va_end(_ArgList);
        return _Result;
    }



    __inline int __cdecl _fprintf_p(
                                      FILE* const _Stream,
                                      char const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        __builtin_va_start(_ArgList, _Format);
        _Result = _vfprintf_p_l(_Stream, _Format, ((void *)0), _ArgList);
        __builtin_va_end(_ArgList);
        return _Result;
    }



    __inline int __cdecl _printf_l(
                                                char const* const _Format,
                                                _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        __builtin_va_start(_ArgList, _Locale);
        _Result = _vfprintf_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
        __builtin_va_end(_ArgList);
        return _Result;
    }



    __inline int __cdecl printf(
                                      char const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        __builtin_va_start(_ArgList, _Format);
        _Result = _vfprintf_l((__acrt_iob_func(1)), _Format, ((void *)0), _ArgList);
        __builtin_va_end(_ArgList);
        return _Result;
    }



    __inline int __cdecl _printf_s_l(
                                                char const* const _Format,
                                                _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        __builtin_va_start(_ArgList, _Locale);
        _Result = _vfprintf_s_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
        __builtin_va_end(_ArgList);
        return _Result;
    }





        __inline int __cdecl printf_s(
                                          char const* const _Format,
            ...)



        {
            int _Result;
            va_list _ArgList;
            __builtin_va_start(_ArgList, _Format);
            _Result = _vfprintf_s_l((__acrt_iob_func(1)), _Format, ((void *)0), _ArgList);
            __builtin_va_end(_ArgList);
            return _Result;
        }





    __inline int __cdecl _printf_p_l(
                                                char const* const _Format,
                                                _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        __builtin_va_start(_ArgList, _Locale);
        _Result = _vfprintf_p_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
        __builtin_va_end(_ArgList);
        return _Result;
    }



    __inline int __cdecl _printf_p(
                                      char const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        __builtin_va_start(_ArgList, _Format);
        _Result = _vfprintf_p_l((__acrt_iob_func(1)), _Format, ((void *)0), _ArgList);
        __builtin_va_end(_ArgList);
        return _Result;
    }
# 1044 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h" 3
             int __cdecl __stdio_common_vfscanf(
                                               unsigned __int64 _Options,
                                               FILE* _Stream,
                                               char const* _Format,
                                               _locale_t _Locale,
                                               va_list _Arglist
        );


    __inline int __cdecl _vfscanf_l(
                                      FILE* const _Stream,
                                      char const* const _Format,
                                      _locale_t const _Locale,
                                      va_list _ArgList
        )



    {
        return __stdio_common_vfscanf(
            (*__local_stdio_scanf_options ()),
            _Stream, _Format, _Locale, _ArgList);
    }



    __inline int __cdecl vfscanf(
                                      FILE* const _Stream,
                                      char const* const _Format,
                                      va_list _ArgList
        )



    {
        return _vfscanf_l(_Stream, _Format, ((void *)0), _ArgList);
    }



    __inline int __cdecl _vfscanf_s_l(
                                      FILE* const _Stream,
                                      char const* const _Format,
                                      _locale_t const _Locale,
                                      va_list _ArgList
        )



    {
        return __stdio_common_vfscanf(
            (*__local_stdio_scanf_options ()) | (1ULL << 0),
            _Stream, _Format, _Locale, _ArgList);
    }






        __inline int __cdecl vfscanf_s(
                                          FILE* const _Stream,
                                          char const* const _Format,
                                          va_list _ArgList
            )



        {
            return _vfscanf_s_l(_Stream, _Format, ((void *)0), _ArgList);
        }





    __inline int __cdecl _vscanf_l(
                                      char const* const _Format,
                                      _locale_t const _Locale,
                                      va_list _ArgList
        )



    {
        return _vfscanf_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
    }



    __inline int __cdecl vscanf(
                                      char const* const _Format,
                                      va_list _ArgList
        )



    {
        return _vfscanf_l((__acrt_iob_func(0)), _Format, ((void *)0), _ArgList);
    }



    __inline int __cdecl _vscanf_s_l(
                                      char const* const _Format,
                                      _locale_t const _Locale,
                                      va_list _ArgList
        )



    {
        return _vfscanf_s_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
    }





        __inline int __cdecl vscanf_s(
                                          char const* const _Format,
                                          va_list _ArgList
            )



        {
            return _vfscanf_s_l((__acrt_iob_func(0)), _Format, ((void *)0), _ArgList);
        }




                       __declspec(deprecated("This function or variable may be unsafe. Consider using " "_fscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _fscanf_l(
                                               FILE* const _Stream,
                                               char const* const _Format,
                                               _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        __builtin_va_start(_ArgList, _Locale);
        _Result = _vfscanf_l(_Stream, _Format, _Locale, _ArgList);
        __builtin_va_end(_ArgList);
        return _Result;
    }


                   __declspec(deprecated("This function or variable may be unsafe. Consider using " "fscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl fscanf(
                                     FILE* const _Stream,
                                     char const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        __builtin_va_start(_ArgList, _Format);
        _Result = _vfscanf_l(_Stream, _Format, ((void *)0), _ArgList);
        __builtin_va_end(_ArgList);
        return _Result;
    }



    __inline int __cdecl _fscanf_s_l(
                                                 FILE* const _Stream,
                                                 char const* const _Format,
                                                 _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        __builtin_va_start(_ArgList, _Locale);
        _Result = _vfscanf_s_l(_Stream, _Format, _Locale, _ArgList);
        __builtin_va_end(_ArgList);
        return _Result;
    }





        __inline int __cdecl fscanf_s(
                                           FILE* const _Stream,
                                           char const* const _Format,
            ...)



        {
            int _Result;
            va_list _ArgList;
            __builtin_va_start(_ArgList, _Format);
            _Result = _vfscanf_s_l(_Stream, _Format, ((void *)0), _ArgList);
            __builtin_va_end(_ArgList);
            return _Result;
        }




                       __declspec(deprecated("This function or variable may be unsafe. Consider using " "_scanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _scanf_l(
                                               char const* const _Format,
                                               _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        __builtin_va_start(_ArgList, _Locale);
        _Result = _vfscanf_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
        __builtin_va_end(_ArgList);
        return _Result;
    }


                   __declspec(deprecated("This function or variable may be unsafe. Consider using " "scanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl scanf(
                                     char const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        __builtin_va_start(_ArgList, _Format);
        _Result = _vfscanf_l((__acrt_iob_func(0)), _Format, ((void *)0), _ArgList);
        __builtin_va_end(_ArgList);
        return _Result;
    }



    __inline int __cdecl _scanf_s_l(
                                                 char const* const _Format,
                                                 _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        __builtin_va_start(_ArgList, _Locale);
        _Result = _vfscanf_s_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
        __builtin_va_end(_ArgList);
        return _Result;
    }





        __inline int __cdecl scanf_s(
                                           char const* const _Format,
            ...)



        {
            int _Result;
            va_list _ArgList;
            __builtin_va_start(_ArgList, _Format);
            _Result = _vfscanf_s_l((__acrt_iob_func(0)), _Format, ((void *)0), _ArgList);
            __builtin_va_end(_ArgList);
            return _Result;
        }
# 1337 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h" 3
             int __cdecl __stdio_common_vsprintf(
                                                unsigned __int64 _Options,
                                                char* _Buffer,
                                                size_t _BufferCount,
                                                char const* _Format,
                                                _locale_t _Locale,
                                                va_list _ArgList
        );


             int __cdecl __stdio_common_vsprintf_s(
                                                unsigned __int64 _Options,
                                                char* _Buffer,
                                                size_t _BufferCount,
                                                char const* _Format,
                                                _locale_t _Locale,
                                                va_list _ArgList
        );


             int __cdecl __stdio_common_vsnprintf_s(
                                                unsigned __int64 _Options,
                                                char* _Buffer,
                                                size_t _BufferCount,
                                                size_t _MaxCount,
                                                char const* _Format,
                                                _locale_t _Locale,
                                                va_list _ArgList
        );


             int __cdecl __stdio_common_vsprintf_p(
                                                unsigned __int64 _Options,
                                                char* _Buffer,
                                                size_t _BufferCount,
                                                char const* _Format,
                                                _locale_t _Locale,
                                                va_list _ArgList
        );


                       __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vsnprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _vsnprintf_l(
                                                     char* const _Buffer,
                                                     size_t const _BufferCount,
                                                     char const* const _Format,
                                                     _locale_t const _Locale,
                                                     va_list _ArgList
        )



    {
        int const _Result = __stdio_common_vsprintf(
            (*__local_stdio_printf_options()) | (1ULL << 0),
            _Buffer, _BufferCount, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }




    __inline int __cdecl _vsnprintf(
                                                     char* const _Buffer,
                                                    size_t const _BufferCount,
                                                    char const* const _Format,
                                                    va_list _ArgList
        )



    {
#pragma warning(push)
#pragma warning(disable: 4996)
 return _vsnprintf_l(_Buffer, _BufferCount, _Format, ((void *)0), _ArgList);
#pragma warning(pop)
 }
# 1430 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h" 3
    __inline int __cdecl vsnprintf(
                                                          char* const _Buffer,
                                                          size_t const _BufferCount,
                                                          char const* const _Format,
                                                          va_list _ArgList
        )



    {
        int const _Result = __stdio_common_vsprintf(
            (*__local_stdio_printf_options()) | (1ULL << 1),
            _Buffer, _BufferCount, _Format, ((void *)0), _ArgList);

        return _Result < 0 ? -1 : _Result;
    }



                       __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vsprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _vsprintf_l(
                                         char* const _Buffer,
                                         char const* const _Format,
                                         _locale_t const _Locale,
                                         va_list _ArgList
        )



    {
#pragma warning(push)
#pragma warning(disable: 4996)
 return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);
#pragma warning(pop)
 }



                       __declspec(deprecated("This function or variable may be unsafe. Consider using " "vsprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl vsprintf(
                                         char* const _Buffer,
                                         char const* const _Format,
                                         va_list _ArgList
        )



    {
#pragma warning(push)
#pragma warning(disable: 4996)
 return _vsnprintf_l(_Buffer, (size_t)-1, _Format, ((void *)0), _ArgList);
#pragma warning(pop)
 }




    __inline int __cdecl _vsprintf_s_l(
                                                      char* const _Buffer,
                                                      size_t const _BufferCount,
                                                      char const* const _Format,
                                                      _locale_t const _Locale,
                                                      va_list _ArgList
        )



    {
        int const _Result = __stdio_common_vsprintf_s(
            (*__local_stdio_printf_options()),
            _Buffer, _BufferCount, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }






        __inline int __cdecl vsprintf_s(
                                                          char* const _Buffer,
                                                          size_t const _BufferCount,
                                                          char const* const _Format,
                                                          va_list _ArgList
            )



        {
            return _vsprintf_s_l(_Buffer, _BufferCount, _Format, ((void *)0), _ArgList);
        }
# 1536 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h" 3
    __inline int __cdecl _vsprintf_p_l(
                                                      char* const _Buffer,
                                                      size_t const _BufferCount,
                                                      char const* const _Format,
                                                      _locale_t const _Locale,
                                                      va_list _ArgList
        )



    {
        int const _Result = __stdio_common_vsprintf_p(
            (*__local_stdio_printf_options()),
            _Buffer, _BufferCount, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }




    __inline int __cdecl _vsprintf_p(
                                                      char* const _Buffer,
                                                      size_t const _BufferCount,
                                                      char const* const _Format,
                                                      va_list _ArgList
        )



    {
        return _vsprintf_p_l(_Buffer, _BufferCount, _Format, ((void *)0), _ArgList);
    }




    __inline int __cdecl _vsnprintf_s_l(
                                                          char* const _Buffer,
                                                          size_t const _BufferCount,
                                                          size_t const _MaxCount,
                                                          char const* const _Format,
                                                          _locale_t const _Locale,
                                                          va_list _ArgList
        )



    {
        int const _Result = __stdio_common_vsnprintf_s(
            (*__local_stdio_printf_options()),
            _Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }




    __inline int __cdecl _vsnprintf_s(
                                                          char* const _Buffer,
                                                          size_t const _BufferCount,
                                                          size_t const _MaxCount,
                                                          char const* const _Format,
                                                          va_list _ArgList
        )



    {
        return _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, ((void *)0), _ArgList);
    }
# 1623 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h" 3
        __inline int __cdecl vsnprintf_s(
                                                              char* const _Buffer,
                                                              size_t const _BufferCount,
                                                              size_t const _MaxCount,
                                                              char const* const _Format,
                                                              va_list _ArgList
            )



        {
            return _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, ((void *)0), _ArgList);
        }
# 1650 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h" 3
    __inline int __cdecl _vscprintf_l(
                                                char const* const _Format,
                                                _locale_t const _Locale,
                                                va_list _ArgList
        )



    {
        int const _Result = __stdio_common_vsprintf(
            (*__local_stdio_printf_options()) | (1ULL << 1),
            ((void *)0), 0, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }



    __inline int __cdecl _vscprintf(
                                      char const* const _Format,
                                      va_list _ArgList
        )



    {
        return _vscprintf_l(_Format, ((void *)0), _ArgList);
    }



    __inline int __cdecl _vscprintf_p_l(
                                                char const* const _Format,
                                                _locale_t const _Locale,
                                                va_list _ArgList
        )



    {
        int const _Result = __stdio_common_vsprintf_p(
            (*__local_stdio_printf_options()) | (1ULL << 1),
            ((void *)0), 0, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }



    __inline int __cdecl _vscprintf_p(
                                      char const* const _Format,
                                      va_list _ArgList
        )



    {
        return _vscprintf_p_l(_Format, ((void *)0), _ArgList);
    }



    __inline int __cdecl _vsnprintf_c_l(
                                                char* const _Buffer,
                                                size_t const _BufferCount,
                                                char const* const _Format,
                                                _locale_t const _Locale,
                                                va_list _ArgList
        )



    {
        int const _Result = __stdio_common_vsprintf(
            (*__local_stdio_printf_options()),
            _Buffer, _BufferCount, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }




    __inline int __cdecl _vsnprintf_c(
                                       char* const _Buffer,
                                       size_t const _BufferCount,
                                       char const* const _Format,
                                       va_list _ArgList
        )



    {
        return _vsnprintf_c_l(_Buffer, _BufferCount, _Format, ((void *)0), _ArgList);
    }



                       __declspec(deprecated("This function or variable may be unsafe. Consider using " "_sprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _sprintf_l(
                                                char* const _Buffer,
                                                char const* const _Format,
                                                _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        __builtin_va_start(_ArgList, _Locale);

#pragma warning(push)
#pragma warning(disable: 4996)
 _Result = _vsprintf_l(_Buffer, _Format, _Locale, _ArgList);
#pragma warning(pop)

 __builtin_va_end(_ArgList);
        return _Result;
    }




    __inline int __cdecl sprintf(
                                         char* const _Buffer,
                                         char const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        __builtin_va_start(_ArgList, _Format);

#pragma warning(push)
#pragma warning(disable: 4996)
 _Result = _vsprintf_l(_Buffer, _Format, ((void *)0), _ArgList);
#pragma warning(pop)

 __builtin_va_end(_ArgList);
        return _Result;
    }


#pragma warning(push)
#pragma warning(disable: 4996)
#pragma warning(disable: 28719)
#pragma warning(disable: 28726)
 __declspec(deprecated("This function or variable may be unsafe. Consider using " "sprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) int __cdecl sprintf( char *_Buffer, char const* _Format, ...); __declspec(deprecated("This function or variable may be unsafe. Consider using " "vsprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) int __cdecl vsprintf( char *_Buffer, char const* _Format, va_list _Args);





#pragma warning(pop)



 __inline int __cdecl _sprintf_s_l(
                                                      char* const _Buffer,
                                                      size_t const _BufferCount,
                                                      char const* const _Format,
                                                      _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        __builtin_va_start(_ArgList, _Locale);
        _Result = _vsprintf_s_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
        __builtin_va_end(_ArgList);
        return _Result;
    }






        __inline int __cdecl sprintf_s(
                                                          char* const _Buffer,
                                                          size_t const _BufferCount,
                                                          char const* const _Format,
            ...)



        {
            int _Result;
            va_list _ArgList;
            __builtin_va_start(_ArgList, _Format);
            _Result = _vsprintf_s_l(_Buffer, _BufferCount, _Format, ((void *)0), _ArgList);
            __builtin_va_end(_ArgList);
            return _Result;
        }
# 1862 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h" 3
    __inline int __cdecl _sprintf_p_l(
                                                      char* const _Buffer,
                                                      size_t const _BufferCount,
                                                      char const* const _Format,
                                                      _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        __builtin_va_start(_ArgList, _Locale);
        _Result = _vsprintf_p_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
        __builtin_va_end(_ArgList);
        return _Result;
    }




    __inline int __cdecl _sprintf_p(
                                                      char* const _Buffer,
                                                      size_t const _BufferCount,
                                                      char const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        __builtin_va_start(_ArgList, _Format);
        _Result = _vsprintf_p_l(_Buffer, _BufferCount, _Format, ((void *)0), _ArgList);
        __builtin_va_end(_ArgList);
        return _Result;
    }



                       __declspec(deprecated("This function or variable may be unsafe. Consider using " "_snprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _snprintf_l(
                                                     char* const _Buffer,
                                                     size_t const _BufferCount,
                                                     char const* const _Format,
                                                     _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        __builtin_va_start(_ArgList, _Locale);

#pragma warning(push)
#pragma warning(disable: 4996)
 _Result = _vsnprintf_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
#pragma warning(pop)

 __builtin_va_end(_ArgList);
        return _Result;
    }
# 1940 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h" 3
    __inline int __cdecl snprintf(
                                                          char* const _Buffer,
                                                          size_t const _BufferCount,
                                                          char const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        __builtin_va_start(_ArgList, _Format);
#pragma warning(suppress: 28719)
 _Result = vsnprintf(_Buffer, _BufferCount, _Format, _ArgList);
        __builtin_va_end(_ArgList);
        return _Result;
    }




    __inline int __cdecl _snprintf(
                                                     char* const _Buffer,
                                                     size_t const _BufferCount,
                                                     char const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        __builtin_va_start(_ArgList, _Format);
#pragma warning(suppress: 28719)
 _Result = _vsnprintf(_Buffer, _BufferCount, _Format, _ArgList);
        __builtin_va_end(_ArgList);
        return _Result;
    }


    __declspec(deprecated("This function or variable may be unsafe. Consider using " "_snprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) int __cdecl _snprintf( char *_Buffer, size_t _BufferCount, char const* _Format, ...); __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vsnprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) int __cdecl _vsnprintf( char *_Buffer, size_t _BufferCount, char const* _Format, va_list _Args);
# 1991 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h" 3
    __inline int __cdecl _snprintf_c_l(
                                                char* const _Buffer,
                                                size_t const _BufferCount,
                                                char const* const _Format,
                                                _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        __builtin_va_start(_ArgList, _Locale);
        _Result = _vsnprintf_c_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
        __builtin_va_end(_ArgList);
        return _Result;
    }




    __inline int __cdecl _snprintf_c(
                                       char* const _Buffer,
                                       size_t const _BufferCount,
                                       char const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        __builtin_va_start(_ArgList, _Format);
        _Result = _vsnprintf_c_l(_Buffer, _BufferCount, _Format, ((void *)0), _ArgList);
        __builtin_va_end(_ArgList);
        return _Result;
    }




    __inline int __cdecl _snprintf_s_l(
                                                          char* const _Buffer,
                                                          size_t const _BufferCount,
                                                          size_t const _MaxCount,
                                                          char const* const _Format,
                                                          _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        __builtin_va_start(_ArgList, _Locale);
        _Result = _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);
        __builtin_va_end(_ArgList);
        return _Result;
    }




    __inline int __cdecl _snprintf_s(
                                                          char* const _Buffer,
                                                          size_t const _BufferCount,
                                                          size_t const _MaxCount,
                                                          char const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        __builtin_va_start(_ArgList, _Format);
        _Result = _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, ((void *)0), _ArgList);
        __builtin_va_end(_ArgList);
        return _Result;
    }
# 2082 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h" 3
    __inline int __cdecl _scprintf_l(
                                                char const* const _Format,
                                                _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        __builtin_va_start(_ArgList, _Locale);
        _Result = _vscprintf_l(_Format, _Locale, _ArgList);
        __builtin_va_end(_ArgList);
        return _Result;
    }



    __inline int __cdecl _scprintf(
                                      char const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        __builtin_va_start(_ArgList, _Format);
        _Result = _vscprintf_l(_Format, ((void *)0), _ArgList);
        __builtin_va_end(_ArgList);
        return _Result;
    }



    __inline int __cdecl _scprintf_p_l(
                                                char const* const _Format,
                                                _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        __builtin_va_start(_ArgList, _Locale);
        _Result = _vscprintf_p_l(_Format, _Locale, _ArgList);
        __builtin_va_end(_ArgList);
        return _Result;
    }



    __inline int __cdecl _scprintf_p(
                                      char const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        __builtin_va_start(_ArgList, _Format);
        _Result = _vscprintf_p(_Format, _ArgList);
        __builtin_va_end(_ArgList);
        return _Result;
    }







             int __cdecl __stdio_common_vsscanf(
                                               unsigned __int64 _Options,
                                               char const* _Buffer,
                                               size_t _BufferCount,
                                               char const* _Format,
                                               _locale_t _Locale,
                                               va_list _ArgList
        );


    __inline int __cdecl _vsscanf_l(
                                      char const* const _Buffer,
                                      char const* const _Format,
                                      _locale_t const _Locale,
                                      va_list _ArgList
        )



    {
        return __stdio_common_vsscanf(
            (*__local_stdio_scanf_options ()),
            _Buffer, (size_t)-1, _Format, _Locale, _ArgList);
    }



    __inline int __cdecl vsscanf(
                                      char const* const _Buffer,
                                      char const* const _Format,
                                      va_list _ArgList
        )



    {
        return _vsscanf_l(_Buffer, _Format, ((void *)0), _ArgList);
    }



    __inline int __cdecl _vsscanf_s_l(
                                      char const* const _Buffer,
                                      char const* const _Format,
                                      _locale_t const _Locale,
                                      va_list _ArgList
        )



    {
        return __stdio_common_vsscanf(
            (*__local_stdio_scanf_options ()) | (1ULL << 0),
            _Buffer, (size_t)-1, _Format, _Locale, _ArgList);
    }




#pragma warning(push)
#pragma warning(disable: 6530)


 __inline int __cdecl vsscanf_s(
                                          char const* const _Buffer,
                                          char const* const _Format,
                                          va_list _ArgList
            )



        {
            return _vsscanf_s_l(_Buffer, _Format, ((void *)0), _ArgList);
        }
# 2239 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h" 3
#pragma warning(pop)



 __declspec(deprecated("This function or variable may be unsafe. Consider using " "_sscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _sscanf_l(
                                               char const* const _Buffer,
                                               char const* const _Format,
                                               _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        __builtin_va_start(_ArgList, _Locale);
        _Result = _vsscanf_l(_Buffer, _Format, _Locale, _ArgList);
        __builtin_va_end(_ArgList);
        return _Result;
    }


                   __declspec(deprecated("This function or variable may be unsafe. Consider using " "sscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl sscanf(
                                     char const* const _Buffer,
                                     char const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        __builtin_va_start(_ArgList, _Format);
        _Result = _vsscanf_l(_Buffer, _Format, ((void *)0), _ArgList);
        __builtin_va_end(_ArgList);
        return _Result;
    }



    __inline int __cdecl _sscanf_s_l(
                                                 char const* const _Buffer,
                                                 char const* const _Format,
                                                 _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        __builtin_va_start(_ArgList, _Locale);
        _Result = _vsscanf_s_l(_Buffer, _Format, _Locale, _ArgList);
        __builtin_va_end(_ArgList);
        return _Result;
    }





        __inline int __cdecl sscanf_s(
                                           char const* const _Buffer,
                                           char const* const _Format,
            ...)



        {
            int _Result;
            va_list _ArgList;
            __builtin_va_start(_ArgList, _Format);

#pragma warning(push)
#pragma warning(disable: 4996)
 _Result = vsscanf_s(_Buffer, _Format, _ArgList);
#pragma warning(pop)

 __builtin_va_end(_ArgList);
            return _Result;
        }




#pragma warning(push)
#pragma warning(disable: 6530)

 __declspec(deprecated("This function or variable may be unsafe. Consider using " "_snscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _snscanf_l(
                                               char const* const _Buffer,
                                               size_t const _BufferCount,
                                               char const* const _Format,
                                               _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        __builtin_va_start(_ArgList, _Locale);

        _Result = __stdio_common_vsscanf(
            (*__local_stdio_scanf_options ()),
            _Buffer, _BufferCount, _Format, _Locale, _ArgList);

        __builtin_va_end(_ArgList);
        return _Result;
    }


                       __declspec(deprecated("This function or variable may be unsafe. Consider using " "_snscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _snscanf(
                                               char const* const _Buffer,
                                               size_t const _BufferCount,
                                               char const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        __builtin_va_start(_ArgList, _Format);

        _Result = __stdio_common_vsscanf(
            (*__local_stdio_scanf_options ()),
            _Buffer, _BufferCount, _Format, ((void *)0), _ArgList);

        __builtin_va_end(_ArgList);
        return _Result;
    }




    __inline int __cdecl _snscanf_s_l(
                                                 char const* const _Buffer,
                                                 size_t const _BufferCount,
                                                 char const* const _Format,
                                                 _locale_t const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        __builtin_va_start(_ArgList, _Locale);

        _Result = __stdio_common_vsscanf(
            (*__local_stdio_scanf_options ()) | (1ULL << 0),
            _Buffer, _BufferCount, _Format, _Locale, _ArgList);

        __builtin_va_end(_ArgList);
        return _Result;
    }



    __inline int __cdecl _snscanf_s(
                                               char const* const _Buffer,
                                               size_t const _BufferCount,
                                               char const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        __builtin_va_start(_ArgList, _Format);

        _Result = __stdio_common_vsscanf(
            (*__local_stdio_scanf_options ()) | (1ULL << 0),
            _Buffer, _BufferCount, _Format, ((void *)0), _ArgList);

        __builtin_va_end(_ArgList);
        return _Result;
    }


#pragma warning(pop)
# 2446 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h" 3
 __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_tempnam" ". See online help for details."))
                 char* __cdecl tempnam(
                       char const* _Directory,
                       char const* _FilePrefix
            );





                           __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_fcloseall" ". See online help for details.")) int __cdecl fcloseall(void);
                           __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_fdopen" ". See online help for details.")) FILE* __cdecl fdopen( int _FileHandle, char const* _Format);
                           __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_fgetchar" ". See online help for details.")) int __cdecl fgetchar(void);
                           __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_fileno" ". See online help for details.")) int __cdecl fileno( FILE* _Stream);
                           __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_flushall" ". See online help for details.")) int __cdecl flushall(void);
                           __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_fputchar" ". See online help for details.")) int __cdecl fputchar( int _Ch);
                           __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_getw" ". See online help for details.")) int __cdecl getw( FILE* _Stream);
                           __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_putw" ". See online help for details.")) int __cdecl putw( int _Ch, FILE* _Stream);
                           __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_rmtmp" ". See online help for details.")) int __cdecl rmtmp(void);






#pragma pack(pop)
# 2 "main.c" 2
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdlib.h" 1 3
# 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdlib.h" 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_malloc.h" 1 3
# 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_malloc.h" 3
#pragma pack(push, 8)
# 54 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_malloc.h" 3
 __declspec(allocator) __declspec(restrict)
void* __cdecl _calloc_base(
         size_t _Count,
         size_t _Size
    );


                            __declspec(allocator) __declspec(restrict)
void* __cdecl calloc(
                            size_t _Count,
                            size_t _Size
    );


         int __cdecl _callnewh(
         size_t _Size
    );


         __declspec(allocator)
void* __cdecl _expand(
                            void* _Block,
                            size_t _Size
    );


void __cdecl _free_base(
                                   void* _Block
    );


void __cdecl free(
                                   void* _Block
    );


         __declspec(allocator) __declspec(restrict)
void* __cdecl _malloc_base(
         size_t _Size
    );


         __declspec(allocator) __declspec(restrict)
void* __cdecl malloc(
                            size_t _Size
    );



size_t __cdecl _msize_base(
                  void* _Block
    );



size_t __cdecl _msize(
                  void* _Block
    );


         __declspec(allocator) __declspec(restrict)
void* __cdecl _realloc_base(
                                    void* _Block,
                                    size_t _Size
    );


         __declspec(allocator) __declspec(restrict)
void* __cdecl realloc(
                                   void* _Block,
                                   size_t _Size
    );


         __declspec(allocator) __declspec(restrict)
void* __cdecl _recalloc_base(
                                   void* _Block,
                                   size_t _Count,
                                   size_t _Size
    );


         __declspec(allocator) __declspec(restrict)
void* __cdecl _recalloc(
                                   void* _Block,
                                   size_t _Count,
                                   size_t _Size
    );


void __cdecl _aligned_free(
                                   void* _Block
    );


         __declspec(allocator) __declspec(restrict)
void* __cdecl _aligned_malloc(
                            size_t _Size,
                            size_t _Alignment
    );


         __declspec(allocator) __declspec(restrict)
void* __cdecl _aligned_offset_malloc(
                            size_t _Size,
                            size_t _Alignment,
                            size_t _Offset
    );



size_t __cdecl _aligned_msize(
                  void* _Block,
                  size_t _Alignment,
                  size_t _Offset
    );


         __declspec(allocator) __declspec(restrict)
void* __cdecl _aligned_offset_realloc(
                                   void* _Block,
                                   size_t _Size,
                                   size_t _Alignment,
                                   size_t _Offset
    );


         __declspec(allocator) __declspec(restrict)
void* __cdecl _aligned_offset_recalloc(
                                   void* _Block,
                                   size_t _Count,
                                   size_t _Size,
                                   size_t _Alignment,
                                   size_t _Offset
    );


         __declspec(allocator) __declspec(restrict)
void* __cdecl _aligned_realloc(
                                   void* _Block,
                                   size_t _Size,
                                   size_t _Alignment
    );


         __declspec(allocator) __declspec(restrict)
void* __cdecl _aligned_recalloc(
                                   void* _Block,
                                   size_t _Count,
                                   size_t _Size,
                                   size_t _Alignment
    );
# 228 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_malloc.h" 3
#pragma pack(pop)
# 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdlib.h" 2 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_search.h" 1 3
# 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_search.h" 3
# 1 "D:\\LLVM\\lib\\clang\\9.0.0\\include\\stddef.h" 1 3
# 35 "D:\\LLVM\\lib\\clang\\9.0.0\\include\\stddef.h" 3
typedef long long int ptrdiff_t;
# 46 "D:\\LLVM\\lib\\clang\\9.0.0\\include\\stddef.h" 3
typedef long long unsigned int size_t;
# 74 "D:\\LLVM\\lib\\clang\\9.0.0\\include\\stddef.h" 3
typedef unsigned short wchar_t;
# 102 "D:\\LLVM\\lib\\clang\\9.0.0\\include\\stddef.h" 3
# 1 "D:\\LLVM\\lib\\clang\\9.0.0\\include/__stddef_max_align_t.h" 1 3
# 14 "D:\\LLVM\\lib\\clang\\9.0.0\\include/__stddef_max_align_t.h" 3
typedef double max_align_t;
# 103 "D:\\LLVM\\lib\\clang\\9.0.0\\include\\stddef.h" 2 3
# 15 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_search.h" 2 3

#pragma pack(push, 8)


 typedef int (__cdecl* _CoreCrtSecureSearchSortCompareFunction)(void*, void const*, void const*);
    typedef int (__cdecl* _CoreCrtNonSecureSearchSortCompareFunction)(void const*, void const*);





             void* __cdecl bsearch_s(
                                                           void const* _Key,
                                                           void const* _Base,
                                                           rsize_t _NumOfElements,
                                                           rsize_t _SizeOfElements,
                               _CoreCrtSecureSearchSortCompareFunction _CompareFunction,
                                                           void* _Context
        );

             void __cdecl qsort_s(
                                                                void* _Base,
                                                                rsize_t _NumOfElements,
                                                                rsize_t _SizeOfElements,
                                _CoreCrtSecureSearchSortCompareFunction _CompareFunction,
                                                                void* _Context
        );






         void* __cdecl bsearch(
                                                       void const* _Key,
                                                       void const* _Base,
                                                       size_t _NumOfElements,
                                                       size_t _SizeOfElements,
                        _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction
    );

         void __cdecl qsort(
                                                            void* _Base,
                                                            size_t _NumOfElements,
                                                            size_t _SizeOfElements,
                        _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction
    );


         void* __cdecl _lfind_s(
                                                          void const* _Key,
                                                          void const* _Base,
                                                          unsigned int* _NumOfElements,
                                                          size_t _SizeOfElements,
                                _CoreCrtSecureSearchSortCompareFunction _CompareFunction,
                                                          void* _Context
    );


         void* __cdecl _lfind(
                                                          void const* _Key,
                                                          void const* _Base,
                                                          unsigned int* _NumOfElements,
                                                          unsigned int _SizeOfElements,
                             _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction
    );


         void* __cdecl _lsearch_s(
                                                                void const* _Key,
                                                                void* _Base,
                                                                unsigned int* _NumOfElements,
                                                                size_t _SizeOfElements,
                                      _CoreCrtSecureSearchSortCompareFunction _CompareFunction,
                                                                void* _Context
    );


         void* __cdecl _lsearch(
                                                                void const* _Key,
                                                                void* _Base,
                                                                unsigned int* _NumOfElements,
                                                                unsigned int _SizeOfElements,
                                   _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction
    );
# 190 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_search.h" 3
                   __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_lfind" ". See online help for details."))
             void* __cdecl lfind(
                                                              void const* _Key,
                                                              void const* _Base,
                                                              unsigned int* _NumOfElements,
                                                              unsigned int _SizeOfElements,
                                 _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction
        );

                   __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_lsearch" ". See online help for details."))
             void* __cdecl lsearch(
                                                                   void const* _Key,
                                                                   void* _Base,
                                                                   unsigned int* _NumOfElements,
                                                                   unsigned int _SizeOfElements,
                                      _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction
        );





#pragma pack(pop)
# 15 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdlib.h" 2 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdlib.h" 1 3
# 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdlib.h" 3
#pragma pack(push, 8)
# 50 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdlib.h" 3
 errno_t __cdecl _itow_s(
                                     int _Value,
                                     wchar_t* _Buffer,
                                     size_t _BufferCount,
                                     int _Radix
        );
# 64 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdlib.h" 3
    __declspec(deprecated("This function or variable may be unsafe. Consider using " "_itow_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) wchar_t* __cdecl _itow(int _Value, wchar_t *_Buffer, int _Radix);
# 73 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdlib.h" 3
             errno_t __cdecl _ltow_s(
                                     long _Value,
                                     wchar_t* _Buffer,
                                     size_t _BufferCount,
                                     int _Radix
        );
# 87 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdlib.h" 3
    __declspec(deprecated("This function or variable may be unsafe. Consider using " "_ltow_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) wchar_t* __cdecl _ltow(long _Value, wchar_t *_Buffer, int _Radix);







             errno_t __cdecl _ultow_s(
                                     unsigned long _Value,
                                     wchar_t* _Buffer,
                                     size_t _BufferCount,
                                     int _Radix
        );
# 109 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdlib.h" 3
    __declspec(deprecated("This function or variable may be unsafe. Consider using " "_ultow_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) wchar_t* __cdecl _ultow(unsigned long _Value, wchar_t *_Buffer, int _Radix);







             double __cdecl wcstod(
                                 wchar_t const* _String,
                                 wchar_t** _EndPtr
        );


             double __cdecl _wcstod_l(
                                 wchar_t const* _String,
                                 wchar_t** _EndPtr,
                                 _locale_t _Locale
        );


             long __cdecl wcstol(
                                 wchar_t const* _String,
                                 wchar_t** _EndPtr,
                                 int _Radix
        );


             long __cdecl _wcstol_l(
                                 wchar_t const* _String,
                                 wchar_t** _EndPtr,
                                 int _Radix,
                                 _locale_t _Locale
        );


             long long __cdecl wcstoll(
                                 wchar_t const* _String,
                                 wchar_t** _EndPtr,
                                 int _Radix
        );


             long long __cdecl _wcstoll_l(
                                 wchar_t const* _String,
                                 wchar_t** _EndPtr,
                                 int _Radix,
                                 _locale_t _Locale
        );


             unsigned long __cdecl wcstoul(
                                 wchar_t const* _String,
                                 wchar_t** _EndPtr,
                                 int _Radix
        );


             unsigned long __cdecl _wcstoul_l(
                                 wchar_t const* _String,
                                 wchar_t** _EndPtr,
                                 int _Radix,
                                 _locale_t _Locale
        );


             unsigned long long __cdecl wcstoull(
                                 wchar_t const* _String,
                                 wchar_t** _EndPtr,
                                 int _Radix
        );


             unsigned long long __cdecl _wcstoull_l(
                                 wchar_t const* _String,
                                 wchar_t** _EndPtr,
                                 int _Radix,
                                 _locale_t _Locale
        );


             long double __cdecl wcstold(
                                 wchar_t const* _String,
                                 wchar_t** _EndPtr
        );


             long double __cdecl _wcstold_l(
                                 wchar_t const* _String,
                                 wchar_t** _EndPtr,
                                 _locale_t _Locale
        );


             float __cdecl wcstof(
                                 wchar_t const* _String,
                                 wchar_t** _EndPtr
        );


             float __cdecl _wcstof_l(
                                 wchar_t const* _String,
                                 wchar_t** _EndPtr,
                                 _locale_t _Locale
        );


             double __cdecl _wtof(
               wchar_t const* _String
        );


             double __cdecl _wtof_l(
                 wchar_t const* _String,
                 _locale_t _Locale
        );


             int __cdecl _wtoi(
               wchar_t const* _String
        );


             int __cdecl _wtoi_l(
                 wchar_t const* _String,
                 _locale_t _Locale
        );


             long __cdecl _wtol(
               wchar_t const* _String
        );


             long __cdecl _wtol_l(
                 wchar_t const* _String,
                 _locale_t _Locale
        );


             long long __cdecl _wtoll(
               wchar_t const* _String
        );


             long long __cdecl _wtoll_l(
                 wchar_t const* _String,
                 _locale_t _Locale
        );


             errno_t __cdecl _i64tow_s(
                                     __int64 _Value,
                                     wchar_t* _Buffer,
                                     size_t _BufferCount,
                                     int _Radix
        );

    __declspec(deprecated("This function or variable may be unsafe. Consider using " "_i64tow_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
             wchar_t* __cdecl _i64tow(
                               __int64 _Value,
                               wchar_t* _Buffer,
                               int _Radix
        );


             errno_t __cdecl _ui64tow_s(
                                     unsigned __int64 _Value,
                                     wchar_t* _Buffer,
                                     size_t _BufferCount,
                                     int _Radix
        );

    __declspec(deprecated("This function or variable may be unsafe. Consider using " "_ui64tow_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
             wchar_t* __cdecl _ui64tow(
                               unsigned __int64 _Value,
                               wchar_t* _Buffer,
                               int _Radix
        );


             __int64 __cdecl _wtoi64(
               wchar_t const* _String
        );


             __int64 __cdecl _wtoi64_l(
                 wchar_t const* _String,
                 _locale_t _Locale
        );


             __int64 __cdecl _wcstoi64(
                                 wchar_t const* _String,
                                 wchar_t** _EndPtr,
                                 int _Radix
        );


             __int64 __cdecl _wcstoi64_l(
                                 wchar_t const* _String,
                                 wchar_t** _EndPtr,
                                 int _Radix,
                                 _locale_t _Locale
        );


             unsigned __int64 __cdecl _wcstoui64(
                                 wchar_t const* _String,
                                 wchar_t** _EndPtr,
                                 int _Radix
        );


             unsigned __int64 __cdecl _wcstoui64_l(
                                 wchar_t const* _String,
                                 wchar_t** _EndPtr,
                                 int _Radix,
                                 _locale_t _Locale
        );






             __declspec(allocator) wchar_t* __cdecl _wfullpath(
                                         wchar_t* _Buffer,
                                         wchar_t const* _Path,
                                         size_t _BufferCount
        );




             errno_t __cdecl _wmakepath_s(
                                     wchar_t* _Buffer,
                                     size_t _BufferCount,
                                     wchar_t const* _Drive,
                                     wchar_t const* _Dir,
                                     wchar_t const* _Filename,
                                     wchar_t const* _Ext
        );
# 362 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdlib.h" 3
#pragma warning(push)
#pragma warning(disable: 28719)
#pragma warning(disable: 28726)
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wmakepath_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) void __cdecl _wmakepath( wchar_t *_Buffer, wchar_t const* _Drive, wchar_t const* _Dir, wchar_t const* _Filename, wchar_t const* _Ext);







#pragma warning(pop)

 void __cdecl _wperror(
                   wchar_t const* _ErrorMessage
        );

    __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wsplitpath_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
             void __cdecl _wsplitpath(
                                 wchar_t const* _FullPath,
                                 wchar_t* _Drive,
                                 wchar_t* _Dir,
                                 wchar_t* _Filename,
                                 wchar_t* _Ext
        );

             errno_t __cdecl _wsplitpath_s(
                                           wchar_t const* _FullPath,
                                           wchar_t* _Drive,
                                           size_t _DriveCount,
                                           wchar_t* _Dir,
                                           size_t _DirCount,
                                           wchar_t* _Filename,
                                           size_t _FilenameCount,
                                           wchar_t* _Ext,
                                           size_t _ExtCount
        );
# 409 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdlib.h" 3
                 errno_t __cdecl _wdupenv_s(
                                                                                        wchar_t** _Buffer,
                                                                                        size_t* _BufferCount,
                                                                                        wchar_t const* _VarName
            );



                       __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wdupenv_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
                 wchar_t* __cdecl _wgetenv(
                   wchar_t const* _VarName
            );



                 errno_t __cdecl _wgetenv_s(
                                             size_t* _RequiredCount,
                                             wchar_t* _Buffer,
                                             size_t _BufferCount,
                                             wchar_t const* _VarName
            );
# 440 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdlib.h" 3
                 int __cdecl _wputenv(
                   wchar_t const* _EnvString
            );


                 errno_t __cdecl _wputenv_s(
                   wchar_t const* _Name,
                   wchar_t const* _Value
            );

                 errno_t __cdecl _wsearchenv_s(
                                         wchar_t const* _Filename,
                                         wchar_t const* _VarName,
                                         wchar_t* _Buffer,
                                         size_t _BufferCount
            );
# 464 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdlib.h" 3
        __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wsearchenv_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) void __cdecl _wsearchenv(wchar_t const* _Filename, wchar_t const* _VarName, wchar_t *_ResultPath);






                 int __cdecl _wsystem(
                       wchar_t const* _Command
            );





#pragma pack(pop)
# 16 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdlib.h" 2 3
# 1 "D:\\LLVM\\lib\\clang\\9.0.0\\include\\limits.h" 1 3
# 21 "D:\\LLVM\\lib\\clang\\9.0.0\\include\\limits.h" 3
# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.25.28610\\include\\limits.h" 1 3
# 13 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.25.28610\\include\\limits.h" 3
#pragma warning(push)
#pragma warning(disable: 4514 4820)

#pragma pack(push, 8)
# 75 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.25.28610\\include\\limits.h" 3
#pragma pack(pop)

#pragma warning(pop)
# 22 "D:\\LLVM\\lib\\clang\\9.0.0\\include\\limits.h" 2 3
# 17 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdlib.h" 2 3

#pragma pack(push, 8)
# 34 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdlib.h" 3
 void __cdecl _swab(
                                                                     char* _Buf1,
                                                                     char* _Buf2,
                                                                     int _SizeInBytes
    );
# 52 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdlib.h" 3
             __declspec(noreturn) void __cdecl exit( int _Code);
             __declspec(noreturn) void __cdecl _exit( int _Code);
             __declspec(noreturn) void __cdecl _Exit( int _Code);
             __declspec(noreturn) void __cdecl quick_exit( int _Code);
             __declspec(noreturn) void __cdecl abort(void);






         unsigned int __cdecl _set_abort_behavior(
         unsigned int _Flags,
         unsigned int _Mask
    );






    typedef int (__cdecl* _onexit_t)(void);
# 140 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdlib.h" 3
    int __cdecl atexit(void (__cdecl*)(void));
    _onexit_t __cdecl _onexit( _onexit_t _Func);


int __cdecl at_quick_exit(void (__cdecl*)(void));
# 155 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdlib.h" 3
    typedef void (__cdecl* _purecall_handler)(void);


    typedef void (__cdecl* _invalid_parameter_handler)(
        wchar_t const*,
        wchar_t const*,
        wchar_t const*,
        unsigned int,
        uintptr_t
        );


             _purecall_handler __cdecl _set_purecall_handler(
                 _purecall_handler _Handler
        );

             _purecall_handler __cdecl _get_purecall_handler(void);


             _invalid_parameter_handler __cdecl _set_invalid_parameter_handler(
                 _invalid_parameter_handler _Handler
        );

             _invalid_parameter_handler __cdecl _get_invalid_parameter_handler(void);

             _invalid_parameter_handler __cdecl _set_thread_local_invalid_parameter_handler(
                 _invalid_parameter_handler _Handler
        );

             _invalid_parameter_handler __cdecl _get_thread_local_invalid_parameter_handler(void);
# 208 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdlib.h" 3
                            int __cdecl _set_error_mode( int _Mode);




             int* __cdecl _errno(void);


             errno_t __cdecl _set_errno( int _Value);
             errno_t __cdecl _get_errno( int* _Value);

             unsigned long* __cdecl __doserrno(void);


             errno_t __cdecl _set_doserrno( unsigned long _Value);
             errno_t __cdecl _get_doserrno( unsigned long * _Value);


             __declspec(deprecated("This function or variable may be unsafe. Consider using " "strerror" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) char** __cdecl __sys_errlist(void);


             __declspec(deprecated("This function or variable may be unsafe. Consider using " "strerror" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) int * __cdecl __sys_nerr(void);


             void __cdecl perror( char const* _ErrMsg);





__declspec(deprecated("This function or variable may be unsafe. Consider using " "_get_pgmptr" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) char** __cdecl __p__pgmptr (void);
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_get_wpgmptr" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) wchar_t** __cdecl __p__wpgmptr(void);
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_get_fmode" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) int* __cdecl __p__fmode (void);
# 255 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdlib.h" 3
         errno_t __cdecl _get_pgmptr ( char** _Value);


         errno_t __cdecl _get_wpgmptr( wchar_t** _Value);

         errno_t __cdecl _set_fmode ( int _Mode );

         errno_t __cdecl _get_fmode ( int* _PMode);
# 271 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdlib.h" 3
typedef struct _div_t
{
    int quot;
    int rem;
} div_t;

typedef struct _ldiv_t
{
    long quot;
    long rem;
} ldiv_t;

typedef struct _lldiv_t
{
    long long quot;
    long long rem;
} lldiv_t;

               int __cdecl abs ( int _Number);
               long __cdecl labs ( long _Number);
               long long __cdecl llabs ( long long _Number);
               __int64 __cdecl _abs64( __int64 _Number);

               unsigned short __cdecl _byteswap_ushort( unsigned short _Number);
               unsigned long __cdecl _byteswap_ulong ( unsigned long _Number);
               unsigned __int64 __cdecl _byteswap_uint64( unsigned __int64 _Number);

                        div_t __cdecl div ( int _Numerator, int _Denominator);
                        ldiv_t __cdecl ldiv ( long _Numerator, long _Denominator);
                        lldiv_t __cdecl lldiv( long long _Numerator, long long _Denominator);



#pragma warning(push)
#pragma warning(disable: 6540)

unsigned int __cdecl _rotl(
         unsigned int _Value,
         int _Shift
    );


unsigned long __cdecl _lrotl(
         unsigned long _Value,
         int _Shift
    );

unsigned __int64 __cdecl _rotl64(
         unsigned __int64 _Value,
         int _Shift
    );

unsigned int __cdecl _rotr(
         unsigned int _Value,
         int _Shift
    );


unsigned long __cdecl _lrotr(
         unsigned long _Value,
         int _Shift
    );

unsigned __int64 __cdecl _rotr64(
         unsigned __int64 _Value,
         int _Shift
    );

#pragma warning(pop)






 void __cdecl srand( unsigned int _Seed);

                        int __cdecl rand(void);
# 390 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdlib.h" 3
#pragma pack(push, 4)
 typedef struct
    {
        unsigned char ld[10];
    } _LDOUBLE;
#pragma pack(pop)
# 411 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdlib.h" 3
typedef struct
{
    double x;
} _CRT_DOUBLE;

typedef struct
{
    float f;
} _CRT_FLOAT;





typedef struct
{
    long double x;
} _LONGDOUBLE;



#pragma pack(push, 4)
typedef struct
{
    unsigned char ld12[12];
} _LDBL12;
#pragma pack(pop)








 double __cdecl atof ( char const* _String);
                                           int __cdecl atoi ( char const* _String);
                                           long __cdecl atol ( char const* _String);
                                           long long __cdecl atoll ( char const* _String);
                                           __int64 __cdecl _atoi64( char const* _String);

                        double __cdecl _atof_l ( char const* _String, _locale_t _Locale);
                        int __cdecl _atoi_l ( char const* _String, _locale_t _Locale);
                        long __cdecl _atol_l ( char const* _String, _locale_t _Locale);
                        long long __cdecl _atoll_l ( char const* _String, _locale_t _Locale);
                        __int64 __cdecl _atoi64_l( char const* _String, _locale_t _Locale);

                        int __cdecl _atoflt ( _CRT_FLOAT* _Result, char const* _String);
                        int __cdecl _atodbl ( _CRT_DOUBLE* _Result, char* _String);
                        int __cdecl _atoldbl( _LDOUBLE* _Result, char* _String);


         int __cdecl _atoflt_l(
             _CRT_FLOAT* _Result,
             char const* _String,
             _locale_t _Locale
    );


         int __cdecl _atodbl_l(
             _CRT_DOUBLE* _Result,
             char* _String,
             _locale_t _Locale
    );



         int __cdecl _atoldbl_l(
             _LDOUBLE* _Result,
             char* _String,
             _locale_t _Locale
    );


         float __cdecl strtof(
                             char const* _String,
                             char** _EndPtr
    );


         float __cdecl _strtof_l(
                             char const* _String,
                             char** _EndPtr,
                             _locale_t _Locale
    );


         double __cdecl strtod(
                             char const* _String,
                             char** _EndPtr
    );


         double __cdecl _strtod_l(
                             char const* _String,
                             char** _EndPtr,
                             _locale_t _Locale
    );


         long double __cdecl strtold(
                             char const* _String,
                             char** _EndPtr
    );


         long double __cdecl _strtold_l(
                             char const* _String,
                             char** _EndPtr,
                             _locale_t _Locale
    );


         long __cdecl strtol(
                             char const* _String,
                             char** _EndPtr,
                             int _Radix
    );


         long __cdecl _strtol_l(
                             char const* _String,
                             char** _EndPtr,
                             int _Radix,
                             _locale_t _Locale
    );


         long long __cdecl strtoll(
                             char const* _String,
                             char** _EndPtr,
                             int _Radix
    );


         long long __cdecl _strtoll_l(
                             char const* _String,
                             char** _EndPtr,
                             int _Radix,
                             _locale_t _Locale
    );


         unsigned long __cdecl strtoul(
                             char const* _String,
                             char** _EndPtr,
                             int _Radix
    );


         unsigned long __cdecl _strtoul_l(
                             char const* _String,
                             char** _EndPtr,
                             int _Radix,
                             _locale_t _Locale
    );


         unsigned long long __cdecl strtoull(
                             char const* _String,
                             char** _EndPtr,
                             int _Radix
    );


         unsigned long long __cdecl _strtoull_l(
                             char const* _String,
                             char** _EndPtr,
                             int _Radix,
                             _locale_t _Locale
    );


         __int64 __cdecl _strtoi64(
                             char const* _String,
                             char** _EndPtr,
                             int _Radix
    );


         __int64 __cdecl _strtoi64_l(
                             char const* _String,
                             char** _EndPtr,
                             int _Radix,
                             _locale_t _Locale
    );


         unsigned __int64 __cdecl _strtoui64(
                             char const* _String,
                             char** _EndPtr,
                             int _Radix
    );


         unsigned __int64 __cdecl _strtoui64_l(
                             char const* _String,
                             char** _EndPtr,
                             int _Radix,
                             _locale_t _Locale
    );
# 622 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdlib.h" 3
         errno_t __cdecl _itoa_s(
                                 int _Value,
                                 char* _Buffer,
                                 size_t _BufferCount,
                                 int _Radix
    );
# 637 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdlib.h" 3
#pragma warning(push)
#pragma warning(disable: 28719)
#pragma warning(disable: 28726)
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_itoa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) char* __cdecl _itoa(int _Value, char *_Buffer, int _Radix);





#pragma warning(pop)



 errno_t __cdecl _ltoa_s(
                                 long _Value,
                                 char* _Buffer,
                                 size_t _BufferCount,
                                 int _Radix
    );
# 664 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdlib.h" 3
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_ltoa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) char* __cdecl _ltoa(long _Value, char *_Buffer, int _Radix);
# 673 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdlib.h" 3
         errno_t __cdecl _ultoa_s(
                                 unsigned long _Value,
                                 char* _Buffer,
                                 size_t _BufferCount,
                                 int _Radix
    );








#pragma warning(push)
#pragma warning(disable: 28726)
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_ultoa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) char* __cdecl _ultoa(unsigned long _Value, char *_Buffer, int _Radix);





#pragma warning(pop)



 errno_t __cdecl _i64toa_s(
                                 __int64 _Value,
                                 char* _Buffer,
                                 size_t _BufferCount,
                                 int _Radix
    );


__declspec(deprecated("This function or variable may be unsafe. Consider using " "_i64toa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
         char* __cdecl _i64toa(
                           __int64 _Value,
                           char* _Buffer,
                           int _Radix
    );



         errno_t __cdecl _ui64toa_s(
                                 unsigned __int64 _Value,
                                 char* _Buffer,
                                 size_t _BufferCount,
                                 int _Radix
    );

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_ui64toa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
         char* __cdecl _ui64toa(
                           unsigned __int64 _Value,
                           char* _Buffer,
                           int _Radix
    );
# 744 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdlib.h" 3
         errno_t __cdecl _ecvt_s(
                                 char* _Buffer,
          size_t _BufferCount,
          double _Value,
          int _DigitCount,
          int* _PtDec,
          int* _PtSign
    );
# 762 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdlib.h" 3
               __declspec(deprecated("This function or variable may be unsafe. Consider using " "_ecvt_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
         char* __cdecl _ecvt(
          double _Value,
          int _DigitCount,
          int* _PtDec,
          int* _PtSign
    );



         errno_t __cdecl _fcvt_s(
                                 char* _Buffer,
                                 size_t _BufferCount,
                                 double _Value,
                                 int _FractionalDigitCount,
                                 int* _PtDec,
                                 int* _PtSign
    );
# 792 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdlib.h" 3
               __declspec(deprecated("This function or variable may be unsafe. Consider using " "_fcvt_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
         char* __cdecl _fcvt(
          double _Value,
          int _FractionalDigitCount,
          int* _PtDec,
          int* _PtSign
    );


         errno_t __cdecl _gcvt_s(
                                 char* _Buffer,
                                 size_t _BufferCount,
                                 double _Value,
                                 int _DigitCount
    );
# 816 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdlib.h" 3
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_gcvt_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
         char* __cdecl _gcvt(
                           double _Value,
                           int _DigitCount,
                           char* _Buffer
    );
# 846 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdlib.h" 3
             int __cdecl ___mb_cur_max_func(void);


             int __cdecl ___mb_cur_max_l_func(_locale_t _Locale);





         int __cdecl mblen(
                                                char const* _Ch,
                                                size_t _MaxCount
    );


         int __cdecl _mblen_l(
                                                char const* _Ch,
                                                size_t _MaxCount,
                                                _locale_t _Locale
    );



         size_t __cdecl _mbstrlen(
           char const* _String
    );



         size_t __cdecl _mbstrlen_l(
             char const* _String,
             _locale_t _Locale
    );



         size_t __cdecl _mbstrnlen(
           char const* _String,
           size_t _MaxCount
    );



         size_t __cdecl _mbstrnlen_l(
             char const* _String,
             size_t _MaxCount,
             _locale_t _Locale
    );


         int __cdecl mbtowc(
                                         wchar_t* _DstCh,
                                         char const* _SrcCh,
                                         size_t _SrcSizeInBytes
    );


         int __cdecl _mbtowc_l(
                                         wchar_t* _DstCh,
                                         char const* _SrcCh,
                                         size_t _SrcSizeInBytes,
                                         _locale_t _Locale
    );


         errno_t __cdecl mbstowcs_s(
                                                              size_t* _PtNumOfCharConverted,
                                                              wchar_t* _DstBuf,
                                                              size_t _SizeInWords,
                                                              char const* _SrcBuf,
                                                              size_t _MaxCount
    );
# 927 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdlib.h" 3
__declspec(deprecated("This function or variable may be unsafe. Consider using " "mbstowcs_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) size_t __cdecl mbstowcs( wchar_t *_Dest, char const* _Source, size_t _MaxCount);







         errno_t __cdecl _mbstowcs_s_l(
                                                              size_t* _PtNumOfCharConverted,
                                                              wchar_t* _DstBuf,
                                                              size_t _SizeInWords,
                                                              char const* _SrcBuf,
                                                              size_t _MaxCount,
                                                              _locale_t _Locale
    );
# 953 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdlib.h" 3
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_mbstowcs_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) size_t __cdecl _mbstowcs_l( wchar_t *_Dest, char const* _Source, size_t _MaxCount, _locale_t _Locale);
# 965 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdlib.h" 3
__declspec(deprecated("This function or variable may be unsafe. Consider using " "wctomb_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
         int __cdecl wctomb(
                                   char* _MbCh,
                                   wchar_t _WCh
    );

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wctomb_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
         int __cdecl _wctomb_l(
                             char* _MbCh,
                             wchar_t _WCh,
                             _locale_t _Locale
    );




             errno_t __cdecl wctomb_s(
                                                                 int* _SizeConverted,
                                                                 char* _MbCh,
                                                                 rsize_t _SizeInBytes,
                                                                 wchar_t _WCh
        );




         errno_t __cdecl _wctomb_s_l(
                                     int* _SizeConverted,
                                     char* _MbCh,
                                     size_t _SizeInBytes,
                                     wchar_t _WCh,
                                     _locale_t _Locale);


         errno_t __cdecl wcstombs_s(
                                                                       size_t* _PtNumOfCharConverted,
                                                                       char* _Dst,
                                                                       size_t _DstSizeInBytes,
                                                                       wchar_t const* _Src,
                                                                       size_t _MaxCountInBytes
    );
# 1015 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdlib.h" 3
__declspec(deprecated("This function or variable may be unsafe. Consider using " "wcstombs_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) size_t __cdecl wcstombs( char *_Dest, wchar_t const* _Source, size_t _MaxCount);







         errno_t __cdecl _wcstombs_s_l(
                                                                       size_t* _PtNumOfCharConverted,
                                                                       char* _Dst,
                                                                       size_t _DstSizeInBytes,
                                                                       wchar_t const* _Src,
                                                                       size_t _MaxCountInBytes,
                                                                       _locale_t _Locale
    );
# 1041 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdlib.h" 3
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcstombs_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) size_t __cdecl _wcstombs_l( char *_Dest, wchar_t const* _Source, size_t _MaxCount, _locale_t _Locale);
# 1071 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdlib.h" 3
         __declspec(allocator) char* __cdecl _fullpath(
                                     char* _Buffer,
                                     char const* _Path,
                                     size_t _BufferCount
    );




         errno_t __cdecl _makepath_s(
                                 char* _Buffer,
                                 size_t _BufferCount,
                                 char const* _Drive,
                                 char const* _Dir,
                                 char const* _Filename,
                                 char const* _Ext
    );
# 1098 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdlib.h" 3
#pragma warning(push)
#pragma warning(disable: 28719)
#pragma warning(disable: 28726)
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_makepath_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) void __cdecl _makepath( char *_Buffer, char const* _Drive, char const* _Dir, char const* _Filename, char const* _Ext);







#pragma warning(pop)

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_splitpath_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
         void __cdecl _splitpath(
                             char const* _FullPath,
                             char* _Drive,
                             char* _Dir,
                             char* _Filename,
                             char* _Ext
    );


         errno_t __cdecl _splitpath_s(
                                       char const* _FullPath,
                                       char* _Drive,
                                       size_t _DriveCount,
                                       char* _Dir,
                                       size_t _DirCount,
                                       char* _Filename,
                                       size_t _FilenameCount,
                                       char* _Ext,
                                       size_t _ExtCount
    );







         errno_t __cdecl getenv_s(
                                     size_t* _RequiredCount,
                                     char* _Buffer,
                                     rsize_t _BufferCount,
                                     char const* _VarName
    );






         int* __cdecl __p___argc (void);
         char*** __cdecl __p___argv (void);
         wchar_t*** __cdecl __p___wargv(void);
# 1165 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdlib.h" 3
         char*** __cdecl __p__environ (void);
         wchar_t*** __cdecl __p__wenviron(void);
# 1190 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdlib.h" 3
                   __declspec(deprecated("This function or variable may be unsafe. Consider using " "_dupenv_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
             char* __cdecl getenv(
               char const* _VarName
        );
# 1208 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdlib.h" 3
             errno_t __cdecl _dupenv_s(
                                                                                    char** _Buffer,
                                                                                    size_t* _BufferCount,
                                                                                    char const* _VarName
        );





             int __cdecl system(
                   char const* _Command
        );



#pragma warning(push)
#pragma warning(disable: 6540)


 int __cdecl _putenv(
               char const* _EnvString
        );


             errno_t __cdecl _putenv_s(
               char const* _Name,
               char const* _Value
        );

#pragma warning(pop)

 errno_t __cdecl _searchenv_s(
                                     char const* _Filename,
                                     char const* _VarName,
                                     char* _Buffer,
                                     size_t _BufferCount
        );
# 1254 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdlib.h" 3
    __declspec(deprecated("This function or variable may be unsafe. Consider using " "_searchenv_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) void __cdecl _searchenv(char const* _Filename, char const* _VarName, char *_Buffer);







    __declspec(deprecated("This function or variable has been superceded by newer library " "or operating system functionality. Consider using " "SetErrorMode" " " "instead. See online help for details."))
             void __cdecl _seterrormode(
             int _Mode
        );

    __declspec(deprecated("This function or variable has been superceded by newer library " "or operating system functionality. Consider using " "Beep" " " "instead. See online help for details."))
             void __cdecl _beep(
             unsigned _Frequency,
             unsigned _Duration
        );

    __declspec(deprecated("This function or variable has been superceded by newer library " "or operating system functionality. Consider using " "Sleep" " " "instead. See online help for details."))
             void __cdecl _sleep(
             unsigned long _Duration
        );
# 1296 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdlib.h" 3
#pragma warning(push)
#pragma warning(disable: 4141)

 __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_ecvt" ". See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_ecvt_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
             char* __cdecl ecvt(
              double _Value,
              int _DigitCount,
              int* _PtDec,
              int* _PtSign
        );

                   __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_fcvt" ". See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_fcvt_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
             char* __cdecl fcvt(
              double _Value,
              int _FractionalDigitCount,
              int* _PtDec,
              int* _PtSign
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_gcvt" ". See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_fcvt_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
             char* __cdecl gcvt(
                               double _Value,
                               int _DigitCount,
                               char* _DstBuf
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_itoa" ". See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_itoa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
             char* __cdecl itoa(
                               int _Value,
                               char* _Buffer,
                               int _Radix
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_ltoa" ". See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_ltoa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
             char* __cdecl ltoa(
                               long _Value,
                               char* _Buffer,
                               int _Radix
        );


    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_swab" ". See online help for details."))
             void __cdecl swab(
                                        char* _Buf1,
                                        char* _Buf2,
                                        int _SizeInBytes
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_ultoa" ". See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_ultoa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
             char* __cdecl ultoa(
                               unsigned long _Value,
                               char* _Buffer,
                               int _Radix
        );



                   __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_putenv" ". See online help for details."))
             int __cdecl putenv(
               char const* _EnvString
        );

#pragma warning(pop)

 _onexit_t __cdecl onexit( _onexit_t _Func);





#pragma pack(pop)
# 3 "main.c" 2
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\time.h" 1 3
# 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\time.h" 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wtime.h" 1 3
# 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wtime.h" 3
#pragma pack(push, 8)








struct tm
{
    int tm_sec;
    int tm_min;
    int tm_hour;
    int tm_mday;
    int tm_mon;
    int tm_year;
    int tm_wday;
    int tm_yday;
    int tm_isdst;
};







               __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wasctime_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))


         wchar_t* __cdecl _wasctime(
         struct tm const* _Tm
    );



         errno_t __cdecl _wasctime_s(
                                                          wchar_t* _Buffer,
                                                          size_t _SizeInWords,
                                                          struct tm const* _Tm
    );
# 65 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wtime.h" 3
         size_t __cdecl wcsftime(
                                  wchar_t* _Buffer,
                                  size_t _SizeInWords,
                                  wchar_t const* _Format,
                                  struct tm const* _Tm
    );



         size_t __cdecl _wcsftime_l(
                                  wchar_t* _Buffer,
                                  size_t _SizeInWords,
                                  wchar_t const* _Format,
                                  struct tm const* _Tm,
                                  _locale_t _Locale
    );


               __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wctime32_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
         wchar_t* __cdecl _wctime32(
         __time32_t const* _Time
    );


         errno_t __cdecl _wctime32_s(
                                                          wchar_t* _Buffer,
                                                          size_t _SizeInWords,
                                                          __time32_t const* _Time
    );
# 103 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wtime.h" 3
               __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wctime64_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
         wchar_t* __cdecl _wctime64(
         __time64_t const* _Time
    );


         errno_t __cdecl _wctime64_s(
                                                          wchar_t* _Buffer,
                                                          size_t _SizeInWords,
                                                          __time64_t const* _Time);
# 121 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wtime.h" 3
         errno_t __cdecl _wstrdate_s(
                                                                                   wchar_t* _Buffer,
                                                                                   size_t _SizeInWords
    );






__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wstrdate_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) wchar_t* __cdecl _wstrdate( wchar_t *_Buffer);





         errno_t __cdecl _wstrtime_s(
                                                                                   wchar_t* _Buffer,
                                                                                   size_t _SizeInWords
    );






__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wstrtime_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) wchar_t* __cdecl _wstrtime( wchar_t *_Buffer);
# 160 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wtime.h" 3
#pragma warning(push)
#pragma warning(disable: 4996)
# 185 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wtime.h" 3
 static __inline wchar_t * __cdecl _wctime(
                 time_t const* const _Time)
        {
            return _wctime64(_Time);
        }


        static __inline errno_t __cdecl _wctime_s(
                                                                wchar_t* const _Buffer,
                                                                size_t const _SizeInWords,
                                                                time_t const* const _Time
            )
        {
            return _wctime64_s(_Buffer, _SizeInWords, _Time);
        }



#pragma warning(pop)




#pragma pack(pop)
# 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\time.h" 2 3

#pragma pack(push, 8)








typedef long clock_t;

struct _timespec32
{
    __time32_t tv_sec;
    long tv_nsec;
};

struct _timespec64
{
    __time64_t tv_sec;
    long tv_nsec;
};


    struct timespec
    {
        time_t tv_sec;
        long tv_nsec;
    };
# 61 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\time.h" 3
               __declspec(deprecated("This function or variable may be unsafe. Consider using " "_get_daylight" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
         int* __cdecl __daylight(void);




               __declspec(deprecated("This function or variable may be unsafe. Consider using " "_get_dstbias" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
         long* __cdecl __dstbias(void);




               __declspec(deprecated("This function or variable may be unsafe. Consider using " "_get_timezone" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
         long* __cdecl __timezone(void);




                             __declspec(deprecated("This function or variable may be unsafe. Consider using " "_get_tzname" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
         char** __cdecl __tzname(void);




         errno_t __cdecl _get_daylight(
          int* _Daylight
    );


         errno_t __cdecl _get_dstbias(
          long* _DaylightSavingsBias
    );


         errno_t __cdecl _get_timezone(
          long* _TimeZone
    );


         errno_t __cdecl _get_tzname(
                                 size_t* _ReturnValue,
                                 char* _Buffer,
                                 size_t _SizeInBytes,
                                 int _Index
    );
# 116 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\time.h" 3
               __declspec(deprecated("This function or variable may be unsafe. Consider using " "asctime_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
         char* __cdecl asctime(
         struct tm const* _Tm
    );




             errno_t __cdecl asctime_s(
                                                            char* _Buffer,
                                                            size_t _SizeInBytes,
                                                            struct tm const* _Tm
        );
# 138 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\time.h" 3
         clock_t __cdecl clock(void);



               __declspec(deprecated("This function or variable may be unsafe. Consider using " "_ctime32_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
         char* __cdecl _ctime32(
         __time32_t const* _Time
    );


         errno_t __cdecl _ctime32_s(
                                                        char* _Buffer,
                                                        size_t _SizeInBytes,
                                                        __time32_t const* _Time
    );
# 162 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\time.h" 3
               __declspec(deprecated("This function or variable may be unsafe. Consider using " "_ctime64_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
         char* __cdecl _ctime64(
         __time64_t const* _Time
    );


         errno_t __cdecl _ctime64_s(
                                                          char* _Buffer,
                                                          size_t _SizeInBytes,
                                                          __time64_t const* _Time
    );
# 181 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\time.h" 3
         double __cdecl _difftime32(
         __time32_t _Time1,
         __time32_t _Time2
    );


         double __cdecl _difftime64(
         __time64_t _Time1,
         __time64_t _Time2
    );


               __declspec(deprecated("This function or variable may be unsafe. Consider using " "_gmtime32_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
         struct tm* __cdecl _gmtime32(
         __time32_t const* _Time
    );


         errno_t __cdecl _gmtime32_s(
          struct tm* _Tm,
          __time32_t const* _Time
    );


               __declspec(deprecated("This function or variable may be unsafe. Consider using " "_gmtime64_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
         struct tm* __cdecl _gmtime64(
         __time64_t const* _Time
    );


         errno_t __cdecl _gmtime64_s(
          struct tm* _Tm,
          __time64_t const* _Time
    );


               __declspec(deprecated("This function or variable may be unsafe. Consider using " "_localtime32_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
         struct tm* __cdecl _localtime32(
         __time32_t const* _Time
    );


         errno_t __cdecl _localtime32_s(
          struct tm* _Tm,
          __time32_t const* _Time
    );


               __declspec(deprecated("This function or variable may be unsafe. Consider using " "_localtime64_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
         struct tm* __cdecl _localtime64(
         __time64_t const* _Time
    );


         errno_t __cdecl _localtime64_s(
          struct tm* _Tm,
          __time64_t const* _Time
    );


         __time32_t __cdecl _mkgmtime32(
            struct tm* _Tm
    );


         __time64_t __cdecl _mkgmtime64(
            struct tm* _Tm
    );


         __time32_t __cdecl _mktime32(
            struct tm* _Tm
    );


         __time64_t __cdecl _mktime64(
            struct tm* _Tm
    );



         size_t __cdecl strftime(
                                  char* _Buffer,
                                  size_t _SizeInBytes,
                                  char const* _Format,
                                  struct tm const* _Tm
    );



         size_t __cdecl _strftime_l(
                                  char* _Buffer,
                                  size_t _MaxSize,
                                  char const* _Format,
                                  struct tm const* _Tm,
                                  _locale_t _Locale
    );


         errno_t __cdecl _strdate_s(
                                                                                 char* _Buffer,
                                                                                 size_t _SizeInBytes
    );






__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strdate_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) char* __cdecl _strdate( char *_Buffer);





         errno_t __cdecl _strtime_s(
                                                                                 char* _Buffer,
                                                                                 size_t _SizeInBytes
    );






__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strtime_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) char* __cdecl _strtime( char *_Buffer);




         __time32_t __cdecl _time32(
              __time32_t* _Time
    );

         __time64_t __cdecl _time64(
              __time64_t* _Time
    );



         int __cdecl _timespec32_get(
          struct _timespec32* _Ts,
          int _Base
    );



         int __cdecl _timespec64_get(
          struct _timespec64* _Ts,
          int _Base
    );
# 342 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\time.h" 3
             void __cdecl _tzset(void);


    __declspec(deprecated("This function or variable has been superceded by newer library " "or operating system functionality. Consider using " "GetLocalTime" " " "instead. See online help for details."))
             unsigned __cdecl _getsystime(
              struct tm* _Tm
        );

    __declspec(deprecated("This function or variable has been superceded by newer library " "or operating system functionality. Consider using " "SetLocalTime" " " "instead. See online help for details."))
             unsigned __cdecl _setsystime(
             struct tm* _Tm,
             unsigned _Milliseconds
        );
# 475 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\time.h" 3
                       __declspec(deprecated("This function or variable may be unsafe. Consider using " "ctime_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
        static __inline char* __cdecl ctime(
                 time_t const* const _Time
            )
        {
#pragma warning(push)
#pragma warning(disable: 4996)
 return _ctime64(_Time);
#pragma warning(pop)
 }


        static __inline double __cdecl difftime(
                 time_t const _Time1,
                 time_t const _Time2
            )
        {
            return _difftime64(_Time1, _Time2);
        }

                       __declspec(deprecated("This function or variable may be unsafe. Consider using " "gmtime_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
        static __inline struct tm* __cdecl gmtime(
                 time_t const* const _Time)
        {
#pragma warning(push)
#pragma warning(disable: 4996)
 return _gmtime64(_Time);
#pragma warning(pop)
 }

        __declspec(deprecated("This function or variable may be unsafe. Consider using " "localtime_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
        static __inline struct tm* __cdecl localtime(
                 time_t const* const _Time
            )
        {
#pragma warning(push)
#pragma warning(disable: 4996)
 return _localtime64(_Time);
#pragma warning(pop)
 }


        static __inline time_t __cdecl _mkgmtime(
                    struct tm* const _Tm
            )
        {
            return _mkgmtime64(_Tm);
        }


        static __inline time_t __cdecl mktime(
                    struct tm* const _Tm
            )
        {
            return _mktime64(_Tm);
        }

        static __inline time_t __cdecl time(
                      time_t* const _Time
            )
        {
            return _time64(_Time);
        }


        static __inline int __cdecl timespec_get(
                  struct timespec* const _Ts,
                  int const _Base
            )
        {
            return _timespec64_get((struct _timespec64*)_Ts, _Base);
        }



            static __inline errno_t __cdecl ctime_s(
                                                                    char* const _Buffer,
                                                                    size_t const _SizeInBytes,
                                                                    time_t const* const _Time
                )
            {
                return _ctime64_s(_Buffer, _SizeInBytes, _Time);
            }


            static __inline errno_t __cdecl gmtime_s(
                      struct tm* const _Tm,
                      time_t const* const _Time
                )
            {
                return _gmtime64_s(_Tm, _Time);
            }


            static __inline errno_t __cdecl localtime_s(
                      struct tm* const _Tm,
                      time_t const* const _Time
                )
            {
                return _localtime64_s(_Tm, _Time);
            }
# 594 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\time.h" 3
        __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_tzset" ". See online help for details.")) void __cdecl tzset(void);






#pragma pack(pop)
# 4 "main.c" 2
# 1 "D:\\LLVM\\lib\\clang\\9.0.0\\include\\stdint.h" 1 3
# 52 "D:\\LLVM\\lib\\clang\\9.0.0\\include\\stdint.h" 3
# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.25.28610\\include\\stdint.h" 1 3
# 15 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.25.28610\\include\\stdint.h" 3
#pragma warning(push)
#pragma warning(disable: 4514 4820)

typedef signed char int8_t;
typedef short int16_t;
typedef int int32_t;
typedef long long int64_t;
typedef unsigned char uint8_t;
typedef unsigned short uint16_t;
typedef unsigned int uint32_t;
typedef unsigned long long uint64_t;

typedef signed char int_least8_t;
typedef short int_least16_t;
typedef int int_least32_t;
typedef long long int_least64_t;
typedef unsigned char uint_least8_t;
typedef unsigned short uint_least16_t;
typedef unsigned int uint_least32_t;
typedef unsigned long long uint_least64_t;

typedef signed char int_fast8_t;
typedef int int_fast16_t;
typedef int int_fast32_t;
typedef long long int_fast64_t;
typedef unsigned char uint_fast8_t;
typedef unsigned int uint_fast16_t;
typedef unsigned int uint_fast32_t;
typedef unsigned long long uint_fast64_t;

typedef long long intmax_t;
typedef unsigned long long uintmax_t;
# 131 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.25.28610\\include\\stdint.h" 3
#pragma warning(pop)
# 53 "D:\\LLVM\\lib\\clang\\9.0.0\\include\\stdint.h" 2 3
# 5 "main.c" 2
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\string.h" 1 3
# 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\string.h" 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_memory.h" 1 3
# 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_memory.h" 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_memcpy_s.h" 1 3
# 11 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_memcpy_s.h" 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\errno.h" 1 3
# 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\errno.h" 3
#pragma pack(push, 8)




 int* __cdecl _errno(void);


             errno_t __cdecl _set_errno( int _Value);
             errno_t __cdecl _get_errno( int* _Value);

             unsigned long* __cdecl __doserrno(void);


             errno_t __cdecl _set_doserrno( unsigned long _Value);
             errno_t __cdecl _get_doserrno( unsigned long * _Value);
# 130 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\errno.h" 3
#pragma pack(pop)
# 12 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_memcpy_s.h" 2 3
# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.25.28610\\include\\vcruntime_string.h" 1 3
# 12 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.25.28610\\include\\vcruntime_string.h" 3
#pragma warning(push)
#pragma warning(disable: 4514 4820)



#pragma pack(push, 8)




 void * __cdecl memchr(
                                    void const* _Buf,
                                    int _Val,
                                    size_t _MaxCount
    );


int __cdecl memcmp(
                            void const* _Buf1,
                            void const* _Buf2,
                            size_t _Size
    );
# 43 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.25.28610\\include\\vcruntime_string.h" 3
void* __cdecl memcpy(
                                  void* _Dst,
                                  void const* _Src,
                                  size_t _Size
    );


         void* __cdecl memmove(
                                      void* _Dst,
                                      void const* _Src,
                                      size_t _Size
    );
# 63 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.25.28610\\include\\vcruntime_string.h" 3
void* __cdecl memset(
                                  void* _Dst,
                                  int _Val,
                                  size_t _Size
    );


         char * __cdecl strchr(
           char const* _Str,
           int _Val
    );


         char * __cdecl strrchr(
           char const* _Str,
           int _Ch
    );


         char * __cdecl strstr(
           char const* _Str,
           char const* _SubStr
    );



         wchar_t * __cdecl wcschr(
           wchar_t const* _Str,
           wchar_t _Ch
    );


         wchar_t * __cdecl wcsrchr(
           wchar_t const* _Str,
           wchar_t _Ch
    );



         wchar_t * __cdecl wcsstr(
           wchar_t const* _Str,
           wchar_t const* _SubStr
    );



#pragma pack(pop)



#pragma warning(pop)
# 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_memcpy_s.h" 2 3

#pragma pack(push, 8)
# 35 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_memcpy_s.h" 3
 static __inline errno_t __cdecl memcpy_s(
                                                                 void* const _Destination,
                                                                 rsize_t const _DestinationSize,
                                                                 void const* const _Source,
                                                                 rsize_t const _SourceSize
        )
    {
        if (_SourceSize == 0)
        {
            return 0;
        }

        { int _Expr_val=!!(_Destination != ((void*)0)); if (!(_Expr_val)) { (*_errno()) = 22; _invalid_parameter_noinfo(); return 22; } };
        if (_Source == ((void*)0) || _DestinationSize < _SourceSize)
        {
            memset(_Destination, 0, _DestinationSize);

            { int _Expr_val=!!(_Source != ((void*)0)); if (!(_Expr_val)) { (*_errno()) = 22; _invalid_parameter_noinfo(); return 22; } };
            { int _Expr_val=!!(_DestinationSize >= _SourceSize); if (!(_Expr_val)) { (*_errno()) = 34; _invalid_parameter_noinfo(); return 34; } };


            return 22;
        }
#pragma warning(suppress: 4996)
 memcpy(_Destination, _Source, _SourceSize);
        return 0;
    }


    static __inline errno_t __cdecl memmove_s(
                                                                 void* const _Destination,
                                                                 rsize_t const _DestinationSize,
                                                                 void const* const _Source,
                                                                 rsize_t const _SourceSize
        )
    {
        if (_SourceSize == 0)
        {
            return 0;
        }

        { int _Expr_val=!!(_Destination != ((void*)0)); if (!(_Expr_val)) { (*_errno()) = 22; _invalid_parameter_noinfo(); return 22; } };
        { int _Expr_val=!!(_Source != ((void*)0)); if (!(_Expr_val)) { (*_errno()) = 22; _invalid_parameter_noinfo(); return 22; } };
        { int _Expr_val=!!(_DestinationSize >= _SourceSize); if (!(_Expr_val)) { (*_errno()) = 34; _invalid_parameter_noinfo(); return 34; } };

#pragma warning(suppress: 4996)
 memmove(_Destination, _Source, _SourceSize);
        return 0;
    }





#pragma pack(pop)
# 15 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_memory.h" 2 3




#pragma pack(push, 8)




 int __cdecl _memicmp(
                                void const* _Buf1,
                                void const* _Buf2,
                                size_t _Size
    );


         int __cdecl _memicmp_l(
                                void const* _Buf1,
                                void const* _Buf2,
                                size_t _Size,
                                _locale_t _Locale
    );
# 78 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_memory.h" 3
    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_memccpy" ". See online help for details."))
             void* __cdecl memccpy(
                                      void* _Dst,
                                      void const* _Src,
                                      int _Val,
                                      size_t _Size
        );

                   __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_memicmp" ". See online help for details."))
             int __cdecl memicmp(
                                    void const* _Buf1,
                                    void const* _Buf2,
                                    size_t _Size
        );
# 114 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_memory.h" 3
#pragma pack(pop)
# 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\string.h" 2 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstring.h" 1 3
# 16 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstring.h" 3
#pragma pack(push, 8)
# 28 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstring.h" 3
 errno_t __cdecl wcscat_s(
                                        wchar_t* _Destination,
             rsize_t _SizeInWords,
               wchar_t const* _Source
        );


             errno_t __cdecl wcscpy_s(
                                     wchar_t* _Destination,
             rsize_t _SizeInWords,
               wchar_t const* _Source
        );


             errno_t __cdecl wcsncat_s(
                                        wchar_t* _Destination,
                                        rsize_t _SizeInWords,
                                        wchar_t const* _Source,
                                        rsize_t _MaxCount
        );


             errno_t __cdecl wcsncpy_s(
                                     wchar_t* _Destination,
                                     rsize_t _SizeInWords,
                                     wchar_t const* _Source,
                                     rsize_t _MaxCount
        );


             wchar_t* __cdecl wcstok_s(
                                      wchar_t* _String,
                                      wchar_t const* _Delimiter,
                                      wchar_t** _Context
        );
# 79 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstring.h" 3
         __declspec(allocator) wchar_t* __cdecl _wcsdup(
           wchar_t const* _String
    );
# 97 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstring.h" 3
#pragma warning(push)
#pragma warning(disable: 28719)
#pragma warning(disable: 28726)
 __declspec(deprecated("This function or variable may be unsafe. Consider using " "wcscat_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) wchar_t* __cdecl wcscat( wchar_t *_Destination, wchar_t const* _Source);




#pragma warning(pop)



 int __cdecl wcscmp(
           wchar_t const* _String1,
           wchar_t const* _String2
    );







#pragma warning(push)
#pragma warning(disable: 28719)
#pragma warning(disable: 28726)
__declspec(deprecated("This function or variable may be unsafe. Consider using " "wcscpy_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) wchar_t* __cdecl wcscpy( wchar_t *_Destination, wchar_t const* _Source);




#pragma warning(pop)


 size_t __cdecl wcscspn(
           wchar_t const* _String,
           wchar_t const* _Control
    );


         size_t __cdecl wcslen(
           wchar_t const* _String
    );
# 150 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstring.h" 3
         size_t __cdecl wcsnlen(
                               wchar_t const* _Source,
                               size_t _MaxCount
    );
# 166 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstring.h" 3
    static __inline size_t __cdecl wcsnlen_s(
                                   wchar_t const* _Source,
                                   size_t _MaxCount
        )
    {
        return (_Source == 0) ? 0 : wcsnlen(_Source, _MaxCount);
    }
# 183 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstring.h" 3
__declspec(deprecated("This function or variable may be unsafe. Consider using " "wcsncat_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) wchar_t* __cdecl wcsncat( wchar_t *_Destination, wchar_t const* _Source, size_t _Count);
# 192 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstring.h" 3
         int __cdecl wcsncmp(
                               wchar_t const* _String1,
                               wchar_t const* _String2,
                               size_t _MaxCount
    );
# 205 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstring.h" 3
__declspec(deprecated("This function or variable may be unsafe. Consider using " "wcsncpy_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) wchar_t* __cdecl wcsncpy( wchar_t *_Destination, wchar_t const* _Source, size_t _Count);
# 214 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstring.h" 3
         wchar_t * __cdecl wcspbrk(
           wchar_t const* _String,
           wchar_t const* _Control
    );


         size_t __cdecl wcsspn(
           wchar_t const* _String,
           wchar_t const* _Control
    );

               __declspec(deprecated("This function or variable may be unsafe. Consider using " "wcstok_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
         wchar_t* __cdecl wcstok(
                                      wchar_t* _String,
                                      wchar_t const* _Delimiter,
                                      wchar_t** _Context
    );
# 243 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstring.h" 3
#pragma warning(push)
#pragma warning(disable: 4141 4996)
#pragma warning(disable: 28719 28726 28727)
 __declspec(deprecated("This function or variable may be unsafe. Consider using " "wcstok_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    static __inline wchar_t* __cdecl _wcstok(
                      wchar_t* const _String,
                      wchar_t const* const _Delimiter
        )
    {
        return wcstok(_String, _Delimiter, 0);
    }
# 270 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstring.h" 3
#pragma warning(pop)






 __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcserror_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
         wchar_t* __cdecl _wcserror(
         int _ErrorNumber
    );


         errno_t __cdecl _wcserror_s(
                                     wchar_t* _Buffer,
                                     size_t _SizeInWords,
                                     int _ErrorNumber
    );
# 297 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstring.h" 3
               __declspec(deprecated("This function or variable may be unsafe. Consider using " "__wcserror_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
         wchar_t* __cdecl __wcserror(
               wchar_t const* _String
    );

                                errno_t __cdecl __wcserror_s(
                                     wchar_t* _Buffer,
                                     size_t _SizeInWords,
                                     wchar_t const* _ErrorMessage
    );







                        int __cdecl _wcsicmp(
           wchar_t const* _String1,
           wchar_t const* _String2
    );

                        int __cdecl _wcsicmp_l(
             wchar_t const* _String1,
             wchar_t const* _String2,
             _locale_t _Locale
    );

                        int __cdecl _wcsnicmp(
                               wchar_t const* _String1,
                               wchar_t const* _String2,
                               size_t _MaxCount
    );

                        int __cdecl _wcsnicmp_l(
                               wchar_t const* _String1,
                               wchar_t const* _String2,
                               size_t _MaxCount,
                               _locale_t _Locale
    );

                            errno_t __cdecl _wcsnset_s(
                                    wchar_t* _Destination,
                                    size_t _SizeInWords,
                                    wchar_t _Value,
                                    size_t _MaxCount
    );
# 352 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstring.h" 3
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcsnset_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) wchar_t* __cdecl _wcsnset( wchar_t *_String, wchar_t _Value, size_t _MaxCount);







         wchar_t* __cdecl _wcsrev(
              wchar_t* _String
    );

                            errno_t __cdecl _wcsset_s(
                                    wchar_t* _Destination,
                                    size_t _SizeInWords,
                                    wchar_t _Value
    );







__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcsset_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) wchar_t* __cdecl _wcsset( wchar_t *_String, wchar_t _Value);






                            errno_t __cdecl _wcslwr_s(
                                    wchar_t* _String,
                                    size_t _SizeInWords
    );






__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcslwr_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) wchar_t* __cdecl _wcslwr( wchar_t *_String);





         errno_t __cdecl _wcslwr_s_l(
                                    wchar_t* _String,
                                    size_t _SizeInWords,
                                    _locale_t _Locale
    );







__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcslwr_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) wchar_t* __cdecl _wcslwr_l( wchar_t *_String, _locale_t _Locale);







         errno_t __cdecl _wcsupr_s(
                             wchar_t* _String,
                             size_t _Size
    );






__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcsupr_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) wchar_t* __cdecl _wcsupr( wchar_t *_String);





         errno_t __cdecl _wcsupr_s_l(
                             wchar_t* _String,
                             size_t _Size,
                             _locale_t _Locale
    );







__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcsupr_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) wchar_t* __cdecl _wcsupr_l( wchar_t *_String, _locale_t _Locale);
# 456 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstring.h" 3
         size_t __cdecl wcsxfrm(
                                              wchar_t* _Destination,
                                              wchar_t const* _Source,
                                              size_t _MaxCount
    );



         size_t __cdecl _wcsxfrm_l(
                                              wchar_t* _Destination,
                                              wchar_t const* _Source,
                                              size_t _MaxCount,
                                              _locale_t _Locale
    );


         int __cdecl wcscoll(
           wchar_t const* _String1,
           wchar_t const* _String2
    );


         int __cdecl _wcscoll_l(
             wchar_t const* _String1,
             wchar_t const* _String2,
             _locale_t _Locale
    );


         int __cdecl _wcsicoll(
           wchar_t const* _String1,
           wchar_t const* _String2
    );


         int __cdecl _wcsicoll_l(
             wchar_t const* _String1,
             wchar_t const* _String2,
             _locale_t _Locale
    );


         int __cdecl _wcsncoll(
                               wchar_t const* _String1,
                               wchar_t const* _String2,
                               size_t _MaxCount
    );


         int __cdecl _wcsncoll_l(
                               wchar_t const* _String1,
                               wchar_t const* _String2,
                               size_t _MaxCount,
                               _locale_t _Locale
    );


         int __cdecl _wcsnicoll(
                               wchar_t const* _String1,
                               wchar_t const* _String2,
                               size_t _MaxCount
    );


         int __cdecl _wcsnicoll_l(
                               wchar_t const* _String1,
                               wchar_t const* _String2,
                               size_t _MaxCount,
                               _locale_t _Locale
    );
# 579 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstring.h" 3
                   __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_wcsdup" ". See online help for details."))
             wchar_t* __cdecl wcsdup(
               wchar_t const* _String
        );
# 591 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstring.h" 3
                   __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_wcsicmp" ". See online help for details."))
             int __cdecl wcsicmp(
               wchar_t const* _String1,
               wchar_t const* _String2
        );

                   __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_wcsnicmp" ". See online help for details."))
             int __cdecl wcsnicmp(
                                   wchar_t const* _String1,
                                   wchar_t const* _String2,
                                   size_t _MaxCount
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_wcsnset" ". See online help for details."))

             wchar_t* __cdecl wcsnset(
                                     wchar_t* _String,
                                     wchar_t _Value,
                                     size_t _MaxCount
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_wcsrev" ". See online help for details."))

             wchar_t* __cdecl wcsrev(
                  wchar_t* _String
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_wcsset" ". See online help for details."))

             wchar_t* __cdecl wcsset(
                  wchar_t* _String,
                  wchar_t _Value
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_wcslwr" ". See online help for details."))

             wchar_t* __cdecl wcslwr(
                  wchar_t* _String
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_wcsupr" ". See online help for details."))

             wchar_t* __cdecl wcsupr(
                  wchar_t* _String
        );

                   __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_wcsicoll" ". See online help for details."))
             int __cdecl wcsicoll(
               wchar_t const* _String1,
               wchar_t const* _String2
        );





#pragma pack(pop)
# 15 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\string.h" 2 3




#pragma pack(push, 8)








 errno_t __cdecl strcpy_s(
                                     char* _Destination,
                                     rsize_t _SizeInBytes,
                                     char const* _Source
        );


             errno_t __cdecl strcat_s(
                                        char* _Destination,
                                        rsize_t _SizeInBytes,
                                        char const* _Source
        );


             errno_t __cdecl strerror_s(
                                     char* _Buffer,
                                     size_t _SizeInBytes,
                                     int _ErrorNumber);


             errno_t __cdecl strncat_s(
                                        char* _Destination,
                                        rsize_t _SizeInBytes,
                                        char const* _Source,
                                        rsize_t _MaxCount
        );


             errno_t __cdecl strncpy_s(
                                     char* _Destination,
                                     rsize_t _SizeInBytes,
                                     char const* _Source,
                                     rsize_t _MaxCount
        );


             char* __cdecl strtok_s(
                                      char* _String,
                                      char const* _Delimiter,
                                      char** _Context
        );



         void* __cdecl _memccpy(
                                      void* _Dst,
                                      void const* _Src,
                                      int _Val,
                                      size_t _MaxCount
    );
# 87 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\string.h" 3
#pragma warning(push)
#pragma warning(disable: 28719)
#pragma warning(disable: 28726)
 __declspec(deprecated("This function or variable may be unsafe. Consider using " "strcat_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) char* __cdecl strcat( char *_Destination, char const* _Source);




#pragma warning(pop)




int __cdecl strcmp(
           char const* _Str1,
           char const* _Str2
    );


         int __cdecl _strcmpi(
           char const* _String1,
           char const* _String2
    );


         int __cdecl strcoll(
           char const* _String1,
           char const* _String2
    );


         int __cdecl _strcoll_l(
             char const* _String1,
             char const* _String2,
             _locale_t _Locale
    );







#pragma warning(push)
#pragma warning(disable: 28719)
#pragma warning(disable: 28726)
__declspec(deprecated("This function or variable may be unsafe. Consider using " "strcpy_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) char* __cdecl strcpy( char *_Destination, char const* _Source);




#pragma warning(pop)


 size_t __cdecl strcspn(
           char const* _Str,
           char const* _Control
    );







         __declspec(allocator) char* __cdecl _strdup(
               char const* _Source
    );







               __declspec(deprecated("This function or variable may be unsafe. Consider using " "_strerror_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
         char* __cdecl _strerror(
               char const* _ErrorMessage
    );


         errno_t __cdecl _strerror_s(
                                 char* _Buffer,
                                 size_t _SizeInBytes,
                                 char const* _ErrorMessage
    );
# 181 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\string.h" 3
               __declspec(deprecated("This function or variable may be unsafe. Consider using " "strerror_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
         char* __cdecl strerror(
         int _ErrorMessage
    );
# 193 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\string.h" 3
         int __cdecl _stricmp(
           char const* _String1,
           char const* _String2
    );


         int __cdecl _stricoll(
           char const* _String1,
           char const* _String2
    );


         int __cdecl _stricoll_l(
             char const* _String1,
             char const* _String2,
             _locale_t _Locale
    );


         int __cdecl _stricmp_l(
             char const* _String1,
             char const* _String2,
             _locale_t _Locale
    );


size_t __cdecl strlen(
           char const* _Str
    );


         errno_t __cdecl _strlwr_s(
                             char* _String,
                             size_t _Size
    );






__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strlwr_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) char* __cdecl _strlwr( char *_String);





         errno_t __cdecl _strlwr_s_l(
                             char* _String,
                             size_t _Size,
                             _locale_t _Locale
    );







__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strlwr_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) char* __cdecl _strlwr_l( char *_String, _locale_t _Locale);
# 266 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\string.h" 3
__declspec(deprecated("This function or variable may be unsafe. Consider using " "strncat_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) char* __cdecl strncat( char *_Destination, char const* _Source, size_t _Count);
# 275 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\string.h" 3
         int __cdecl strncmp(
                               char const* _Str1,
                               char const* _Str2,
                               size_t _MaxCount
    );


         int __cdecl _strnicmp(
                               char const* _String1,
                               char const* _String2,
                               size_t _MaxCount
    );


         int __cdecl _strnicmp_l(
                               char const* _String1,
                               char const* _String2,
                               size_t _MaxCount,
                               _locale_t _Locale
    );


         int __cdecl _strnicoll(
                               char const* _String1,
                               char const* _String2,
                               size_t _MaxCount
    );


         int __cdecl _strnicoll_l(
                               char const* _String1,
                               char const* _String2,
                               size_t _MaxCount,
                               _locale_t _Locale
    );


         int __cdecl _strncoll(
                               char const* _String1,
                               char const* _String2,
                               size_t _MaxCount
    );


         int __cdecl _strncoll_l(
                               char const* _String1,
                               char const* _String2,
                               size_t _MaxCount,
                               _locale_t _Locale
    );

         size_t __cdecl __strncnt(
                            char const* _String,
                            size_t _Count
    );
# 338 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\string.h" 3
__declspec(deprecated("This function or variable may be unsafe. Consider using " "strncpy_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) char* __cdecl strncpy( char *_Destination, char const* _Source, size_t _Count);
# 355 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\string.h" 3
         size_t __cdecl strnlen(
                               char const* _String,
                               size_t _MaxCount
    );
# 371 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\string.h" 3
    static __inline size_t __cdecl strnlen_s(
                                   char const* _String,
                                   size_t _MaxCount
        )
    {
        return _String == 0 ? 0 : strnlen(_String, _MaxCount);
    }




         errno_t __cdecl _strnset_s(
                                    char* _String,
                                    size_t _SizeInBytes,
                                    int _Value,
                                    size_t _MaxCount
    );
# 396 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\string.h" 3
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strnset_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) char* __cdecl _strnset( char *_Destination, int _Value, size_t _Count);
# 405 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\string.h" 3
         char * __cdecl strpbrk(
           char const* _Str,
           char const* _Control
    );

         char* __cdecl _strrev(
              char* _Str
    );


         errno_t __cdecl _strset_s(
                                        char* _Destination,
                                        size_t _DestinationSize,
                                        int _Value
    );







__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strset_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) char* __cdecl _strset( char *_Destination, int _Value);






         size_t __cdecl strspn(
           char const* _Str,
           char const* _Control
    );

               __declspec(deprecated("This function or variable may be unsafe. Consider using " "strtok_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
         char* __cdecl strtok(
                  char* _String,
                  char const* _Delimiter
    );


         errno_t __cdecl _strupr_s(
                             char* _String,
                             size_t _Size
    );






__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strupr_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) char* __cdecl _strupr( char *_String);





         errno_t __cdecl _strupr_s_l(
                             char* _String,
                             size_t _Size,
                             _locale_t _Locale
    );







__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strupr_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) char* __cdecl _strupr_l( char *_String, _locale_t _Locale);
# 483 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\string.h" 3
         size_t __cdecl strxfrm(
                                              char* _Destination,
                                              char const* _Source,
                                              size_t _MaxCount
    );



         size_t __cdecl _strxfrm_l(
                                              char* _Destination,
                                              char const* _Source,
                                              size_t _MaxCount,
                                              _locale_t _Locale
    );
# 535 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\string.h" 3
                   __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_strdup" ". See online help for details."))
             char* __cdecl strdup(
                   char const* _String
        );



                   __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_strcmpi" ". See online help for details."))
             int __cdecl strcmpi(
               char const* _String1,
               char const* _String2
        );

                   __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_stricmp" ". See online help for details."))
             int __cdecl stricmp(
               char const* _String1,
               char const* _String2
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_strlwr" ". See online help for details."))
             char* __cdecl strlwr(
                  char* _String
        );

                   __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_strnicmp" ". See online help for details."))
             int __cdecl strnicmp(
                                   char const* _String1,
                                   char const* _String2,
                                   size_t _MaxCount
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_strnset" ". See online help for details."))
             char* __cdecl strnset(
                                     char* _String,
                                     int _Value,
                                     size_t _MaxCount
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_strrev" ". See online help for details."))
             char* __cdecl strrev(
                  char* _String
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_strset" ". See online help for details."))
    char* __cdecl strset(
                  char* _String,
                  int _Value);

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_strupr" ". See online help for details."))
             char* __cdecl strupr(
                  char* _String
        );





#pragma pack(pop)
# 6 "main.c" 2
# 1 "D:\\Libraries\\include\\SDL2\\SDL.h" 1
# 32 "D:\\Libraries\\include\\SDL2\\SDL.h"
# 1 "D:\\Libraries\\include\\SDL2/SDL_main.h" 1
# 25 "D:\\Libraries\\include\\SDL2/SDL_main.h"
# 1 "D:\\Libraries\\include\\SDL2/SDL_stdinc.h" 1
# 31 "D:\\Libraries\\include\\SDL2/SDL_stdinc.h"
# 1 "D:\\Libraries\\include\\SDL2/SDL_config.h" 1
# 26 "D:\\Libraries\\include\\SDL2/SDL_config.h"
# 1 "D:\\Libraries\\include\\SDL2/SDL_platform.h" 1
# 138 "D:\\Libraries\\include\\SDL2/SDL_platform.h"
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.18362.0\\shared\\winapifamily.h" 1 3
# 20 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.18362.0\\shared\\winapifamily.h" 3
#pragma warning(push)
#pragma warning(disable: 4001)





# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.18362.0\\shared\\winpackagefamily.h" 1 3
# 20 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.18362.0\\shared\\winpackagefamily.h" 3
#pragma warning(push)
#pragma warning(disable: 4001)
# 87 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.18362.0\\shared\\winpackagefamily.h" 3
#pragma warning(pop)
# 27 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.18362.0\\shared\\winapifamily.h" 2 3
# 248 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.18362.0\\shared\\winapifamily.h" 3
#pragma warning(pop)
# 139 "D:\\Libraries\\include\\SDL2/SDL_platform.h" 2
# 179 "D:\\Libraries\\include\\SDL2/SDL_platform.h"
# 1 "D:\\Libraries\\include\\SDL2/begin_code.h" 1
# 106 "D:\\Libraries\\include\\SDL2/begin_code.h"
#pragma warning(disable: 4103)


#pragma clang diagnostic ignored "-Wpragma-pack"






#pragma pack(push,8)
# 180 "D:\\Libraries\\include\\SDL2/SDL_platform.h" 2








extern __declspec(dllexport) const char * __cdecl SDL_GetPlatform (void);






# 1 "D:\\Libraries\\include\\SDL2/close_code.h" 1
# 39 "D:\\Libraries\\include\\SDL2/close_code.h"
#pragma pack(pop)
# 195 "D:\\Libraries\\include\\SDL2/SDL_platform.h" 2
# 27 "D:\\Libraries\\include\\SDL2/SDL_config.h" 2







typedef signed __int8 int8_t;
typedef unsigned __int8 uint8_t;
typedef signed __int16 int16_t;
typedef unsigned __int16 uint16_t;
typedef signed __int32 int32_t;
typedef unsigned __int32 uint32_t;
typedef signed __int64 int64_t;
typedef unsigned __int64 uint64_t;
# 32 "D:\\Libraries\\include\\SDL2/SDL_stdinc.h" 2
# 50 "D:\\Libraries\\include\\SDL2/SDL_stdinc.h"
# 1 "D:\\LLVM\\lib\\clang\\9.0.0\\include\\stddef.h" 1 3
# 51 "D:\\Libraries\\include\\SDL2/SDL_stdinc.h" 2


# 1 "D:\\LLVM\\lib\\clang\\9.0.0\\include\\stdarg.h" 1 3
# 14 "D:\\LLVM\\lib\\clang\\9.0.0\\include\\stdarg.h" 3
typedef __builtin_va_list va_list;
# 32 "D:\\LLVM\\lib\\clang\\9.0.0\\include\\stdarg.h" 3
typedef __builtin_va_list __gnuc_va_list;
# 54 "D:\\Libraries\\include\\SDL2/SDL_stdinc.h" 2
# 161 "D:\\Libraries\\include\\SDL2/SDL_stdinc.h"
typedef enum
{
    SDL_FALSE = 0,
    SDL_TRUE = 1
} SDL_bool;







typedef int8_t Sint8;





typedef uint8_t Uint8;





typedef int16_t Sint16;





typedef uint16_t Uint16;





typedef int32_t Sint32;





typedef uint32_t Uint32;






typedef int64_t Sint64;





typedef uint64_t Uint64;
# 316 "D:\\Libraries\\include\\SDL2/SDL_stdinc.h"
typedef int SDL_compile_time_assert_uint8[(sizeof(Uint8) == 1) * 2 - 1];
typedef int SDL_compile_time_assert_sint8[(sizeof(Sint8) == 1) * 2 - 1];
typedef int SDL_compile_time_assert_uint16[(sizeof(Uint16) == 2) * 2 - 1];
typedef int SDL_compile_time_assert_sint16[(sizeof(Sint16) == 2) * 2 - 1];
typedef int SDL_compile_time_assert_uint32[(sizeof(Uint32) == 4) * 2 - 1];
typedef int SDL_compile_time_assert_sint32[(sizeof(Sint32) == 4) * 2 - 1];
typedef int SDL_compile_time_assert_uint64[(sizeof(Uint64) == 8) * 2 - 1];
typedef int SDL_compile_time_assert_sint64[(sizeof(Sint64) == 8) * 2 - 1];
# 337 "D:\\Libraries\\include\\SDL2/SDL_stdinc.h"
typedef enum
{
    DUMMY_ENUM_VALUE
} SDL_DUMMY_ENUM;

typedef int SDL_compile_time_assert_enum[(sizeof(SDL_DUMMY_ENUM) == sizeof(int)) * 2 - 1];





# 1 "D:\\Libraries\\include\\SDL2/begin_code.h" 1
# 106 "D:\\Libraries\\include\\SDL2/begin_code.h"
#pragma warning(disable: 4103)


#pragma clang diagnostic ignored "-Wpragma-pack"






#pragma pack(push,8)
# 348 "D:\\Libraries\\include\\SDL2/SDL_stdinc.h" 2
# 361 "D:\\Libraries\\include\\SDL2/SDL_stdinc.h"
extern __declspec(dllexport) void *__cdecl SDL_malloc(size_t size);
extern __declspec(dllexport) void *__cdecl SDL_calloc(size_t nmemb, size_t size);
extern __declspec(dllexport) void *__cdecl SDL_realloc(void *mem, size_t size);
extern __declspec(dllexport) void __cdecl SDL_free(void *mem);

typedef void *(__cdecl *SDL_malloc_func)(size_t size);
typedef void *(__cdecl *SDL_calloc_func)(size_t nmemb, size_t size);
typedef void *(__cdecl *SDL_realloc_func)(void *mem, size_t size);
typedef void (__cdecl *SDL_free_func)(void *mem);




extern __declspec(dllexport) void __cdecl SDL_GetMemoryFunctions(SDL_malloc_func *malloc_func,
                                                    SDL_calloc_func *calloc_func,
                                                    SDL_realloc_func *realloc_func,
                                                    SDL_free_func *free_func);
# 387 "D:\\Libraries\\include\\SDL2/SDL_stdinc.h"
extern __declspec(dllexport) int __cdecl SDL_SetMemoryFunctions(SDL_malloc_func malloc_func,
                                                   SDL_calloc_func calloc_func,
                                                   SDL_realloc_func realloc_func,
                                                   SDL_free_func free_func);




extern __declspec(dllexport) int __cdecl SDL_GetNumAllocations(void);

extern __declspec(dllexport) char *__cdecl SDL_getenv(const char *name);
extern __declspec(dllexport) int __cdecl SDL_setenv(const char *name, const char *value, int overwrite);

extern __declspec(dllexport) void __cdecl SDL_qsort(void *base, size_t nmemb, size_t size, int (*compare) (const void *, const void *));

extern __declspec(dllexport) int __cdecl SDL_abs(int x);






extern __declspec(dllexport) int __cdecl SDL_isdigit(int x);
extern __declspec(dllexport) int __cdecl SDL_isspace(int x);
extern __declspec(dllexport) int __cdecl SDL_toupper(int x);
extern __declspec(dllexport) int __cdecl SDL_tolower(int x);

extern __declspec(dllexport) void *__cdecl SDL_memset( void *dst, int c, size_t len);





__forceinline void SDL_memset4(void *dst, Uint32 val, size_t dwords)
{
# 432 "D:\\Libraries\\include\\SDL2/SDL_stdinc.h"
    size_t _n = (dwords + 3) / 4;
    Uint32 *_p = ((Uint32 *)(dst));
    Uint32 _val = (val);
    if (dwords == 0)
        return;
    switch (dwords % 4)
    {
        case 0: do { *_p++ = _val;
        case 3: *_p++ = _val;
        case 2: *_p++ = _val;
        case 1: *_p++ = _val;
        } while ( --_n );
    }

}

extern __declspec(dllexport) void *__cdecl SDL_memcpy( void *dst, const void *src, size_t len);

extern __declspec(dllexport) void *__cdecl SDL_memmove( void *dst, const void *src, size_t len);
extern __declspec(dllexport) int __cdecl SDL_memcmp(const void *s1, const void *s2, size_t len);

extern __declspec(dllexport) wchar_t *__cdecl SDL_wcsdup(const wchar_t *wstr);
extern __declspec(dllexport) size_t __cdecl SDL_wcslen(const wchar_t *wstr);
extern __declspec(dllexport) size_t __cdecl SDL_wcslcpy( wchar_t *dst, const wchar_t *src, size_t maxlen);
extern __declspec(dllexport) size_t __cdecl SDL_wcslcat( wchar_t *dst, const wchar_t *src, size_t maxlen);
extern __declspec(dllexport) int __cdecl SDL_wcscmp(const wchar_t *str1, const wchar_t *str2);

extern __declspec(dllexport) size_t __cdecl SDL_strlen(const char *str);
extern __declspec(dllexport) size_t __cdecl SDL_strlcpy( char *dst, const char *src, size_t maxlen);
extern __declspec(dllexport) size_t __cdecl SDL_utf8strlcpy( char *dst, const char *src, size_t dst_bytes);
extern __declspec(dllexport) size_t __cdecl SDL_strlcat( char *dst, const char *src, size_t maxlen);
extern __declspec(dllexport) char *__cdecl SDL_strdup(const char *str);
extern __declspec(dllexport) char *__cdecl SDL_strrev(char *str);
extern __declspec(dllexport) char *__cdecl SDL_strupr(char *str);
extern __declspec(dllexport) char *__cdecl SDL_strlwr(char *str);
extern __declspec(dllexport) char *__cdecl SDL_strchr(const char *str, int c);
extern __declspec(dllexport) char *__cdecl SDL_strrchr(const char *str, int c);
extern __declspec(dllexport) char *__cdecl SDL_strstr(const char *haystack, const char *needle);
extern __declspec(dllexport) size_t __cdecl SDL_utf8strlen(const char *str);

extern __declspec(dllexport) char *__cdecl SDL_itoa(int value, char *str, int radix);
extern __declspec(dllexport) char *__cdecl SDL_uitoa(unsigned int value, char *str, int radix);
extern __declspec(dllexport) char *__cdecl SDL_ltoa(long value, char *str, int radix);
extern __declspec(dllexport) char *__cdecl SDL_ultoa(unsigned long value, char *str, int radix);
extern __declspec(dllexport) char *__cdecl SDL_lltoa(Sint64 value, char *str, int radix);
extern __declspec(dllexport) char *__cdecl SDL_ulltoa(Uint64 value, char *str, int radix);

extern __declspec(dllexport) int __cdecl SDL_atoi(const char *str);
extern __declspec(dllexport) double __cdecl SDL_atof(const char *str);
extern __declspec(dllexport) long __cdecl SDL_strtol(const char *str, char **endp, int base);
extern __declspec(dllexport) unsigned long __cdecl SDL_strtoul(const char *str, char **endp, int base);
extern __declspec(dllexport) Sint64 __cdecl SDL_strtoll(const char *str, char **endp, int base);
extern __declspec(dllexport) Uint64 __cdecl SDL_strtoull(const char *str, char **endp, int base);
extern __declspec(dllexport) double __cdecl SDL_strtod(const char *str, char **endp);

extern __declspec(dllexport) int __cdecl SDL_strcmp(const char *str1, const char *str2);
extern __declspec(dllexport) int __cdecl SDL_strncmp(const char *str1, const char *str2, size_t maxlen);
extern __declspec(dllexport) int __cdecl SDL_strcasecmp(const char *str1, const char *str2);
extern __declspec(dllexport) int __cdecl SDL_strncasecmp(const char *str1, const char *str2, size_t len);

extern __declspec(dllexport) int __cdecl SDL_sscanf(const char *text, const char *fmt, ...) ;
extern __declspec(dllexport) int __cdecl SDL_vsscanf(const char *text, const char *fmt, va_list ap);
extern __declspec(dllexport) int __cdecl SDL_snprintf( char *text, size_t maxlen, const char *fmt, ... ) ;
extern __declspec(dllexport) int __cdecl SDL_vsnprintf( char *text, size_t maxlen, const char *fmt, va_list ap);







extern __declspec(dllexport) double __cdecl SDL_acos(double x);
extern __declspec(dllexport) float __cdecl SDL_acosf(float x);
extern __declspec(dllexport) double __cdecl SDL_asin(double x);
extern __declspec(dllexport) float __cdecl SDL_asinf(float x);
extern __declspec(dllexport) double __cdecl SDL_atan(double x);
extern __declspec(dllexport) float __cdecl SDL_atanf(float x);
extern __declspec(dllexport) double __cdecl SDL_atan2(double x, double y);
extern __declspec(dllexport) float __cdecl SDL_atan2f(float x, float y);
extern __declspec(dllexport) double __cdecl SDL_ceil(double x);
extern __declspec(dllexport) float __cdecl SDL_ceilf(float x);
extern __declspec(dllexport) double __cdecl SDL_copysign(double x, double y);
extern __declspec(dllexport) float __cdecl SDL_copysignf(float x, float y);
extern __declspec(dllexport) double __cdecl SDL_cos(double x);
extern __declspec(dllexport) float __cdecl SDL_cosf(float x);
extern __declspec(dllexport) double __cdecl SDL_exp(double x);
extern __declspec(dllexport) float __cdecl SDL_expf(float x);
extern __declspec(dllexport) double __cdecl SDL_fabs(double x);
extern __declspec(dllexport) float __cdecl SDL_fabsf(float x);
extern __declspec(dllexport) double __cdecl SDL_floor(double x);
extern __declspec(dllexport) float __cdecl SDL_floorf(float x);
extern __declspec(dllexport) double __cdecl SDL_fmod(double x, double y);
extern __declspec(dllexport) float __cdecl SDL_fmodf(float x, float y);
extern __declspec(dllexport) double __cdecl SDL_log(double x);
extern __declspec(dllexport) float __cdecl SDL_logf(float x);
extern __declspec(dllexport) double __cdecl SDL_log10(double x);
extern __declspec(dllexport) float __cdecl SDL_log10f(float x);
extern __declspec(dllexport) double __cdecl SDL_pow(double x, double y);
extern __declspec(dllexport) float __cdecl SDL_powf(float x, float y);
extern __declspec(dllexport) double __cdecl SDL_scalbn(double x, int n);
extern __declspec(dllexport) float __cdecl SDL_scalbnf(float x, int n);
extern __declspec(dllexport) double __cdecl SDL_sin(double x);
extern __declspec(dllexport) float __cdecl SDL_sinf(float x);
extern __declspec(dllexport) double __cdecl SDL_sqrt(double x);
extern __declspec(dllexport) float __cdecl SDL_sqrtf(float x);
extern __declspec(dllexport) double __cdecl SDL_tan(double x);
extern __declspec(dllexport) float __cdecl SDL_tanf(float x);
# 547 "D:\\Libraries\\include\\SDL2/SDL_stdinc.h"
typedef struct _SDL_iconv_t *SDL_iconv_t;
extern __declspec(dllexport) SDL_iconv_t __cdecl SDL_iconv_open(const char *tocode,
                                                   const char *fromcode);
extern __declspec(dllexport) int __cdecl SDL_iconv_close(SDL_iconv_t cd);
extern __declspec(dllexport) size_t __cdecl SDL_iconv(SDL_iconv_t cd, const char **inbuf,
                                         size_t * inbytesleft, char **outbuf,
                                         size_t * outbytesleft);




extern __declspec(dllexport) char *__cdecl SDL_iconv_string(const char *tocode,
                                               const char *fromcode,
                                               const char *inbuf,
                                               size_t inbytesleft);
# 594 "D:\\Libraries\\include\\SDL2/SDL_stdinc.h"
__forceinline void *SDL_memcpy4( void *dst, const void *src, size_t dwords)
{
    return SDL_memcpy(dst, src, dwords * 4);
}






# 1 "D:\\Libraries\\include\\SDL2/close_code.h" 1
# 39 "D:\\Libraries\\include\\SDL2/close_code.h"
#pragma pack(pop)
# 604 "D:\\Libraries\\include\\SDL2/SDL_stdinc.h" 2
# 26 "D:\\Libraries\\include\\SDL2/SDL_main.h" 2
# 112 "D:\\Libraries\\include\\SDL2/SDL_main.h"
# 1 "D:\\Libraries\\include\\SDL2/begin_code.h" 1
# 106 "D:\\Libraries\\include\\SDL2/begin_code.h"
#pragma warning(disable: 4103)


#pragma clang diagnostic ignored "-Wpragma-pack"






#pragma pack(push,8)
# 113 "D:\\Libraries\\include\\SDL2/SDL_main.h" 2







typedef int (*SDL_main_func)(int argc, char *argv[]);
extern int SDL_main(int argc, char *argv[]);
# 131 "D:\\Libraries\\include\\SDL2/SDL_main.h"
extern __declspec(dllexport) void __cdecl SDL_SetMainReady(void);






extern __declspec(dllexport) int __cdecl SDL_RegisterApp(char *name, Uint32 style, void *hInst);
extern __declspec(dllexport) void __cdecl SDL_UnregisterApp(void);
# 176 "D:\\Libraries\\include\\SDL2/SDL_main.h"
# 1 "D:\\Libraries\\include\\SDL2/close_code.h" 1
# 39 "D:\\Libraries\\include\\SDL2/close_code.h"
#pragma pack(pop)
# 177 "D:\\Libraries\\include\\SDL2/SDL_main.h" 2
# 33 "D:\\Libraries\\include\\SDL2\\SDL.h" 2

# 1 "D:\\Libraries\\include\\SDL2/SDL_assert.h" 1
# 27 "D:\\Libraries\\include\\SDL2/SDL_assert.h"
# 1 "D:\\Libraries\\include\\SDL2/begin_code.h" 1
# 106 "D:\\Libraries\\include\\SDL2/begin_code.h"
#pragma warning(disable: 4103)


#pragma clang diagnostic ignored "-Wpragma-pack"






#pragma pack(push,8)
# 28 "D:\\Libraries\\include\\SDL2/SDL_assert.h" 2
# 52 "D:\\Libraries\\include\\SDL2/SDL_assert.h"
    extern void __cdecl __debugbreak(void);
# 102 "D:\\Libraries\\include\\SDL2/SDL_assert.h"
typedef enum
{
    SDL_ASSERTION_RETRY,
    SDL_ASSERTION_BREAK,
    SDL_ASSERTION_ABORT,
    SDL_ASSERTION_IGNORE,
    SDL_ASSERTION_ALWAYS_IGNORE
} SDL_AssertState;

typedef struct SDL_AssertData
{
    int always_ignore;
    unsigned int trigger_count;
    const char *condition;
    const char *filename;
    int linenum;
    const char *function;
    const struct SDL_AssertData *next;
} SDL_AssertData;




extern __declspec(dllexport) SDL_AssertState __cdecl SDL_ReportAssertion(SDL_AssertData *,
                                                             const char *,
                                                             const char *, int)





   __attribute__((analyzer_noreturn))


;
# 188 "D:\\Libraries\\include\\SDL2/SDL_assert.h"
typedef SDL_AssertState (__cdecl *SDL_AssertionHandler)(
                                 const SDL_AssertData* data, void* userdata);
# 211 "D:\\Libraries\\include\\SDL2/SDL_assert.h"
extern __declspec(dllexport) void __cdecl SDL_SetAssertionHandler(
                                            SDL_AssertionHandler handler,
                                            void *userdata);
# 225 "D:\\Libraries\\include\\SDL2/SDL_assert.h"
extern __declspec(dllexport) SDL_AssertionHandler __cdecl SDL_GetDefaultAssertionHandler(void);
# 242 "D:\\Libraries\\include\\SDL2/SDL_assert.h"
extern __declspec(dllexport) SDL_AssertionHandler __cdecl SDL_GetAssertionHandler(void **puserdata);
# 266 "D:\\Libraries\\include\\SDL2/SDL_assert.h"
extern __declspec(dllexport) const SDL_AssertData * __cdecl SDL_GetAssertionReport(void);
# 275 "D:\\Libraries\\include\\SDL2/SDL_assert.h"
extern __declspec(dllexport) void __cdecl SDL_ResetAssertionReport(void);
# 287 "D:\\Libraries\\include\\SDL2/SDL_assert.h"
# 1 "D:\\Libraries\\include\\SDL2/close_code.h" 1
# 39 "D:\\Libraries\\include\\SDL2/close_code.h"
#pragma pack(pop)
# 288 "D:\\Libraries\\include\\SDL2/SDL_assert.h" 2
# 35 "D:\\Libraries\\include\\SDL2\\SDL.h" 2
# 1 "D:\\Libraries\\include\\SDL2/SDL_atomic.h" 1
# 65 "D:\\Libraries\\include\\SDL2/SDL_atomic.h"
# 1 "D:\\Libraries\\include\\SDL2/begin_code.h" 1
# 106 "D:\\Libraries\\include\\SDL2/begin_code.h"
#pragma warning(disable: 4103)


#pragma clang diagnostic ignored "-Wpragma-pack"






#pragma pack(push,8)
# 66 "D:\\Libraries\\include\\SDL2/SDL_atomic.h" 2
# 89 "D:\\Libraries\\include\\SDL2/SDL_atomic.h"
typedef int SDL_SpinLock;
# 98 "D:\\Libraries\\include\\SDL2/SDL_atomic.h"
extern __declspec(dllexport) SDL_bool __cdecl SDL_AtomicTryLock(SDL_SpinLock *lock);






extern __declspec(dllexport) void __cdecl SDL_AtomicLock(SDL_SpinLock *lock);






extern __declspec(dllexport) void __cdecl SDL_AtomicUnlock(SDL_SpinLock *lock);
# 155 "D:\\Libraries\\include\\SDL2/SDL_atomic.h"
extern __declspec(dllexport) void __cdecl SDL_MemoryBarrierReleaseFunction(void);
extern __declspec(dllexport) void __cdecl SDL_MemoryBarrierAcquireFunction(void);
# 216 "D:\\Libraries\\include\\SDL2/SDL_atomic.h"
typedef struct { int value; } SDL_atomic_t;
# 225 "D:\\Libraries\\include\\SDL2/SDL_atomic.h"
extern __declspec(dllexport) SDL_bool __cdecl SDL_AtomicCAS(SDL_atomic_t *a, int oldval, int newval);






extern __declspec(dllexport) int __cdecl SDL_AtomicSet(SDL_atomic_t *a, int v);




extern __declspec(dllexport) int __cdecl SDL_AtomicGet(SDL_atomic_t *a);
# 246 "D:\\Libraries\\include\\SDL2/SDL_atomic.h"
extern __declspec(dllexport) int __cdecl SDL_AtomicAdd(SDL_atomic_t *a, int v);
# 272 "D:\\Libraries\\include\\SDL2/SDL_atomic.h"
extern __declspec(dllexport) SDL_bool __cdecl SDL_AtomicCASPtr(void **a, void *oldval, void *newval);






extern __declspec(dllexport) void* __cdecl SDL_AtomicSetPtr(void **a, void* v);




extern __declspec(dllexport) void* __cdecl SDL_AtomicGetPtr(void **a);







# 1 "D:\\Libraries\\include\\SDL2/close_code.h" 1
# 39 "D:\\Libraries\\include\\SDL2/close_code.h"
#pragma pack(pop)
# 292 "D:\\Libraries\\include\\SDL2/SDL_atomic.h" 2
# 36 "D:\\Libraries\\include\\SDL2\\SDL.h" 2
# 1 "D:\\Libraries\\include\\SDL2/SDL_audio.h" 1
# 32 "D:\\Libraries\\include\\SDL2/SDL_audio.h"
# 1 "D:\\Libraries\\include\\SDL2/SDL_error.h" 1
# 33 "D:\\Libraries\\include\\SDL2/SDL_error.h"
# 1 "D:\\Libraries\\include\\SDL2/begin_code.h" 1
# 106 "D:\\Libraries\\include\\SDL2/begin_code.h"
#pragma warning(disable: 4103)


#pragma clang diagnostic ignored "-Wpragma-pack"






#pragma pack(push,8)
# 34 "D:\\Libraries\\include\\SDL2/SDL_error.h" 2







extern __declspec(dllexport) int __cdecl SDL_SetError( const char *fmt, ...) ;
extern __declspec(dllexport) const char *__cdecl SDL_GetError(void);
extern __declspec(dllexport) void __cdecl SDL_ClearError(void);
# 55 "D:\\Libraries\\include\\SDL2/SDL_error.h"
typedef enum
{
    SDL_ENOMEM,
    SDL_EFREAD,
    SDL_EFWRITE,
    SDL_EFSEEK,
    SDL_UNSUPPORTED,
    SDL_LASTERROR
} SDL_errorcode;

extern __declspec(dllexport) int __cdecl SDL_Error(SDL_errorcode code);







# 1 "D:\\Libraries\\include\\SDL2/close_code.h" 1
# 39 "D:\\Libraries\\include\\SDL2/close_code.h"
#pragma pack(pop)
# 73 "D:\\Libraries\\include\\SDL2/SDL_error.h" 2
# 33 "D:\\Libraries\\include\\SDL2/SDL_audio.h" 2
# 1 "D:\\Libraries\\include\\SDL2/SDL_endian.h" 1
# 59 "D:\\Libraries\\include\\SDL2/SDL_endian.h"
# 1 "D:\\Libraries\\include\\SDL2/begin_code.h" 1
# 106 "D:\\Libraries\\include\\SDL2/begin_code.h"
#pragma warning(disable: 4103)


#pragma clang diagnostic ignored "-Wpragma-pack"






#pragma pack(push,8)
# 60 "D:\\Libraries\\include\\SDL2/SDL_endian.h" 2
# 106 "D:\\Libraries\\include\\SDL2/SDL_endian.h"
__forceinline Uint16
SDL_Swap16(Uint16 x)
{
    return ((Uint16)(((x << 8) | (x >> 8))));
}
# 161 "D:\\Libraries\\include\\SDL2/SDL_endian.h"
__forceinline Uint32
SDL_Swap32(Uint32 x)
{
    return ((Uint32)(((x << 24) | ((x << 8) & 0x00FF0000) | ((x >> 8) & 0x0000FF00) | (x >> 24))));

}
# 195 "D:\\Libraries\\include\\SDL2/SDL_endian.h"
__forceinline Uint64
SDL_Swap64(Uint64 x)
{
    Uint32 hi, lo;


    lo = ((Uint32)(x & 0xFFFFFFFF));
    x >>= 32;
    hi = ((Uint32)(x & 0xFFFFFFFF));
    x = SDL_Swap32(lo);
    x <<= 32;
    x |= SDL_Swap32(hi);
    return (x);
}



__forceinline float
SDL_SwapFloat(float x)
{
    union
    {
        float f;
        Uint32 ui32;
    } swapper;
    swapper.f = x;
    swapper.ui32 = SDL_Swap32(swapper.ui32);
    return swapper.f;
}
# 256 "D:\\Libraries\\include\\SDL2/SDL_endian.h"
# 1 "D:\\Libraries\\include\\SDL2/close_code.h" 1
# 39 "D:\\Libraries\\include\\SDL2/close_code.h"
#pragma pack(pop)
# 257 "D:\\Libraries\\include\\SDL2/SDL_endian.h" 2
# 34 "D:\\Libraries\\include\\SDL2/SDL_audio.h" 2
# 1 "D:\\Libraries\\include\\SDL2/SDL_mutex.h" 1
# 34 "D:\\Libraries\\include\\SDL2/SDL_mutex.h"
# 1 "D:\\Libraries\\include\\SDL2/begin_code.h" 1
# 106 "D:\\Libraries\\include\\SDL2/begin_code.h"
#pragma warning(disable: 4103)


#pragma clang diagnostic ignored "-Wpragma-pack"






#pragma pack(push,8)
# 35 "D:\\Libraries\\include\\SDL2/SDL_mutex.h" 2
# 58 "D:\\Libraries\\include\\SDL2/SDL_mutex.h"
struct SDL_mutex;
typedef struct SDL_mutex SDL_mutex;




extern __declspec(dllexport) SDL_mutex *__cdecl SDL_CreateMutex(void);







extern __declspec(dllexport) int __cdecl SDL_LockMutex(SDL_mutex * mutex);






extern __declspec(dllexport) int __cdecl SDL_TryLockMutex(SDL_mutex * mutex);
# 90 "D:\\Libraries\\include\\SDL2/SDL_mutex.h"
extern __declspec(dllexport) int __cdecl SDL_UnlockMutex(SDL_mutex * mutex);




extern __declspec(dllexport) void __cdecl SDL_DestroyMutex(SDL_mutex * mutex);
# 106 "D:\\Libraries\\include\\SDL2/SDL_mutex.h"
struct SDL_semaphore;
typedef struct SDL_semaphore SDL_sem;




extern __declspec(dllexport) SDL_sem *__cdecl SDL_CreateSemaphore(Uint32 initial_value);




extern __declspec(dllexport) void __cdecl SDL_DestroySemaphore(SDL_sem * sem);






extern __declspec(dllexport) int __cdecl SDL_SemWait(SDL_sem * sem);







extern __declspec(dllexport) int __cdecl SDL_SemTryWait(SDL_sem * sem);
# 143 "D:\\Libraries\\include\\SDL2/SDL_mutex.h"
extern __declspec(dllexport) int __cdecl SDL_SemWaitTimeout(SDL_sem * sem, Uint32 ms);






extern __declspec(dllexport) int __cdecl SDL_SemPost(SDL_sem * sem);




extern __declspec(dllexport) Uint32 __cdecl SDL_SemValue(SDL_sem * sem);
# 166 "D:\\Libraries\\include\\SDL2/SDL_mutex.h"
struct SDL_cond;
typedef struct SDL_cond SDL_cond;
# 197 "D:\\Libraries\\include\\SDL2/SDL_mutex.h"
extern __declspec(dllexport) SDL_cond *__cdecl SDL_CreateCond(void);




extern __declspec(dllexport) void __cdecl SDL_DestroyCond(SDL_cond * cond);






extern __declspec(dllexport) int __cdecl SDL_CondSignal(SDL_cond * cond);






extern __declspec(dllexport) int __cdecl SDL_CondBroadcast(SDL_cond * cond);
# 227 "D:\\Libraries\\include\\SDL2/SDL_mutex.h"
extern __declspec(dllexport) int __cdecl SDL_CondWait(SDL_cond * cond, SDL_mutex * mutex);
# 237 "D:\\Libraries\\include\\SDL2/SDL_mutex.h"
extern __declspec(dllexport) int __cdecl SDL_CondWaitTimeout(SDL_cond * cond,
                                                SDL_mutex * mutex, Uint32 ms);
# 247 "D:\\Libraries\\include\\SDL2/SDL_mutex.h"
# 1 "D:\\Libraries\\include\\SDL2/close_code.h" 1
# 39 "D:\\Libraries\\include\\SDL2/close_code.h"
#pragma pack(pop)
# 248 "D:\\Libraries\\include\\SDL2/SDL_mutex.h" 2
# 35 "D:\\Libraries\\include\\SDL2/SDL_audio.h" 2
# 1 "D:\\Libraries\\include\\SDL2/SDL_thread.h" 1
# 38 "D:\\Libraries\\include\\SDL2/SDL_thread.h"
# 1 "D:\\Libraries\\include\\SDL2/begin_code.h" 1
# 106 "D:\\Libraries\\include\\SDL2/begin_code.h"
#pragma warning(disable: 4103)


#pragma clang diagnostic ignored "-Wpragma-pack"






#pragma pack(push,8)
# 39 "D:\\Libraries\\include\\SDL2/SDL_thread.h" 2






struct SDL_Thread;
typedef struct SDL_Thread SDL_Thread;


typedef unsigned long SDL_threadID;


typedef unsigned int SDL_TLSID;






typedef enum {
    SDL_THREAD_PRIORITY_LOW,
    SDL_THREAD_PRIORITY_NORMAL,
    SDL_THREAD_PRIORITY_HIGH,
    SDL_THREAD_PRIORITY_TIME_CRITICAL
} SDL_ThreadPriority;





typedef int (__cdecl * SDL_ThreadFunction) (void *data);
# 94 "D:\\Libraries\\include\\SDL2/SDL_thread.h"
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\process.h" 1 3
# 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\process.h" 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_startup.h" 1 3
# 12 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_startup.h" 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\math.h" 1 3
# 11 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\math.h" 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_math.h" 1 3
# 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_math.h" 3
#pragma pack(push, 8)

#pragma warning(push)
#pragma warning(disable: 4738)
#pragma warning(disable: 4820)






 struct _exception
    {
        int type;
        char* name;
        double arg1;
        double arg2;
        double retval;
    };






        struct _complex
        {
            double x, y;
        };
# 61 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_math.h" 3
    typedef float float_t;
    typedef double double_t;
# 80 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_math.h" 3
        extern double const _HUGE;
# 171 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_math.h" 3
void __cdecl _fperrraise( int _Except);

                        short __cdecl _dclass( double _X);
                        short __cdecl _ldclass( long double _X);
                        short __cdecl _fdclass( float _X);

                        int __cdecl _dsign( double _X);
                        int __cdecl _ldsign( long double _X);
                        int __cdecl _fdsign( float _X);

                        int __cdecl _dpcomp( double _X, double _Y);
                        int __cdecl _ldpcomp( long double _X, long double _Y);
                        int __cdecl _fdpcomp( float _X, float _Y);

                        short __cdecl _dtest( double* _Px);
                        short __cdecl _ldtest( long double* _Px);
                        short __cdecl _fdtest( float* _Px);

         short __cdecl _d_int( double* _Px, short _Xexp);
         short __cdecl _ld_int( long double* _Px, short _Xexp);
         short __cdecl _fd_int( float* _Px, short _Xexp);

         short __cdecl _dscale( double* _Px, long _Lexp);
         short __cdecl _ldscale( long double* _Px, long _Lexp);
         short __cdecl _fdscale( float* _Px, long _Lexp);

         short __cdecl _dunscale( short* _Pex, double* _Px);
         short __cdecl _ldunscale( short* _Pex, long double* _Px);
         short __cdecl _fdunscale( short* _Pex, float* _Px);

                        short __cdecl _dexp( double* _Px, double _Y, long _Eoff);
                        short __cdecl _ldexp( long double* _Px, long double _Y, long _Eoff);
                        short __cdecl _fdexp( float* _Px, float _Y, long _Eoff);

                        short __cdecl _dnorm( unsigned short* _Ps);
                        short __cdecl _fdnorm( unsigned short* _Ps);

                        double __cdecl _dpoly( double _X, double const* _Tab, int _N);
                        long double __cdecl _ldpoly( long double _X, long double const* _Tab, int _N);
                        float __cdecl _fdpoly( float _X, float const* _Tab, int _N);

                        double __cdecl _dlog( double _X, int _Baseflag);
                        long double __cdecl _ldlog( long double _X, int _Baseflag);
                        float __cdecl _fdlog( float _X, int _Baseflag);

                        double __cdecl _dsin( double _X, unsigned int _Qoff);
                        long double __cdecl _ldsin( long double _X, unsigned int _Qoff);
                        float __cdecl _fdsin( float _X, unsigned int _Qoff);


typedef union
{
    unsigned short _Sh[4];
    double _Val;
} _double_val;


typedef union
{
    unsigned short _Sh[2];
    float _Val;
} _float_val;


typedef union
{
    unsigned short _Sh[4];
    long double _Val;
} _ldouble_val;

typedef union
{
    unsigned short _Word[4];
    float _Float;
    double _Double;
    long double _Long_double;
} _float_const;

extern const _float_const _Denorm_C, _Inf_C, _Nan_C, _Snan_C, _Hugeval_C;
extern const _float_const _FDenorm_C, _FInf_C, _FNan_C, _FSnan_C;
extern const _float_const _LDenorm_C, _LInf_C, _LNan_C, _LSnan_C;

extern const _float_const _Eps_C, _Rteps_C;
extern const _float_const _FEps_C, _FRteps_C;
extern const _float_const _LEps_C, _LRteps_C;

extern const double _Zero_C, _Xbig_C;
extern const float _FZero_C, _FXbig_C;
extern const long double _LZero_C, _LXbig_C;
# 466 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_math.h" 3
                   int __cdecl abs( int _X);
                   long __cdecl labs( long _X);
                   long long __cdecl llabs( long long _X);

                   double __cdecl acos( double _X);
                   double __cdecl asin( double _X);
                   double __cdecl atan( double _X);
                   double __cdecl atan2( double _Y, double _X);

                   double __cdecl cos( double _X);
                   double __cdecl cosh( double _X);
                   double __cdecl exp( double _X);
                                      double __cdecl fabs( double _X);
                   double __cdecl fmod( double _X, double _Y);
                   double __cdecl log( double _X);
                   double __cdecl log10( double _X);
                   double __cdecl pow( double _X, double _Y);
                   double __cdecl sin( double _X);
                   double __cdecl sinh( double _X);
                                      double __cdecl sqrt( double _X);
                   double __cdecl tan( double _X);
                   double __cdecl tanh( double _X);

                            double __cdecl acosh( double _X);
                            double __cdecl asinh( double _X);
                            double __cdecl atanh( double _X);
                             double __cdecl atof( char const* _String);
                             double __cdecl _atof_l( char const* _String, _locale_t _Locale);
                            double __cdecl _cabs( struct _complex _Complex_value);
                            double __cdecl cbrt( double _X);
                            double __cdecl ceil( double _X);
                            double __cdecl _chgsign( double _X);
                            double __cdecl copysign( double _Number, double _Sign);
                            double __cdecl _copysign( double _Number, double _Sign);
                            double __cdecl erf( double _X);
                            double __cdecl erfc( double _X);
                            double __cdecl exp2( double _X);
                            double __cdecl expm1( double _X);
                            double __cdecl fdim( double _X, double _Y);
                            double __cdecl floor( double _X);
                            double __cdecl fma( double _X, double _Y, double _Z);
                            double __cdecl fmax( double _X, double _Y);
                            double __cdecl fmin( double _X, double _Y);
                            double __cdecl frexp( double _X, int* _Y);
                            double __cdecl hypot( double _X, double _Y);
                            double __cdecl _hypot( double _X, double _Y);
                            int __cdecl ilogb( double _X);
                            double __cdecl ldexp( double _X, int _Y);
                            double __cdecl lgamma( double _X);
                            long long __cdecl llrint( double _X);
                            long long __cdecl llround( double _X);
                            double __cdecl log1p( double _X);
                            double __cdecl log2( double _X);
                            double __cdecl logb( double _X);
                            long __cdecl lrint( double _X);
                            long __cdecl lround( double _X);

    int __cdecl _matherr( struct _exception* _Except);

                            double __cdecl modf( double _X, double* _Y);
                            double __cdecl nan( char const* _X);
                            double __cdecl nearbyint( double _X);
                            double __cdecl nextafter( double _X, double _Y);
                            double __cdecl nexttoward( double _X, long double _Y);
                            double __cdecl remainder( double _X, double _Y);
                            double __cdecl remquo( double _X, double _Y, int* _Z);
                            double __cdecl rint( double _X);
                            double __cdecl round( double _X);
                            double __cdecl scalbln( double _X, long _Y);
                            double __cdecl scalbn( double _X, int _Y);
                            double __cdecl tgamma( double _X);
                            double __cdecl trunc( double _X);
                            double __cdecl _j0( double _X );
                            double __cdecl _j1( double _X );
                            double __cdecl _jn(int _X, double _Y);
                            double __cdecl _y0( double _X);
                            double __cdecl _y1( double _X);
                            double __cdecl _yn( int _X, double _Y);

                            float __cdecl acoshf( float _X);
                            float __cdecl asinhf( float _X);
                            float __cdecl atanhf( float _X);
                            float __cdecl cbrtf( float _X);
                            float __cdecl _chgsignf( float _X);
                            float __cdecl copysignf( float _Number, float _Sign);
                            float __cdecl _copysignf( float _Number, float _Sign);
                            float __cdecl erff( float _X);
                            float __cdecl erfcf( float _X);
                            float __cdecl expm1f( float _X);
                            float __cdecl exp2f( float _X);
                            float __cdecl fdimf( float _X, float _Y);
                            float __cdecl fmaf( float _X, float _Y, float _Z);
                            float __cdecl fmaxf( float _X, float _Y);
                            float __cdecl fminf( float _X, float _Y);
                            float __cdecl _hypotf( float _X, float _Y);
                            int __cdecl ilogbf( float _X);
                            float __cdecl lgammaf( float _X);
                            long long __cdecl llrintf( float _X);
                            long long __cdecl llroundf( float _X);
                            float __cdecl log1pf( float _X);
                            float __cdecl log2f( float _X);
                            float __cdecl logbf( float _X);
                            long __cdecl lrintf( float _X);
                            long __cdecl lroundf( float _X);
                            float __cdecl nanf( char const* _X);
                            float __cdecl nearbyintf( float _X);
                            float __cdecl nextafterf( float _X, float _Y);
                            float __cdecl nexttowardf( float _X, long double _Y);
                            float __cdecl remainderf( float _X, float _Y);
                            float __cdecl remquof( float _X, float _Y, int* _Z);
                            float __cdecl rintf( float _X);
                            float __cdecl roundf( float _X);
                            float __cdecl scalblnf( float _X, long _Y);
                            float __cdecl scalbnf( float _X, int _Y);
                            float __cdecl tgammaf( float _X);
                            float __cdecl truncf( float _X);
# 591 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_math.h" 3
                                float __cdecl _logbf( float _X);
                                float __cdecl _nextafterf( float _X, float _Y);
                                int __cdecl _finitef( float _X);
                                int __cdecl _isnanf( float _X);
                                int __cdecl _fpclassf( float _X);

                                int __cdecl _set_FMA3_enable( int _Flag);
                                int __cdecl _get_FMA3_enable(void);
# 611 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_math.h" 3
                                float __cdecl acosf( float _X);
                                float __cdecl asinf( float _X);
                                float __cdecl atan2f( float _Y, float _X);
                                float __cdecl atanf( float _X);
                                float __cdecl ceilf( float _X);
                                float __cdecl cosf( float _X);
                                float __cdecl coshf( float _X);
                                float __cdecl expf( float _X);
# 670 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_math.h" 3
                       __inline float __cdecl fabsf( float _X)
        {
            return (float)fabs(_X);
        }





                                float __cdecl floorf( float _X);
                                float __cdecl fmodf( float _X, float _Y);
# 696 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_math.h" 3
                   __inline float __cdecl frexpf( float _X, int *_Y)
    {
        return (float)frexp(_X, _Y);
    }

                   __inline float __cdecl hypotf( float _X, float _Y)
    {
        return _hypotf(_X, _Y);
    }

                   __inline float __cdecl ldexpf( float _X, int _Y)
    {
        return (float)ldexp(_X, _Y);
    }



                                float __cdecl log10f( float _X);
                                float __cdecl logf( float _X);
                                float __cdecl modff( float _X, float *_Y);
                                float __cdecl powf( float _X, float _Y);
                                float __cdecl sinf( float _X);
                                float __cdecl sinhf( float _X);
                                float __cdecl sqrtf( float _X);
                                float __cdecl tanf( float _X);
                                float __cdecl tanhf( float _X);
# 775 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_math.h" 3
                            long double __cdecl acoshl( long double _X);

                   __inline long double __cdecl acosl( long double _X)
    {
        return acos((double)_X);
    }

                            long double __cdecl asinhl( long double _X);

                   __inline long double __cdecl asinl( long double _X)
    {
        return asin((double)_X);
    }

                   __inline long double __cdecl atan2l( long double _Y, long double _X)
    {
        return atan2((double)_Y, (double)_X);
    }

                            long double __cdecl atanhl( long double _X);

                   __inline long double __cdecl atanl( long double _X)
    {
        return atan((double)_X);
    }

                            long double __cdecl cbrtl( long double _X);

                   __inline long double __cdecl ceill( long double _X)
    {
        return ceil((double)_X);
    }

                   __inline long double __cdecl _chgsignl( long double _X)
    {
        return _chgsign((double)_X);
    }

                            long double __cdecl copysignl( long double _Number, long double _Sign);

                   __inline long double __cdecl _copysignl( long double _Number, long double _Sign)
    {
        return _copysign((double)_Number, (double)_Sign);
    }

                   __inline long double __cdecl coshl( long double _X)
    {
        return cosh((double)_X);
    }

                   __inline long double __cdecl cosl( long double _X)
    {
        return cos((double)_X);
    }

                            long double __cdecl erfl( long double _X);
                            long double __cdecl erfcl( long double _X);

                   __inline long double __cdecl expl( long double _X)
    {
        return exp((double)_X);
    }

                            long double __cdecl exp2l( long double _X);
                            long double __cdecl expm1l( long double _X);

                   __inline long double __cdecl fabsl( long double _X)
    {
        return fabs((double)_X);
    }

                            long double __cdecl fdiml( long double _X, long double _Y);

                   __inline long double __cdecl floorl( long double _X)
    {
        return floor((double)_X);
    }

                            long double __cdecl fmal( long double _X, long double _Y, long double _Z);
                            long double __cdecl fmaxl( long double _X, long double _Y);
                            long double __cdecl fminl( long double _X, long double _Y);

                   __inline long double __cdecl fmodl( long double _X, long double _Y)
    {
        return fmod((double)_X, (double)_Y);
    }

                   __inline long double __cdecl frexpl( long double _X, int *_Y)
    {
        return frexp((double)_X, _Y);
    }

                            int __cdecl ilogbl( long double _X);

                   __inline long double __cdecl _hypotl( long double _X, long double _Y)
    {
        return _hypot((double)_X, (double)_Y);
    }

                   __inline long double __cdecl hypotl( long double _X, long double _Y)
    {
        return _hypot((double)_X, (double)_Y);
    }

                   __inline long double __cdecl ldexpl( long double _X, int _Y)
    {
        return ldexp((double)_X, _Y);
    }

                            long double __cdecl lgammal( long double _X);
                            long long __cdecl llrintl( long double _X);
                            long long __cdecl llroundl( long double _X);

                   __inline long double __cdecl logl( long double _X)
    {
        return log((double)_X);
    }

                   __inline long double __cdecl log10l( long double _X)
    {
        return log10((double)_X);
    }

                            long double __cdecl log1pl( long double _X);
                            long double __cdecl log2l( long double _X);
                            long double __cdecl logbl( long double _X);
                            long __cdecl lrintl( long double _X);
                            long __cdecl lroundl( long double _X);

                   __inline long double __cdecl modfl( long double _X, long double* _Y)
    {
        double _F, _I;
        _F = modf((double)_X, &_I);
        *_Y = _I;
        return _F;
    }

                            long double __cdecl nanl( char const* _X);
                            long double __cdecl nearbyintl( long double _X);
                            long double __cdecl nextafterl( long double _X, long double _Y);
                            long double __cdecl nexttowardl( long double _X, long double _Y);

                   __inline long double __cdecl powl( long double _X, long double _Y)
    {
        return pow((double)_X, (double)_Y);
    }

                            long double __cdecl remainderl( long double _X, long double _Y);
                            long double __cdecl remquol( long double _X, long double _Y, int* _Z);
                            long double __cdecl rintl( long double _X);
                            long double __cdecl roundl( long double _X);
                            long double __cdecl scalblnl( long double _X, long _Y);
                            long double __cdecl scalbnl( long double _X, int _Y);

                   __inline long double __cdecl sinhl( long double _X)
    {
        return sinh((double)_X);
    }

                   __inline long double __cdecl sinl( long double _X)
    {
        return sin((double)_X);
    }

                   __inline long double __cdecl sqrtl( long double _X)
    {
        return sqrt((double)_X);
    }

                   __inline long double __cdecl tanhl( long double _X)
    {
        return tanh((double)_X);
    }

                   __inline long double __cdecl tanl( long double _X)
    {
        return tan((double)_X);
    }

                            long double __cdecl tgammal( long double _X);
                            long double __cdecl truncl( long double _X);
# 976 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_math.h" 3
            extern double HUGE;




        __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_j0" ". See online help for details.")) double __cdecl j0( double _X);
        __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_j1" ". See online help for details.")) double __cdecl j1( double _X);
        __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_jn" ". See online help for details.")) double __cdecl jn( int _X, double _Y);
        __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_y0" ". See online help for details.")) double __cdecl y0( double _X);
        __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_y1" ". See online help for details.")) double __cdecl y1( double _X);
        __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_yn" ". See online help for details.")) double __cdecl yn( int _X, double _Y);





#pragma warning(pop)

#pragma pack(pop)
# 12 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\math.h" 2 3
# 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_startup.h" 2 3
# 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.25.28610\\include\\vcruntime_startup.h" 1 3
# 12 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.25.28610\\include\\vcruntime_startup.h" 3
#pragma warning(push)
#pragma warning(disable: 4514 4820)

#pragma pack(push, 8)



typedef enum _crt_argv_mode
{
    _crt_argv_no_arguments,
    _crt_argv_unexpanded_arguments,
    _crt_argv_expanded_arguments,
} _crt_argv_mode;

typedef enum _crt_exit_return_mode
{
    _crt_exit_terminate_process,
    _crt_exit_return_to_caller
} _crt_exit_return_mode;

typedef enum _crt_exit_cleanup_mode
{
    _crt_exit_full_cleanup,
    _crt_exit_quick_cleanup,
    _crt_exit_no_cleanup
} _crt_exit_cleanup_mode;

extern _crt_exit_return_mode __current_exit_return_mode;



__vcrt_bool __cdecl __vcrt_initialize(void);
__vcrt_bool __cdecl __vcrt_uninitialize( __vcrt_bool _Terminating);
__vcrt_bool __cdecl __vcrt_uninitialize_critical(void);
__vcrt_bool __cdecl __vcrt_thread_attach(void);
__vcrt_bool __cdecl __vcrt_thread_detach(void);

int __cdecl __isa_available_init(void);
_crt_argv_mode __cdecl _get_startup_argv_mode(void);



#pragma pack(pop)

#pragma warning(pop)
# 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_startup.h" 2 3

#pragma pack(push, 8)








struct _EXCEPTION_POINTERS;

         int __cdecl _seh_filter_dll(
         unsigned long _ExceptionNum,
         struct _EXCEPTION_POINTERS* _ExceptionPtr
    );

         int __cdecl _seh_filter_exe(
         unsigned long _ExceptionNum,
         struct _EXCEPTION_POINTERS* _ExceptionPtr
    );
# 43 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_startup.h" 3
typedef enum _crt_app_type
{
    _crt_unknown_app,
    _crt_console_app,
    _crt_gui_app
} _crt_app_type;

         _crt_app_type __cdecl _query_app_type(void);

         void __cdecl _set_app_type(
         _crt_app_type _Type
    );

typedef int (__cdecl *_UserMathErrorFunctionPointer)(struct _exception *);

         void __cdecl __setusermatherr(
    _UserMathErrorFunctionPointer _UserMathErrorFunction
    );

int __cdecl _is_c_termination_complete(void);
# 71 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_startup.h" 3
         errno_t __cdecl _configure_narrow_argv(
         _crt_argv_mode mode
    );

         errno_t __cdecl _configure_wide_argv(
         _crt_argv_mode mode
    );



int __cdecl _initialize_narrow_environment(void);
int __cdecl _initialize_wide_environment(void);

         char** __cdecl _get_initial_narrow_environment(void);
         wchar_t** __cdecl _get_initial_wide_environment(void);

char* __cdecl _get_narrow_winmain_command_line(void);
wchar_t* __cdecl _get_wide_winmain_command_line(void);

         char** __cdecl __p__acmdln(void);
         wchar_t** __cdecl __p__wcmdln(void);
# 108 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_startup.h" 3
typedef void (__cdecl* _PVFV)(void);
typedef int (__cdecl* _PIFV)(void);
typedef void (__cdecl* _PVFI)(int);


             void __cdecl _initterm(
                                        _PVFV* _First,
                                        _PVFV* _Last
        );

             int __cdecl _initterm_e(
                                        _PIFV* _First,
                                        _PIFV* _Last
        );
# 133 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_startup.h" 3
typedef struct _onexit_table_t
{
    _PVFV* _first;
    _PVFV* _last;
    _PVFV* _end;
} _onexit_table_t;

         int __cdecl _initialize_onexit_table(
             _onexit_table_t* _Table
    );

         int __cdecl _register_onexit_function(
             _onexit_table_t* _Table,
             _onexit_t _Function
    );

         int __cdecl _execute_onexit_table(
             _onexit_table_t* _Table
    );

         int __cdecl _crt_atexit(
             _PVFV _Function
    );

         int __cdecl _crt_at_quick_exit(
             _PVFV _Function
    );
# 171 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_startup.h" 3
    __crt_bool __cdecl __acrt_initialize(void);


    __crt_bool __cdecl __acrt_uninitialize(
             __crt_bool _Terminating
        );


    __crt_bool __cdecl __acrt_uninitialize_critical(
             __crt_bool _Terminating
        );


    __crt_bool __cdecl __acrt_thread_attach(void);


    __crt_bool __cdecl __acrt_thread_detach(void);





#pragma pack(pop)
# 15 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\process.h" 2 3
# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wprocess.h" 1 3
# 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wprocess.h" 3
#pragma pack(push, 8)






 intptr_t __cdecl _wexecl(
                   wchar_t const* _FileName,
                   wchar_t const* _ArgList,
            ...);

                 intptr_t __cdecl _wexecle(
                   wchar_t const* _FileName,
                   wchar_t const* _ArgList,
            ...);

                 intptr_t __cdecl _wexeclp(
                   wchar_t const* _FileName,
                   wchar_t const* _ArgList,
            ...);

                 intptr_t __cdecl _wexeclpe(
                   wchar_t const* _FileName,
                   wchar_t const* _ArgList,
            ...);

                 intptr_t __cdecl _wexecv(
                   wchar_t const* _FileName,
                   wchar_t const* const* _ArgList
            );

                 intptr_t __cdecl _wexecve(
                       wchar_t const* _FileName,
                       wchar_t const* const* _ArgList,
                       wchar_t const* const* _Env
            );

                 intptr_t __cdecl _wexecvp(
                   wchar_t const* _FileName,
                   wchar_t const* const* _ArgList
            );

                 intptr_t __cdecl _wexecvpe(
                       wchar_t const* _FileName,
                       wchar_t const* const* _ArgList,
                       wchar_t const* const* _Env
            );

                 intptr_t __cdecl _wspawnl(
                   int _Mode,
                   wchar_t const* _FileName,
                   wchar_t const* _ArgList,
            ...);

                 intptr_t __cdecl _wspawnle(
                   int _Mode,
                   wchar_t const* _FileName,
                   wchar_t const* _ArgList,
            ...);

                 intptr_t __cdecl _wspawnlp(
                   int _Mode,
                   wchar_t const* _FileName,
                   wchar_t const* _ArgList,
            ...);

                 intptr_t __cdecl _wspawnlpe(
                   int _Mode,
                   wchar_t const* _FileName,
                   wchar_t const* _ArgList,
            ...);

                 intptr_t __cdecl _wspawnv(
                   int _Mode,
                   wchar_t const* _FileName,
                   wchar_t const* const* _ArgList
            );

                 intptr_t __cdecl _wspawnve(
                       int _Mode,
                       wchar_t const* _FileName,
                       wchar_t const* const* _ArgList,
                       wchar_t const* const* _Env
            );

                 intptr_t __cdecl _wspawnvp(
                   int _Mode,
                   wchar_t const* _FileName,
                   wchar_t const* const* _ArgList
            );

                 intptr_t __cdecl _wspawnvpe(
                       int _Mode,
                       wchar_t const* _FileName,
                       wchar_t const* const* _ArgList,
                       wchar_t const* const* _Env
            );

                 int __cdecl _wsystem(
                       wchar_t const* _Command
            );






#pragma pack(pop)
# 16 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\process.h" 2 3

#pragma pack(push, 8)
# 38 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\process.h" 3
 __declspec(noreturn) void __cdecl exit( int _Code);
             __declspec(noreturn) void __cdecl _exit( int _Code);
             __declspec(noreturn) void __cdecl _Exit( int _Code);
             __declspec(noreturn) void __cdecl quick_exit( int _Code);
             __declspec(noreturn) void __cdecl abort(void);

             int __cdecl system( char const* _Command);

             void __cdecl _cexit(void);
             void __cdecl _c_exit(void);

    typedef void (__stdcall *_tls_callback_type)(void *, unsigned long, void *);
             void __cdecl _register_thread_local_exe_atexit_callback( _tls_callback_type _Callback);
# 80 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\process.h" 3
typedef void (__cdecl* _beginthread_proc_type )(void*);
typedef unsigned (__stdcall* _beginthreadex_proc_type)(void*);

         uintptr_t __cdecl _beginthread(
             _beginthread_proc_type _StartAddress,
             unsigned _StackSize,
             void* _ArgList
    );

         void __cdecl _endthread(void);


         uintptr_t __cdecl _beginthreadex(
              void* _Security,
              unsigned _StackSize,
              _beginthreadex_proc_type _StartAddress,
              void* _ArgList,
              unsigned _InitFlag,
              unsigned* _ThrdAddr
    );

         void __cdecl _endthreadex(
         unsigned _ReturnCode
    );





             int __cdecl _getpid(void);

             intptr_t __cdecl _cwait(
                  int* _TermStat,
                  intptr_t _ProcHandle,
                  int _Action
        );

             intptr_t __cdecl _execl(
               char const* _FileName,
               char const* _Arguments,
        ...);

             intptr_t __cdecl _execle(
               char const* _FileName,
               char const* _Arguments,
        ...);

             intptr_t __cdecl _execlp(
               char const* _FileName,
               char const* _Arguments,
        ...);

             intptr_t __cdecl _execlpe(
               char const* _FileName,
               char const* _Arguments,
        ...);

             intptr_t __cdecl _execv(
               char const* _FileName,
               char const* const* _Arguments
        );

             intptr_t __cdecl _execve(
                   char const* _FileName,
                   char const* const* _Arguments,
                   char const* const* _Environment
        );

             intptr_t __cdecl _execvp(
               char const* _FileName,
               char const* const* _Arguments
        );

             intptr_t __cdecl _execvpe(
                   char const* _FileName,
                   char const* const* _Arguments,
                   char const* const* _Environment
        );

             intptr_t __cdecl _spawnl(
               int _Mode,
               char const* _FileName,
               char const* _Arguments,
        ...);

             intptr_t __cdecl _spawnle(
               int _Mode,
               char const* _FileName,
               char const* _Arguments,
        ...);

             intptr_t __cdecl _spawnlp(
               int _Mode,
               char const* _FileName,
               char const* _Arguments,
        ...);

             intptr_t __cdecl _spawnlpe(
               int _Mode,
               char const* _FileName,
               char const* _Arguments,
        ...);

             intptr_t __cdecl _spawnv(
               int _Mode,
               char const* _FileName,
               char const* const* _Arguments
        );

             intptr_t __cdecl _spawnve(
                   int _Mode,
                   char const* _FileName,
                   char const* const* _Arguments,
                   char const* const* _Environment
        );

             intptr_t __cdecl _spawnvp(
               int _Mode,
               char const* _FileName,
               char const* const* _Arguments
        );

             intptr_t __cdecl _spawnvpe(
                   int _Mode,
                   char const* _FileName,
                   char const* const* _Arguments,
                   char const* const* _Environment
        );

    __declspec(deprecated("This function or variable has been superceded by newer library " "or operating system functionality. Consider using " "LoadLibrary" " " "instead. See online help for details."))
             intptr_t __cdecl _loaddll(
               char* _FileName
        );

    __declspec(deprecated("This function or variable has been superceded by newer library " "or operating system functionality. Consider using " "FreeLibrary" " " "instead. See online help for details."))
             int __cdecl _unloaddll(
             intptr_t _Handle
        );

    typedef int (__cdecl* _GetDllProcAddrProcType)(void);

    __declspec(deprecated("This function or variable has been superceded by newer library " "or operating system functionality. Consider using " "GetProcAddress" " " "instead. See online help for details."))
             _GetDllProcAddrProcType __cdecl _getdllprocaddr(
                   intptr_t _Handle,
                   char* _ProcedureName,
                   intptr_t _Ordinal
        );
# 245 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\process.h" 3
        __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_cwait" ". See online help for details."))
                 intptr_t __cdecl cwait(
                      int* _TermStat,
                      intptr_t _ProcHandle,
                      int _Action
            );

        __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_execl" ". See online help for details."))
                 intptr_t __cdecl execl(
                   char const* _FileName,
                   char const* _Arguments,
            ...);

        __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_execle" ". See online help for details."))
                 intptr_t __cdecl execle(
                   char const* _FileName,
                   char const* _Arguments,
            ...);

        __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_execlp" ". See online help for details."))
                 intptr_t __cdecl execlp(
                   char const* _FileName,
                   char const* _Arguments,
            ...);

        __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_execlpe" ". See online help for details."))
                 intptr_t __cdecl execlpe(
                   char const* _FileName,
                   char const* _Arguments,
            ...);

        __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_execv" ". See online help for details."))
                 intptr_t __cdecl execv(
                   char const* _FileName,
                   char const* const* _Arguments
            );

        __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_execve" ". See online help for details."))
                 intptr_t __cdecl execve(
                       char const* _FileName,
                       char const* const* _Arguments,
                       char const* const* _Environment
            );

        __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_execvp" ". See online help for details."))
                 intptr_t __cdecl execvp(
                   char const* _FileName,
                   char const* const* _Arguments
            );

        __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_execvpe" ". See online help for details."))
                 intptr_t __cdecl execvpe(
                       char const* _FileName,
                       char const* const* _Arguments,
                       char const* const* _Environment
            );

        __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_spawnl" ". See online help for details."))
                 intptr_t __cdecl spawnl(
                   int _Mode,
                   char const* _FileName,
                   char const* _Arguments,
            ...);

        __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_spawnle" ". See online help for details."))
                 intptr_t __cdecl spawnle(
                   int _Mode,
                   char const* _FileName,
                   char const* _Arguments,
            ...);

        __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_spawnlp" ". See online help for details."))
                 intptr_t __cdecl spawnlp(
                   int _Mode,
                   char const* _FileName,
                   char const* _Arguments,
            ...);

        __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_spawnlpe" ". See online help for details."))
                 intptr_t __cdecl spawnlpe(
                   int _Mode,
                   char const* _FileName,
                   char const* _Arguments,
            ...);

        __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_spawnv" ". See online help for details."))
                 intptr_t __cdecl spawnv(
                   int _Mode,
                   char const* _FileName,
                   char const* const* _Arguments);

        __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_spawnve" ". See online help for details."))
                 intptr_t __cdecl spawnve(
                       int _Mode,
                       char const* _FileName,
                       char const* const* _Arguments,
                       char const* const* _Environment
            );

        __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_spawnvp" ". See online help for details."))
                 intptr_t __cdecl spawnvp(
                   int _Mode,
                   char const* _FileName,
                   char const* const* _Arguments
            );

        __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_spawnvpe" ". See online help for details."))
                 intptr_t __cdecl spawnvpe(
                       int _Mode,
                       char const* _FileName,
                       char const* const* _Arguments,
                       char const* const* _Environment
            );

        __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_getpid" ". See online help for details."))
                 int __cdecl getpid(void);







#pragma pack(pop)
# 95 "D:\\Libraries\\include\\SDL2/SDL_thread.h" 2

typedef uintptr_t(__cdecl * pfnSDL_CurrentBeginThread)
                   (void *, unsigned, unsigned (__stdcall *func)(void *),
                    void * , unsigned, unsigned * );
typedef void (__cdecl * pfnSDL_CurrentEndThread) (unsigned code);




extern __declspec(dllexport) SDL_Thread *__cdecl
SDL_CreateThread(SDL_ThreadFunction fn, const char *name, void *data,
                 pfnSDL_CurrentBeginThread pfnBeginThread,
                 pfnSDL_CurrentEndThread pfnEndThread);

extern __declspec(dllexport) SDL_Thread *__cdecl
SDL_CreateThreadWithStackSize(int (__cdecl * fn) (void *),
                 const char *name, const size_t stacksize, void *data,
                 pfnSDL_CurrentBeginThread pfnBeginThread,
                 pfnSDL_CurrentEndThread pfnEndThread);
# 209 "D:\\Libraries\\include\\SDL2/SDL_thread.h"
extern __declspec(dllexport) const char *__cdecl SDL_GetThreadName(SDL_Thread *thread);




extern __declspec(dllexport) SDL_threadID __cdecl SDL_ThreadID(void);






extern __declspec(dllexport) SDL_threadID __cdecl SDL_GetThreadID(SDL_Thread * thread);




extern __declspec(dllexport) int __cdecl SDL_SetThreadPriority(SDL_ThreadPriority priority);
# 246 "D:\\Libraries\\include\\SDL2/SDL_thread.h"
extern __declspec(dllexport) void __cdecl SDL_WaitThread(SDL_Thread * thread, int *status);
# 274 "D:\\Libraries\\include\\SDL2/SDL_thread.h"
extern __declspec(dllexport) void __cdecl SDL_DetachThread(SDL_Thread * thread);
# 306 "D:\\Libraries\\include\\SDL2/SDL_thread.h"
extern __declspec(dllexport) SDL_TLSID __cdecl SDL_TLSCreate(void);
# 318 "D:\\Libraries\\include\\SDL2/SDL_thread.h"
extern __declspec(dllexport) void * __cdecl SDL_TLSGet(SDL_TLSID id);
# 332 "D:\\Libraries\\include\\SDL2/SDL_thread.h"
extern __declspec(dllexport) int __cdecl SDL_TLSSet(SDL_TLSID id, const void *value, void (__cdecl *destructor)(void*));







# 1 "D:\\Libraries\\include\\SDL2/close_code.h" 1
# 39 "D:\\Libraries\\include\\SDL2/close_code.h"
#pragma pack(pop)
# 340 "D:\\Libraries\\include\\SDL2/SDL_thread.h" 2
# 36 "D:\\Libraries\\include\\SDL2/SDL_audio.h" 2
# 1 "D:\\Libraries\\include\\SDL2/SDL_rwops.h" 1
# 35 "D:\\Libraries\\include\\SDL2/SDL_rwops.h"
# 1 "D:\\Libraries\\include\\SDL2/begin_code.h" 1
# 106 "D:\\Libraries\\include\\SDL2/begin_code.h"
#pragma warning(disable: 4103)


#pragma clang diagnostic ignored "-Wpragma-pack"






#pragma pack(push,8)
# 36 "D:\\Libraries\\include\\SDL2/SDL_rwops.h" 2
# 52 "D:\\Libraries\\include\\SDL2/SDL_rwops.h"
typedef struct SDL_RWops
{



    Sint64 (__cdecl * size) (struct SDL_RWops * context);







    Sint64 (__cdecl * seek) (struct SDL_RWops * context, Sint64 offset,
                             int whence);







    size_t (__cdecl * read) (struct SDL_RWops * context, void *ptr,
                             size_t size, size_t maxnum);







    size_t (__cdecl * write) (struct SDL_RWops * context, const void *ptr,
                              size_t size, size_t num);






    int (__cdecl * close) (struct SDL_RWops * context);

    Uint32 type;
    union
    {
# 110 "D:\\Libraries\\include\\SDL2/SDL_rwops.h"
        struct
        {
            SDL_bool append;
            void *h;
            struct
            {
                void *data;
                size_t size;
                size_t left;
            } buffer;
        } windowsio;
# 130 "D:\\Libraries\\include\\SDL2/SDL_rwops.h"
        struct
        {
            Uint8 *base;
            Uint8 *here;
            Uint8 *stop;
        } mem;
        struct
        {
            void *data1;
            void *data2;
        } unknown;
    } hidden;

} SDL_RWops;
# 153 "D:\\Libraries\\include\\SDL2/SDL_rwops.h"
extern __declspec(dllexport) SDL_RWops *__cdecl SDL_RWFromFile(const char *file,
                                                  const char *mode);





extern __declspec(dllexport) SDL_RWops *__cdecl SDL_RWFromFP(void * fp,
                                                SDL_bool autoclose);


extern __declspec(dllexport) SDL_RWops *__cdecl SDL_RWFromMem(void *mem, int size);
extern __declspec(dllexport) SDL_RWops *__cdecl SDL_RWFromConstMem(const void *mem,
                                                      int size);




extern __declspec(dllexport) SDL_RWops *__cdecl SDL_AllocRW(void);
extern __declspec(dllexport) void __cdecl SDL_FreeRW(SDL_RWops * area);
# 181 "D:\\Libraries\\include\\SDL2/SDL_rwops.h"
extern __declspec(dllexport) Sint64 __cdecl SDL_RWsize(SDL_RWops *context);







extern __declspec(dllexport) Sint64 __cdecl SDL_RWseek(SDL_RWops *context,
                                          Sint64 offset, int whence);




extern __declspec(dllexport) Sint64 __cdecl SDL_RWtell(SDL_RWops *context);







extern __declspec(dllexport) size_t __cdecl SDL_RWread(SDL_RWops *context,
                                          void *ptr, size_t size, size_t maxnum);







extern __declspec(dllexport) size_t __cdecl SDL_RWwrite(SDL_RWops *context,
                                           const void *ptr, size_t size, size_t num);






extern __declspec(dllexport) int __cdecl SDL_RWclose(SDL_RWops *context);
# 235 "D:\\Libraries\\include\\SDL2/SDL_rwops.h"
extern __declspec(dllexport) void *__cdecl SDL_LoadFile_RW(SDL_RWops * src, size_t *datasize,
                                                    int freesrc);
# 251 "D:\\Libraries\\include\\SDL2/SDL_rwops.h"
extern __declspec(dllexport) void *__cdecl SDL_LoadFile(const char *file, size_t *datasize);







extern __declspec(dllexport) Uint8 __cdecl SDL_ReadU8(SDL_RWops * src);
extern __declspec(dllexport) Uint16 __cdecl SDL_ReadLE16(SDL_RWops * src);
extern __declspec(dllexport) Uint16 __cdecl SDL_ReadBE16(SDL_RWops * src);
extern __declspec(dllexport) Uint32 __cdecl SDL_ReadLE32(SDL_RWops * src);
extern __declspec(dllexport) Uint32 __cdecl SDL_ReadBE32(SDL_RWops * src);
extern __declspec(dllexport) Uint64 __cdecl SDL_ReadLE64(SDL_RWops * src);
extern __declspec(dllexport) Uint64 __cdecl SDL_ReadBE64(SDL_RWops * src);
# 274 "D:\\Libraries\\include\\SDL2/SDL_rwops.h"
extern __declspec(dllexport) size_t __cdecl SDL_WriteU8(SDL_RWops * dst, Uint8 value);
extern __declspec(dllexport) size_t __cdecl SDL_WriteLE16(SDL_RWops * dst, Uint16 value);
extern __declspec(dllexport) size_t __cdecl SDL_WriteBE16(SDL_RWops * dst, Uint16 value);
extern __declspec(dllexport) size_t __cdecl SDL_WriteLE32(SDL_RWops * dst, Uint32 value);
extern __declspec(dllexport) size_t __cdecl SDL_WriteBE32(SDL_RWops * dst, Uint32 value);
extern __declspec(dllexport) size_t __cdecl SDL_WriteLE64(SDL_RWops * dst, Uint64 value);
extern __declspec(dllexport) size_t __cdecl SDL_WriteBE64(SDL_RWops * dst, Uint64 value);







# 1 "D:\\Libraries\\include\\SDL2/close_code.h" 1
# 39 "D:\\Libraries\\include\\SDL2/close_code.h"
#pragma pack(pop)
# 288 "D:\\Libraries\\include\\SDL2/SDL_rwops.h" 2
# 37 "D:\\Libraries\\include\\SDL2/SDL_audio.h" 2

# 1 "D:\\Libraries\\include\\SDL2/begin_code.h" 1
# 106 "D:\\Libraries\\include\\SDL2/begin_code.h"
#pragma warning(disable: 4103)


#pragma clang diagnostic ignored "-Wpragma-pack"






#pragma pack(push,8)
# 39 "D:\\Libraries\\include\\SDL2/SDL_audio.h" 2
# 64 "D:\\Libraries\\include\\SDL2/SDL_audio.h"
typedef Uint16 SDL_AudioFormat;
# 163 "D:\\Libraries\\include\\SDL2/SDL_audio.h"
typedef void (__cdecl * SDL_AudioCallback) (void *userdata, Uint8 * stream,
                                            int len);
# 178 "D:\\Libraries\\include\\SDL2/SDL_audio.h"
typedef struct SDL_AudioSpec
{
    int freq;
    SDL_AudioFormat format;
    Uint8 channels;
    Uint8 silence;
    Uint16 samples;
    Uint16 padding;
    Uint32 size;
    SDL_AudioCallback callback;
    void *userdata;
} SDL_AudioSpec;


struct SDL_AudioCVT;
typedef void (__cdecl * SDL_AudioFilter) (struct SDL_AudioCVT * cvt,
                                          SDL_AudioFormat format);
# 226 "D:\\Libraries\\include\\SDL2/SDL_audio.h"
typedef struct SDL_AudioCVT
{
    int needed;
    SDL_AudioFormat src_format;
    SDL_AudioFormat dst_format;
    double rate_incr;
    Uint8 *buf;
    int len;
    int len_cvt;
    int len_mult;
    double len_ratio;
    SDL_AudioFilter filters[9 + 1];
    int filter_index;
} SDL_AudioCVT;
# 251 "D:\\Libraries\\include\\SDL2/SDL_audio.h"
extern __declspec(dllexport) int __cdecl SDL_GetNumAudioDrivers(void);
extern __declspec(dllexport) const char *__cdecl SDL_GetAudioDriver(int index);
# 263 "D:\\Libraries\\include\\SDL2/SDL_audio.h"
extern __declspec(dllexport) int __cdecl SDL_AudioInit(const char *driver_name);
extern __declspec(dllexport) void __cdecl SDL_AudioQuit(void);






extern __declspec(dllexport) const char *__cdecl SDL_GetCurrentAudioDriver(void);
# 318 "D:\\Libraries\\include\\SDL2/SDL_audio.h"
extern __declspec(dllexport) int __cdecl SDL_OpenAudio(SDL_AudioSpec * desired,
                                          SDL_AudioSpec * obtained);
# 330 "D:\\Libraries\\include\\SDL2/SDL_audio.h"
typedef Uint32 SDL_AudioDeviceID;
# 344 "D:\\Libraries\\include\\SDL2/SDL_audio.h"
extern __declspec(dllexport) int __cdecl SDL_GetNumAudioDevices(int iscapture);
# 359 "D:\\Libraries\\include\\SDL2/SDL_audio.h"
extern __declspec(dllexport) const char *__cdecl SDL_GetAudioDeviceName(int index,
                                                           int iscapture);
# 376 "D:\\Libraries\\include\\SDL2/SDL_audio.h"
extern __declspec(dllexport) SDL_AudioDeviceID __cdecl SDL_OpenAudioDevice(const char
                                                              *device,
                                                              int iscapture,
                                                              const
                                                              SDL_AudioSpec *
                                                              desired,
                                                              SDL_AudioSpec *
                                                              obtained,
                                                              int
                                                              allowed_changes);
# 395 "D:\\Libraries\\include\\SDL2/SDL_audio.h"
typedef enum
{
    SDL_AUDIO_STOPPED = 0,
    SDL_AUDIO_PLAYING,
    SDL_AUDIO_PAUSED
} SDL_AudioStatus;
extern __declspec(dllexport) SDL_AudioStatus __cdecl SDL_GetAudioStatus(void);

extern __declspec(dllexport) SDL_AudioStatus __cdecl
SDL_GetAudioDeviceStatus(SDL_AudioDeviceID dev);
# 417 "D:\\Libraries\\include\\SDL2/SDL_audio.h"
extern __declspec(dllexport) void __cdecl SDL_PauseAudio(int pause_on);
extern __declspec(dllexport) void __cdecl SDL_PauseAudioDevice(SDL_AudioDeviceID dev,
                                                  int pause_on);
# 474 "D:\\Libraries\\include\\SDL2/SDL_audio.h"
extern __declspec(dllexport) SDL_AudioSpec *__cdecl SDL_LoadWAV_RW(SDL_RWops * src,
                                                      int freesrc,
                                                      SDL_AudioSpec * spec,
                                                      Uint8 ** audio_buf,
                                                      Uint32 * audio_len);
# 490 "D:\\Libraries\\include\\SDL2/SDL_audio.h"
extern __declspec(dllexport) void __cdecl SDL_FreeWAV(Uint8 * audio_buf);
# 501 "D:\\Libraries\\include\\SDL2/SDL_audio.h"
extern __declspec(dllexport) int __cdecl SDL_BuildAudioCVT(SDL_AudioCVT * cvt,
                                              SDL_AudioFormat src_format,
                                              Uint8 src_channels,
                                              int src_rate,
                                              SDL_AudioFormat dst_format,
                                              Uint8 dst_channels,
                                              int dst_rate);
# 521 "D:\\Libraries\\include\\SDL2/SDL_audio.h"
extern __declspec(dllexport) int __cdecl SDL_ConvertAudio(SDL_AudioCVT * cvt);
# 531 "D:\\Libraries\\include\\SDL2/SDL_audio.h"
struct _SDL_AudioStream;
typedef struct _SDL_AudioStream SDL_AudioStream;
# 552 "D:\\Libraries\\include\\SDL2/SDL_audio.h"
extern __declspec(dllexport) SDL_AudioStream * __cdecl SDL_NewAudioStream(const SDL_AudioFormat src_format,
                                           const Uint8 src_channels,
                                           const int src_rate,
                                           const SDL_AudioFormat dst_format,
                                           const Uint8 dst_channels,
                                           const int dst_rate);
# 574 "D:\\Libraries\\include\\SDL2/SDL_audio.h"
extern __declspec(dllexport) int __cdecl SDL_AudioStreamPut(SDL_AudioStream *stream, const void *buf, int len);
# 591 "D:\\Libraries\\include\\SDL2/SDL_audio.h"
extern __declspec(dllexport) int __cdecl SDL_AudioStreamGet(SDL_AudioStream *stream, void *buf, int len);
# 606 "D:\\Libraries\\include\\SDL2/SDL_audio.h"
extern __declspec(dllexport) int __cdecl SDL_AudioStreamAvailable(SDL_AudioStream *stream);
# 623 "D:\\Libraries\\include\\SDL2/SDL_audio.h"
extern __declspec(dllexport) int __cdecl SDL_AudioStreamFlush(SDL_AudioStream *stream);
# 635 "D:\\Libraries\\include\\SDL2/SDL_audio.h"
extern __declspec(dllexport) void __cdecl SDL_AudioStreamClear(SDL_AudioStream *stream);
# 647 "D:\\Libraries\\include\\SDL2/SDL_audio.h"
extern __declspec(dllexport) void __cdecl SDL_FreeAudioStream(SDL_AudioStream *stream);
# 657 "D:\\Libraries\\include\\SDL2/SDL_audio.h"
extern __declspec(dllexport) void __cdecl SDL_MixAudio(Uint8 * dst, const Uint8 * src,
                                          Uint32 len, int volume);






extern __declspec(dllexport) void __cdecl SDL_MixAudioFormat(Uint8 * dst,
                                                const Uint8 * src,
                                                SDL_AudioFormat format,
                                                Uint32 len, int volume);
# 709 "D:\\Libraries\\include\\SDL2/SDL_audio.h"
extern __declspec(dllexport) int __cdecl SDL_QueueAudio(SDL_AudioDeviceID dev, const void *data, Uint32 len);
# 755 "D:\\Libraries\\include\\SDL2/SDL_audio.h"
extern __declspec(dllexport) Uint32 __cdecl SDL_DequeueAudio(SDL_AudioDeviceID dev, void *data, Uint32 len);
# 791 "D:\\Libraries\\include\\SDL2/SDL_audio.h"
extern __declspec(dllexport) Uint32 __cdecl SDL_GetQueuedAudioSize(SDL_AudioDeviceID dev);
# 827 "D:\\Libraries\\include\\SDL2/SDL_audio.h"
extern __declspec(dllexport) void __cdecl SDL_ClearQueuedAudio(SDL_AudioDeviceID dev);
# 839 "D:\\Libraries\\include\\SDL2/SDL_audio.h"
extern __declspec(dllexport) void __cdecl SDL_LockAudio(void);
extern __declspec(dllexport) void __cdecl SDL_LockAudioDevice(SDL_AudioDeviceID dev);
extern __declspec(dllexport) void __cdecl SDL_UnlockAudio(void);
extern __declspec(dllexport) void __cdecl SDL_UnlockAudioDevice(SDL_AudioDeviceID dev);





extern __declspec(dllexport) void __cdecl SDL_CloseAudio(void);
extern __declspec(dllexport) void __cdecl SDL_CloseAudioDevice(SDL_AudioDeviceID dev);






# 1 "D:\\Libraries\\include\\SDL2/close_code.h" 1
# 39 "D:\\Libraries\\include\\SDL2/close_code.h"
#pragma pack(pop)
# 856 "D:\\Libraries\\include\\SDL2/SDL_audio.h" 2
# 37 "D:\\Libraries\\include\\SDL2\\SDL.h" 2
# 1 "D:\\Libraries\\include\\SDL2/SDL_clipboard.h" 1
# 33 "D:\\Libraries\\include\\SDL2/SDL_clipboard.h"
# 1 "D:\\Libraries\\include\\SDL2/begin_code.h" 1
# 106 "D:\\Libraries\\include\\SDL2/begin_code.h"
#pragma warning(disable: 4103)


#pragma clang diagnostic ignored "-Wpragma-pack"






#pragma pack(push,8)
# 34 "D:\\Libraries\\include\\SDL2/SDL_clipboard.h" 2
# 46 "D:\\Libraries\\include\\SDL2/SDL_clipboard.h"
extern __declspec(dllexport) int __cdecl SDL_SetClipboardText(const char *text);






extern __declspec(dllexport) char * __cdecl SDL_GetClipboardText(void);






extern __declspec(dllexport) SDL_bool __cdecl SDL_HasClipboardText(void);







# 1 "D:\\Libraries\\include\\SDL2/close_code.h" 1
# 39 "D:\\Libraries\\include\\SDL2/close_code.h"
#pragma pack(pop)
# 68 "D:\\Libraries\\include\\SDL2/SDL_clipboard.h" 2
# 38 "D:\\Libraries\\include\\SDL2\\SDL.h" 2
# 1 "D:\\Libraries\\include\\SDL2/SDL_cpuinfo.h" 1
# 103 "D:\\Libraries\\include\\SDL2/SDL_cpuinfo.h"
# 1 "D:\\Libraries\\include\\SDL2/begin_code.h" 1
# 106 "D:\\Libraries\\include\\SDL2/begin_code.h"
#pragma warning(disable: 4103)


#pragma clang diagnostic ignored "-Wpragma-pack"






#pragma pack(push,8)
# 104 "D:\\Libraries\\include\\SDL2/SDL_cpuinfo.h" 2
# 119 "D:\\Libraries\\include\\SDL2/SDL_cpuinfo.h"
extern __declspec(dllexport) int __cdecl SDL_GetCPUCount(void);







extern __declspec(dllexport) int __cdecl SDL_GetCPUCacheLineSize(void);




extern __declspec(dllexport) SDL_bool __cdecl SDL_HasRDTSC(void);




extern __declspec(dllexport) SDL_bool __cdecl SDL_HasAltiVec(void);




extern __declspec(dllexport) SDL_bool __cdecl SDL_HasMMX(void);




extern __declspec(dllexport) SDL_bool __cdecl SDL_Has3DNow(void);




extern __declspec(dllexport) SDL_bool __cdecl SDL_HasSSE(void);




extern __declspec(dllexport) SDL_bool __cdecl SDL_HasSSE2(void);




extern __declspec(dllexport) SDL_bool __cdecl SDL_HasSSE3(void);




extern __declspec(dllexport) SDL_bool __cdecl SDL_HasSSE41(void);




extern __declspec(dllexport) SDL_bool __cdecl SDL_HasSSE42(void);




extern __declspec(dllexport) SDL_bool __cdecl SDL_HasAVX(void);




extern __declspec(dllexport) SDL_bool __cdecl SDL_HasAVX2(void);




extern __declspec(dllexport) SDL_bool __cdecl SDL_HasAVX512F(void);




extern __declspec(dllexport) SDL_bool __cdecl SDL_HasNEON(void);




extern __declspec(dllexport) int __cdecl SDL_GetSystemRAM(void);
# 211 "D:\\Libraries\\include\\SDL2/SDL_cpuinfo.h"
extern __declspec(dllexport) size_t __cdecl SDL_SIMDGetAlignment(void);
# 246 "D:\\Libraries\\include\\SDL2/SDL_cpuinfo.h"
extern __declspec(dllexport) void * __cdecl SDL_SIMDAlloc(const size_t len);
# 259 "D:\\Libraries\\include\\SDL2/SDL_cpuinfo.h"
extern __declspec(dllexport) void __cdecl SDL_SIMDFree(void *ptr);







# 1 "D:\\Libraries\\include\\SDL2/close_code.h" 1
# 39 "D:\\Libraries\\include\\SDL2/close_code.h"
#pragma pack(pop)
# 267 "D:\\Libraries\\include\\SDL2/SDL_cpuinfo.h" 2
# 39 "D:\\Libraries\\include\\SDL2\\SDL.h" 2


# 1 "D:\\Libraries\\include\\SDL2/SDL_events.h" 1
# 33 "D:\\Libraries\\include\\SDL2/SDL_events.h"
# 1 "D:\\Libraries\\include\\SDL2/SDL_video.h" 1
# 32 "D:\\Libraries\\include\\SDL2/SDL_video.h"
# 1 "D:\\Libraries\\include\\SDL2/SDL_pixels.h" 1
# 34 "D:\\Libraries\\include\\SDL2/SDL_pixels.h"
# 1 "D:\\Libraries\\include\\SDL2/begin_code.h" 1
# 106 "D:\\Libraries\\include\\SDL2/begin_code.h"
#pragma warning(disable: 4103)


#pragma clang diagnostic ignored "-Wpragma-pack"






#pragma pack(push,8)
# 35 "D:\\Libraries\\include\\SDL2/SDL_pixels.h" 2
# 51 "D:\\Libraries\\include\\SDL2/SDL_pixels.h"
enum
{
    SDL_PIXELTYPE_UNKNOWN,
    SDL_PIXELTYPE_INDEX1,
    SDL_PIXELTYPE_INDEX4,
    SDL_PIXELTYPE_INDEX8,
    SDL_PIXELTYPE_PACKED8,
    SDL_PIXELTYPE_PACKED16,
    SDL_PIXELTYPE_PACKED32,
    SDL_PIXELTYPE_ARRAYU8,
    SDL_PIXELTYPE_ARRAYU16,
    SDL_PIXELTYPE_ARRAYU32,
    SDL_PIXELTYPE_ARRAYF16,
    SDL_PIXELTYPE_ARRAYF32
};


enum
{
    SDL_BITMAPORDER_NONE,
    SDL_BITMAPORDER_4321,
    SDL_BITMAPORDER_1234
};


enum
{
    SDL_PACKEDORDER_NONE,
    SDL_PACKEDORDER_XRGB,
    SDL_PACKEDORDER_RGBX,
    SDL_PACKEDORDER_ARGB,
    SDL_PACKEDORDER_RGBA,
    SDL_PACKEDORDER_XBGR,
    SDL_PACKEDORDER_BGRX,
    SDL_PACKEDORDER_ABGR,
    SDL_PACKEDORDER_BGRA
};




enum
{
    SDL_ARRAYORDER_NONE,
    SDL_ARRAYORDER_RGB,
    SDL_ARRAYORDER_RGBA,
    SDL_ARRAYORDER_ARGB,
    SDL_ARRAYORDER_BGR,
    SDL_ARRAYORDER_BGRA,
    SDL_ARRAYORDER_ABGR
};


enum
{
    SDL_PACKEDLAYOUT_NONE,
    SDL_PACKEDLAYOUT_332,
    SDL_PACKEDLAYOUT_4444,
    SDL_PACKEDLAYOUT_1555,
    SDL_PACKEDLAYOUT_5551,
    SDL_PACKEDLAYOUT_565,
    SDL_PACKEDLAYOUT_8888,
    SDL_PACKEDLAYOUT_2101010,
    SDL_PACKEDLAYOUT_1010102
};
# 171 "D:\\Libraries\\include\\SDL2/SDL_pixels.h"
typedef enum
{
    SDL_PIXELFORMAT_UNKNOWN,
    SDL_PIXELFORMAT_INDEX1LSB =
        ((1 << 28) | ((SDL_PIXELTYPE_INDEX1) << 24) | ((SDL_BITMAPORDER_4321) << 20) | ((0) << 16) | ((1) << 8) | ((0) << 0)),

    SDL_PIXELFORMAT_INDEX1MSB =
        ((1 << 28) | ((SDL_PIXELTYPE_INDEX1) << 24) | ((SDL_BITMAPORDER_1234) << 20) | ((0) << 16) | ((1) << 8) | ((0) << 0)),

    SDL_PIXELFORMAT_INDEX4LSB =
        ((1 << 28) | ((SDL_PIXELTYPE_INDEX4) << 24) | ((SDL_BITMAPORDER_4321) << 20) | ((0) << 16) | ((4) << 8) | ((0) << 0)),

    SDL_PIXELFORMAT_INDEX4MSB =
        ((1 << 28) | ((SDL_PIXELTYPE_INDEX4) << 24) | ((SDL_BITMAPORDER_1234) << 20) | ((0) << 16) | ((4) << 8) | ((0) << 0)),

    SDL_PIXELFORMAT_INDEX8 =
        ((1 << 28) | ((SDL_PIXELTYPE_INDEX8) << 24) | ((0) << 20) | ((0) << 16) | ((8) << 8) | ((1) << 0)),
    SDL_PIXELFORMAT_RGB332 =
        ((1 << 28) | ((SDL_PIXELTYPE_PACKED8) << 24) | ((SDL_PACKEDORDER_XRGB) << 20) | ((SDL_PACKEDLAYOUT_332) << 16) | ((8) << 8) | ((1) << 0)),

    SDL_PIXELFORMAT_RGB444 =
        ((1 << 28) | ((SDL_PIXELTYPE_PACKED16) << 24) | ((SDL_PACKEDORDER_XRGB) << 20) | ((SDL_PACKEDLAYOUT_4444) << 16) | ((12) << 8) | ((2) << 0)),

    SDL_PIXELFORMAT_RGB555 =
        ((1 << 28) | ((SDL_PIXELTYPE_PACKED16) << 24) | ((SDL_PACKEDORDER_XRGB) << 20) | ((SDL_PACKEDLAYOUT_1555) << 16) | ((15) << 8) | ((2) << 0)),

    SDL_PIXELFORMAT_BGR555 =
        ((1 << 28) | ((SDL_PIXELTYPE_PACKED16) << 24) | ((SDL_PACKEDORDER_XBGR) << 20) | ((SDL_PACKEDLAYOUT_1555) << 16) | ((15) << 8) | ((2) << 0)),

    SDL_PIXELFORMAT_ARGB4444 =
        ((1 << 28) | ((SDL_PIXELTYPE_PACKED16) << 24) | ((SDL_PACKEDORDER_ARGB) << 20) | ((SDL_PACKEDLAYOUT_4444) << 16) | ((16) << 8) | ((2) << 0)),

    SDL_PIXELFORMAT_RGBA4444 =
        ((1 << 28) | ((SDL_PIXELTYPE_PACKED16) << 24) | ((SDL_PACKEDORDER_RGBA) << 20) | ((SDL_PACKEDLAYOUT_4444) << 16) | ((16) << 8) | ((2) << 0)),

    SDL_PIXELFORMAT_ABGR4444 =
        ((1 << 28) | ((SDL_PIXELTYPE_PACKED16) << 24) | ((SDL_PACKEDORDER_ABGR) << 20) | ((SDL_PACKEDLAYOUT_4444) << 16) | ((16) << 8) | ((2) << 0)),

    SDL_PIXELFORMAT_BGRA4444 =
        ((1 << 28) | ((SDL_PIXELTYPE_PACKED16) << 24) | ((SDL_PACKEDORDER_BGRA) << 20) | ((SDL_PACKEDLAYOUT_4444) << 16) | ((16) << 8) | ((2) << 0)),

    SDL_PIXELFORMAT_ARGB1555 =
        ((1 << 28) | ((SDL_PIXELTYPE_PACKED16) << 24) | ((SDL_PACKEDORDER_ARGB) << 20) | ((SDL_PACKEDLAYOUT_1555) << 16) | ((16) << 8) | ((2) << 0)),

    SDL_PIXELFORMAT_RGBA5551 =
        ((1 << 28) | ((SDL_PIXELTYPE_PACKED16) << 24) | ((SDL_PACKEDORDER_RGBA) << 20) | ((SDL_PACKEDLAYOUT_5551) << 16) | ((16) << 8) | ((2) << 0)),

    SDL_PIXELFORMAT_ABGR1555 =
        ((1 << 28) | ((SDL_PIXELTYPE_PACKED16) << 24) | ((SDL_PACKEDORDER_ABGR) << 20) | ((SDL_PACKEDLAYOUT_1555) << 16) | ((16) << 8) | ((2) << 0)),

    SDL_PIXELFORMAT_BGRA5551 =
        ((1 << 28) | ((SDL_PIXELTYPE_PACKED16) << 24) | ((SDL_PACKEDORDER_BGRA) << 20) | ((SDL_PACKEDLAYOUT_5551) << 16) | ((16) << 8) | ((2) << 0)),

    SDL_PIXELFORMAT_RGB565 =
        ((1 << 28) | ((SDL_PIXELTYPE_PACKED16) << 24) | ((SDL_PACKEDORDER_XRGB) << 20) | ((SDL_PACKEDLAYOUT_565) << 16) | ((16) << 8) | ((2) << 0)),

    SDL_PIXELFORMAT_BGR565 =
        ((1 << 28) | ((SDL_PIXELTYPE_PACKED16) << 24) | ((SDL_PACKEDORDER_XBGR) << 20) | ((SDL_PACKEDLAYOUT_565) << 16) | ((16) << 8) | ((2) << 0)),

    SDL_PIXELFORMAT_RGB24 =
        ((1 << 28) | ((SDL_PIXELTYPE_ARRAYU8) << 24) | ((SDL_ARRAYORDER_RGB) << 20) | ((0) << 16) | ((24) << 8) | ((3) << 0)),

    SDL_PIXELFORMAT_BGR24 =
        ((1 << 28) | ((SDL_PIXELTYPE_ARRAYU8) << 24) | ((SDL_ARRAYORDER_BGR) << 20) | ((0) << 16) | ((24) << 8) | ((3) << 0)),

    SDL_PIXELFORMAT_RGB888 =
        ((1 << 28) | ((SDL_PIXELTYPE_PACKED32) << 24) | ((SDL_PACKEDORDER_XRGB) << 20) | ((SDL_PACKEDLAYOUT_8888) << 16) | ((24) << 8) | ((4) << 0)),

    SDL_PIXELFORMAT_RGBX8888 =
        ((1 << 28) | ((SDL_PIXELTYPE_PACKED32) << 24) | ((SDL_PACKEDORDER_RGBX) << 20) | ((SDL_PACKEDLAYOUT_8888) << 16) | ((24) << 8) | ((4) << 0)),

    SDL_PIXELFORMAT_BGR888 =
        ((1 << 28) | ((SDL_PIXELTYPE_PACKED32) << 24) | ((SDL_PACKEDORDER_XBGR) << 20) | ((SDL_PACKEDLAYOUT_8888) << 16) | ((24) << 8) | ((4) << 0)),

    SDL_PIXELFORMAT_BGRX8888 =
        ((1 << 28) | ((SDL_PIXELTYPE_PACKED32) << 24) | ((SDL_PACKEDORDER_BGRX) << 20) | ((SDL_PACKEDLAYOUT_8888) << 16) | ((24) << 8) | ((4) << 0)),

    SDL_PIXELFORMAT_ARGB8888 =
        ((1 << 28) | ((SDL_PIXELTYPE_PACKED32) << 24) | ((SDL_PACKEDORDER_ARGB) << 20) | ((SDL_PACKEDLAYOUT_8888) << 16) | ((32) << 8) | ((4) << 0)),

    SDL_PIXELFORMAT_RGBA8888 =
        ((1 << 28) | ((SDL_PIXELTYPE_PACKED32) << 24) | ((SDL_PACKEDORDER_RGBA) << 20) | ((SDL_PACKEDLAYOUT_8888) << 16) | ((32) << 8) | ((4) << 0)),

    SDL_PIXELFORMAT_ABGR8888 =
        ((1 << 28) | ((SDL_PIXELTYPE_PACKED32) << 24) | ((SDL_PACKEDORDER_ABGR) << 20) | ((SDL_PACKEDLAYOUT_8888) << 16) | ((32) << 8) | ((4) << 0)),

    SDL_PIXELFORMAT_BGRA8888 =
        ((1 << 28) | ((SDL_PIXELTYPE_PACKED32) << 24) | ((SDL_PACKEDORDER_BGRA) << 20) | ((SDL_PACKEDLAYOUT_8888) << 16) | ((32) << 8) | ((4) << 0)),

    SDL_PIXELFORMAT_ARGB2101010 =
        ((1 << 28) | ((SDL_PIXELTYPE_PACKED32) << 24) | ((SDL_PACKEDORDER_ARGB) << 20) | ((SDL_PACKEDLAYOUT_2101010) << 16) | ((32) << 8) | ((4) << 0)),
# 271 "D:\\Libraries\\include\\SDL2/SDL_pixels.h"
    SDL_PIXELFORMAT_RGBA32 = SDL_PIXELFORMAT_ABGR8888,
    SDL_PIXELFORMAT_ARGB32 = SDL_PIXELFORMAT_BGRA8888,
    SDL_PIXELFORMAT_BGRA32 = SDL_PIXELFORMAT_ARGB8888,
    SDL_PIXELFORMAT_ABGR32 = SDL_PIXELFORMAT_RGBA8888,


    SDL_PIXELFORMAT_YV12 =
        ((((Uint32)(((Uint8)(('Y'))))) << 0) | (((Uint32)(((Uint8)(('V'))))) << 8) | (((Uint32)(((Uint8)(('1'))))) << 16) | (((Uint32)(((Uint8)(('2'))))) << 24)),
    SDL_PIXELFORMAT_IYUV =
        ((((Uint32)(((Uint8)(('I'))))) << 0) | (((Uint32)(((Uint8)(('Y'))))) << 8) | (((Uint32)(((Uint8)(('U'))))) << 16) | (((Uint32)(((Uint8)(('V'))))) << 24)),
    SDL_PIXELFORMAT_YUY2 =
        ((((Uint32)(((Uint8)(('Y'))))) << 0) | (((Uint32)(((Uint8)(('U'))))) << 8) | (((Uint32)(((Uint8)(('Y'))))) << 16) | (((Uint32)(((Uint8)(('2'))))) << 24)),
    SDL_PIXELFORMAT_UYVY =
        ((((Uint32)(((Uint8)(('U'))))) << 0) | (((Uint32)(((Uint8)(('Y'))))) << 8) | (((Uint32)(((Uint8)(('V'))))) << 16) | (((Uint32)(((Uint8)(('Y'))))) << 24)),
    SDL_PIXELFORMAT_YVYU =
        ((((Uint32)(((Uint8)(('Y'))))) << 0) | (((Uint32)(((Uint8)(('V'))))) << 8) | (((Uint32)(((Uint8)(('Y'))))) << 16) | (((Uint32)(((Uint8)(('U'))))) << 24)),
    SDL_PIXELFORMAT_NV12 =
        ((((Uint32)(((Uint8)(('N'))))) << 0) | (((Uint32)(((Uint8)(('V'))))) << 8) | (((Uint32)(((Uint8)(('1'))))) << 16) | (((Uint32)(((Uint8)(('2'))))) << 24)),
    SDL_PIXELFORMAT_NV21 =
        ((((Uint32)(((Uint8)(('N'))))) << 0) | (((Uint32)(((Uint8)(('V'))))) << 8) | (((Uint32)(((Uint8)(('2'))))) << 16) | (((Uint32)(((Uint8)(('1'))))) << 24)),
    SDL_PIXELFORMAT_EXTERNAL_OES =
        ((((Uint32)(((Uint8)(('O'))))) << 0) | (((Uint32)(((Uint8)(('E'))))) << 8) | (((Uint32)(((Uint8)(('S'))))) << 16) | (((Uint32)(((Uint8)((' '))))) << 24))
} SDL_PixelFormatEnum;

typedef struct SDL_Color
{
    Uint8 r;
    Uint8 g;
    Uint8 b;
    Uint8 a;
} SDL_Color;


typedef struct SDL_Palette
{
    int ncolors;
    SDL_Color *colors;
    Uint32 version;
    int refcount;
} SDL_Palette;




typedef struct SDL_PixelFormat
{
    Uint32 format;
    SDL_Palette *palette;
    Uint8 BitsPerPixel;
    Uint8 BytesPerPixel;
    Uint8 padding[2];
    Uint32 Rmask;
    Uint32 Gmask;
    Uint32 Bmask;
    Uint32 Amask;
    Uint8 Rloss;
    Uint8 Gloss;
    Uint8 Bloss;
    Uint8 Aloss;
    Uint8 Rshift;
    Uint8 Gshift;
    Uint8 Bshift;
    Uint8 Ashift;
    int refcount;
    struct SDL_PixelFormat *next;
} SDL_PixelFormat;




extern __declspec(dllexport) const char* __cdecl SDL_GetPixelFormatName(Uint32 format);
# 350 "D:\\Libraries\\include\\SDL2/SDL_pixels.h"
extern __declspec(dllexport) SDL_bool __cdecl SDL_PixelFormatEnumToMasks(Uint32 format,
                                                            int *bpp,
                                                            Uint32 * Rmask,
                                                            Uint32 * Gmask,
                                                            Uint32 * Bmask,
                                                            Uint32 * Amask);
# 365 "D:\\Libraries\\include\\SDL2/SDL_pixels.h"
extern __declspec(dllexport) Uint32 __cdecl SDL_MasksToPixelFormatEnum(int bpp,
                                                          Uint32 Rmask,
                                                          Uint32 Gmask,
                                                          Uint32 Bmask,
                                                          Uint32 Amask);




extern __declspec(dllexport) SDL_PixelFormat * __cdecl SDL_AllocFormat(Uint32 pixel_format);




extern __declspec(dllexport) void __cdecl SDL_FreeFormat(SDL_PixelFormat *format);
# 391 "D:\\Libraries\\include\\SDL2/SDL_pixels.h"
extern __declspec(dllexport) SDL_Palette *__cdecl SDL_AllocPalette(int ncolors);




extern __declspec(dllexport) int __cdecl SDL_SetPixelFormatPalette(SDL_PixelFormat * format,
                                                      SDL_Palette *palette);
# 409 "D:\\Libraries\\include\\SDL2/SDL_pixels.h"
extern __declspec(dllexport) int __cdecl SDL_SetPaletteColors(SDL_Palette * palette,
                                                 const SDL_Color * colors,
                                                 int firstcolor, int ncolors);






extern __declspec(dllexport) void __cdecl SDL_FreePalette(SDL_Palette * palette);






extern __declspec(dllexport) Uint32 __cdecl SDL_MapRGB(const SDL_PixelFormat * format,
                                          Uint8 r, Uint8 g, Uint8 b);






extern __declspec(dllexport) Uint32 __cdecl SDL_MapRGBA(const SDL_PixelFormat * format,
                                           Uint8 r, Uint8 g, Uint8 b,
                                           Uint8 a);






extern __declspec(dllexport) void __cdecl SDL_GetRGB(Uint32 pixel,
                                        const SDL_PixelFormat * format,
                                        Uint8 * r, Uint8 * g, Uint8 * b);






extern __declspec(dllexport) void __cdecl SDL_GetRGBA(Uint32 pixel,
                                         const SDL_PixelFormat * format,
                                         Uint8 * r, Uint8 * g, Uint8 * b,
                                         Uint8 * a);




extern __declspec(dllexport) void __cdecl SDL_CalculateGammaRamp(float gamma, Uint16 * ramp);







# 1 "D:\\Libraries\\include\\SDL2/close_code.h" 1
# 39 "D:\\Libraries\\include\\SDL2/close_code.h"
#pragma pack(pop)
# 467 "D:\\Libraries\\include\\SDL2/SDL_pixels.h" 2
# 33 "D:\\Libraries\\include\\SDL2/SDL_video.h" 2
# 1 "D:\\Libraries\\include\\SDL2/SDL_rect.h" 1
# 36 "D:\\Libraries\\include\\SDL2/SDL_rect.h"
# 1 "D:\\Libraries\\include\\SDL2/begin_code.h" 1
# 106 "D:\\Libraries\\include\\SDL2/begin_code.h"
#pragma warning(disable: 4103)


#pragma clang diagnostic ignored "-Wpragma-pack"






#pragma pack(push,8)
# 37 "D:\\Libraries\\include\\SDL2/SDL_rect.h" 2
# 48 "D:\\Libraries\\include\\SDL2/SDL_rect.h"
typedef struct SDL_Point
{
    int x;
    int y;
} SDL_Point;







typedef struct SDL_FPoint
{
    float x;
    float y;
} SDL_FPoint;
# 77 "D:\\Libraries\\include\\SDL2/SDL_rect.h"
typedef struct SDL_Rect
{
    int x, y;
    int w, h;
} SDL_Rect;





typedef struct SDL_FRect
{
    float x;
    float y;
    float w;
    float h;
} SDL_FRect;





__forceinline SDL_bool SDL_PointInRect(const SDL_Point *p, const SDL_Rect *r)
{
    return ( (p->x >= r->x) && (p->x < (r->x + r->w)) &&
             (p->y >= r->y) && (p->y < (r->y + r->h)) ) ? SDL_TRUE : SDL_FALSE;
}




__forceinline SDL_bool SDL_RectEmpty(const SDL_Rect *r)
{
    return ((!r) || (r->w <= 0) || (r->h <= 0)) ? SDL_TRUE : SDL_FALSE;
}




__forceinline SDL_bool SDL_RectEquals(const SDL_Rect *a, const SDL_Rect *b)
{
    return (a && b && (a->x == b->x) && (a->y == b->y) &&
            (a->w == b->w) && (a->h == b->h)) ? SDL_TRUE : SDL_FALSE;
}






extern __declspec(dllexport) SDL_bool __cdecl SDL_HasIntersection(const SDL_Rect * A,
                                                     const SDL_Rect * B);






extern __declspec(dllexport) SDL_bool __cdecl SDL_IntersectRect(const SDL_Rect * A,
                                                   const SDL_Rect * B,
                                                   SDL_Rect * result);




extern __declspec(dllexport) void __cdecl SDL_UnionRect(const SDL_Rect * A,
                                           const SDL_Rect * B,
                                           SDL_Rect * result);






extern __declspec(dllexport) SDL_bool __cdecl SDL_EnclosePoints(const SDL_Point * points,
                                                   int count,
                                                   const SDL_Rect * clip,
                                                   SDL_Rect * result);






extern __declspec(dllexport) SDL_bool __cdecl SDL_IntersectRectAndLine(const SDL_Rect *
                                                          rect, int *X1,
                                                          int *Y1, int *X2,
                                                          int *Y2);






# 1 "D:\\Libraries\\include\\SDL2/close_code.h" 1
# 39 "D:\\Libraries\\include\\SDL2/close_code.h"
#pragma pack(pop)
# 171 "D:\\Libraries\\include\\SDL2/SDL_rect.h" 2
# 34 "D:\\Libraries\\include\\SDL2/SDL_video.h" 2
# 1 "D:\\Libraries\\include\\SDL2/SDL_surface.h" 1
# 34 "D:\\Libraries\\include\\SDL2/SDL_surface.h"
# 1 "D:\\Libraries\\include\\SDL2/SDL_blendmode.h" 1
# 31 "D:\\Libraries\\include\\SDL2/SDL_blendmode.h"
# 1 "D:\\Libraries\\include\\SDL2/begin_code.h" 1
# 106 "D:\\Libraries\\include\\SDL2/begin_code.h"
#pragma warning(disable: 4103)


#pragma clang diagnostic ignored "-Wpragma-pack"






#pragma pack(push,8)
# 32 "D:\\Libraries\\include\\SDL2/SDL_blendmode.h" 2








typedef enum
{
    SDL_BLENDMODE_NONE = 0x00000000,

    SDL_BLENDMODE_BLEND = 0x00000001,


    SDL_BLENDMODE_ADD = 0x00000002,


    SDL_BLENDMODE_MOD = 0x00000004,


    SDL_BLENDMODE_INVALID = 0x7FFFFFFF



} SDL_BlendMode;




typedef enum
{
    SDL_BLENDOPERATION_ADD = 0x1,
    SDL_BLENDOPERATION_SUBTRACT = 0x2,
    SDL_BLENDOPERATION_REV_SUBTRACT = 0x3,
    SDL_BLENDOPERATION_MINIMUM = 0x4,
    SDL_BLENDOPERATION_MAXIMUM = 0x5

} SDL_BlendOperation;




typedef enum
{
    SDL_BLENDFACTOR_ZERO = 0x1,
    SDL_BLENDFACTOR_ONE = 0x2,
    SDL_BLENDFACTOR_SRC_COLOR = 0x3,
    SDL_BLENDFACTOR_ONE_MINUS_SRC_COLOR = 0x4,
    SDL_BLENDFACTOR_SRC_ALPHA = 0x5,
    SDL_BLENDFACTOR_ONE_MINUS_SRC_ALPHA = 0x6,
    SDL_BLENDFACTOR_DST_COLOR = 0x7,
    SDL_BLENDFACTOR_ONE_MINUS_DST_COLOR = 0x8,
    SDL_BLENDFACTOR_DST_ALPHA = 0x9,
    SDL_BLENDFACTOR_ONE_MINUS_DST_ALPHA = 0xA

} SDL_BlendFactor;
# 105 "D:\\Libraries\\include\\SDL2/SDL_blendmode.h"
extern __declspec(dllexport) SDL_BlendMode __cdecl SDL_ComposeCustomBlendMode(SDL_BlendFactor srcColorFactor,
                                                                 SDL_BlendFactor dstColorFactor,
                                                                 SDL_BlendOperation colorOperation,
                                                                 SDL_BlendFactor srcAlphaFactor,
                                                                 SDL_BlendFactor dstAlphaFactor,
                                                                 SDL_BlendOperation alphaOperation);






# 1 "D:\\Libraries\\include\\SDL2/close_code.h" 1
# 39 "D:\\Libraries\\include\\SDL2/close_code.h"
#pragma pack(pop)
# 117 "D:\\Libraries\\include\\SDL2/SDL_blendmode.h" 2
# 35 "D:\\Libraries\\include\\SDL2/SDL_surface.h" 2


# 1 "D:\\Libraries\\include\\SDL2/begin_code.h" 1
# 106 "D:\\Libraries\\include\\SDL2/begin_code.h"
#pragma warning(disable: 4103)


#pragma clang diagnostic ignored "-Wpragma-pack"






#pragma pack(push,8)
# 38 "D:\\Libraries\\include\\SDL2/SDL_surface.h" 2
# 70 "D:\\Libraries\\include\\SDL2/SDL_surface.h"
typedef struct SDL_Surface
{
    Uint32 flags;
    SDL_PixelFormat *format;
    int w, h;
    int pitch;
    void *pixels;


    void *userdata;


    int locked;
    void *lock_data;


    SDL_Rect clip_rect;


    struct SDL_BlitMap *map;


    int refcount;
} SDL_Surface;




typedef int (__cdecl *SDL_blit) (struct SDL_Surface * src, SDL_Rect * srcrect,
                                 struct SDL_Surface * dst, SDL_Rect * dstrect);




typedef enum
{
    SDL_YUV_CONVERSION_JPEG,
    SDL_YUV_CONVERSION_BT601,
    SDL_YUV_CONVERSION_BT709,
    SDL_YUV_CONVERSION_AUTOMATIC
} SDL_YUV_CONVERSION_MODE;
# 130 "D:\\Libraries\\include\\SDL2/SDL_surface.h"
extern __declspec(dllexport) SDL_Surface *__cdecl SDL_CreateRGBSurface
    (Uint32 flags, int width, int height, int depth,
     Uint32 Rmask, Uint32 Gmask, Uint32 Bmask, Uint32 Amask);


extern __declspec(dllexport) SDL_Surface *__cdecl SDL_CreateRGBSurfaceWithFormat
    (Uint32 flags, int width, int height, int depth, Uint32 format);

extern __declspec(dllexport) SDL_Surface *__cdecl SDL_CreateRGBSurfaceFrom(void *pixels,
                                                              int width,
                                                              int height,
                                                              int depth,
                                                              int pitch,
                                                              Uint32 Rmask,
                                                              Uint32 Gmask,
                                                              Uint32 Bmask,
                                                              Uint32 Amask);
extern __declspec(dllexport) SDL_Surface *__cdecl SDL_CreateRGBSurfaceWithFormatFrom
    (void *pixels, int width, int height, int depth, int pitch, Uint32 format);
extern __declspec(dllexport) void __cdecl SDL_FreeSurface(SDL_Surface * surface);
# 158 "D:\\Libraries\\include\\SDL2/SDL_surface.h"
extern __declspec(dllexport) int __cdecl SDL_SetSurfacePalette(SDL_Surface * surface,
                                                  SDL_Palette * palette);
# 180 "D:\\Libraries\\include\\SDL2/SDL_surface.h"
extern __declspec(dllexport) int __cdecl SDL_LockSurface(SDL_Surface * surface);

extern __declspec(dllexport) void __cdecl SDL_UnlockSurface(SDL_Surface * surface);
# 193 "D:\\Libraries\\include\\SDL2/SDL_surface.h"
extern __declspec(dllexport) SDL_Surface *__cdecl SDL_LoadBMP_RW(SDL_RWops * src,
                                                    int freesrc);
# 216 "D:\\Libraries\\include\\SDL2/SDL_surface.h"
extern __declspec(dllexport) int __cdecl SDL_SaveBMP_RW
    (SDL_Surface * surface, SDL_RWops * dst, int freedst);
# 235 "D:\\Libraries\\include\\SDL2/SDL_surface.h"
extern __declspec(dllexport) int __cdecl SDL_SetSurfaceRLE(SDL_Surface * surface,
                                              int flag);
# 249 "D:\\Libraries\\include\\SDL2/SDL_surface.h"
extern __declspec(dllexport) int __cdecl SDL_SetColorKey(SDL_Surface * surface,
                                            int flag, Uint32 key);






extern __declspec(dllexport) SDL_bool __cdecl SDL_HasColorKey(SDL_Surface * surface);
# 269 "D:\\Libraries\\include\\SDL2/SDL_surface.h"
extern __declspec(dllexport) int __cdecl SDL_GetColorKey(SDL_Surface * surface,
                                            Uint32 * key);
# 284 "D:\\Libraries\\include\\SDL2/SDL_surface.h"
extern __declspec(dllexport) int __cdecl SDL_SetSurfaceColorMod(SDL_Surface * surface,
                                                   Uint8 r, Uint8 g, Uint8 b);
# 300 "D:\\Libraries\\include\\SDL2/SDL_surface.h"
extern __declspec(dllexport) int __cdecl SDL_GetSurfaceColorMod(SDL_Surface * surface,
                                                   Uint8 * r, Uint8 * g,
                                                   Uint8 * b);
# 314 "D:\\Libraries\\include\\SDL2/SDL_surface.h"
extern __declspec(dllexport) int __cdecl SDL_SetSurfaceAlphaMod(SDL_Surface * surface,
                                                   Uint8 alpha);
# 327 "D:\\Libraries\\include\\SDL2/SDL_surface.h"
extern __declspec(dllexport) int __cdecl SDL_GetSurfaceAlphaMod(SDL_Surface * surface,
                                                   Uint8 * alpha);
# 340 "D:\\Libraries\\include\\SDL2/SDL_surface.h"
extern __declspec(dllexport) int __cdecl SDL_SetSurfaceBlendMode(SDL_Surface * surface,
                                                    SDL_BlendMode blendMode);
# 353 "D:\\Libraries\\include\\SDL2/SDL_surface.h"
extern __declspec(dllexport) int __cdecl SDL_GetSurfaceBlendMode(SDL_Surface * surface,
                                                    SDL_BlendMode *blendMode);
# 369 "D:\\Libraries\\include\\SDL2/SDL_surface.h"
extern __declspec(dllexport) SDL_bool __cdecl SDL_SetClipRect(SDL_Surface * surface,
                                                 const SDL_Rect * rect);







extern __declspec(dllexport) void __cdecl SDL_GetClipRect(SDL_Surface * surface,
                                             SDL_Rect * rect);




extern __declspec(dllexport) SDL_Surface *__cdecl SDL_DuplicateSurface(SDL_Surface * surface);
# 396 "D:\\Libraries\\include\\SDL2/SDL_surface.h"
extern __declspec(dllexport) SDL_Surface *__cdecl SDL_ConvertSurface
    (SDL_Surface * src, const SDL_PixelFormat * fmt, Uint32 flags);
extern __declspec(dllexport) SDL_Surface *__cdecl SDL_ConvertSurfaceFormat
    (SDL_Surface * src, Uint32 pixel_format, Uint32 flags);






extern __declspec(dllexport) int __cdecl SDL_ConvertPixels(int width, int height,
                                              Uint32 src_format,
                                              const void * src, int src_pitch,
                                              Uint32 dst_format,
                                              void * dst, int dst_pitch);
# 422 "D:\\Libraries\\include\\SDL2/SDL_surface.h"
extern __declspec(dllexport) int __cdecl SDL_FillRect
    (SDL_Surface * dst, const SDL_Rect * rect, Uint32 color);
extern __declspec(dllexport) int __cdecl SDL_FillRects
    (SDL_Surface * dst, const SDL_Rect * rects, int count, Uint32 color);
# 490 "D:\\Libraries\\include\\SDL2/SDL_surface.h"
extern __declspec(dllexport) int __cdecl SDL_UpperBlit
    (SDL_Surface * src, const SDL_Rect * srcrect,
     SDL_Surface * dst, SDL_Rect * dstrect);





extern __declspec(dllexport) int __cdecl SDL_LowerBlit
    (SDL_Surface * src, SDL_Rect * srcrect,
     SDL_Surface * dst, SDL_Rect * dstrect);







extern __declspec(dllexport) int __cdecl SDL_SoftStretch(SDL_Surface * src,
                                            const SDL_Rect * srcrect,
                                            SDL_Surface * dst,
                                            const SDL_Rect * dstrect);







extern __declspec(dllexport) int __cdecl SDL_UpperBlitScaled
    (SDL_Surface * src, const SDL_Rect * srcrect,
    SDL_Surface * dst, SDL_Rect * dstrect);





extern __declspec(dllexport) int __cdecl SDL_LowerBlitScaled
    (SDL_Surface * src, SDL_Rect * srcrect,
    SDL_Surface * dst, SDL_Rect * dstrect);




extern __declspec(dllexport) void __cdecl SDL_SetYUVConversionMode(SDL_YUV_CONVERSION_MODE mode);




extern __declspec(dllexport) SDL_YUV_CONVERSION_MODE __cdecl SDL_GetYUVConversionMode(void);




extern __declspec(dllexport) SDL_YUV_CONVERSION_MODE __cdecl SDL_GetYUVConversionModeForResolution(int width, int height);






# 1 "D:\\Libraries\\include\\SDL2/close_code.h" 1
# 39 "D:\\Libraries\\include\\SDL2/close_code.h"
#pragma pack(pop)
# 551 "D:\\Libraries\\include\\SDL2/SDL_surface.h" 2
# 35 "D:\\Libraries\\include\\SDL2/SDL_video.h" 2

# 1 "D:\\Libraries\\include\\SDL2/begin_code.h" 1
# 106 "D:\\Libraries\\include\\SDL2/begin_code.h"
#pragma warning(disable: 4103)


#pragma clang diagnostic ignored "-Wpragma-pack"






#pragma pack(push,8)
# 37 "D:\\Libraries\\include\\SDL2/SDL_video.h" 2
# 53 "D:\\Libraries\\include\\SDL2/SDL_video.h"
typedef struct
{
    Uint32 format;
    int w;
    int h;
    int refresh_rate;
    void *driverdata;
} SDL_DisplayMode;
# 90 "D:\\Libraries\\include\\SDL2/SDL_video.h"
typedef struct SDL_Window SDL_Window;






typedef enum
{

    SDL_WINDOW_FULLSCREEN = 0x00000001,
    SDL_WINDOW_OPENGL = 0x00000002,
    SDL_WINDOW_SHOWN = 0x00000004,
    SDL_WINDOW_HIDDEN = 0x00000008,
    SDL_WINDOW_BORDERLESS = 0x00000010,
    SDL_WINDOW_RESIZABLE = 0x00000020,
    SDL_WINDOW_MINIMIZED = 0x00000040,
    SDL_WINDOW_MAXIMIZED = 0x00000080,
    SDL_WINDOW_INPUT_GRABBED = 0x00000100,
    SDL_WINDOW_INPUT_FOCUS = 0x00000200,
    SDL_WINDOW_MOUSE_FOCUS = 0x00000400,
    SDL_WINDOW_FULLSCREEN_DESKTOP = ( SDL_WINDOW_FULLSCREEN | 0x00001000 ),
    SDL_WINDOW_FOREIGN = 0x00000800,
    SDL_WINDOW_ALLOW_HIGHDPI = 0x00002000,


    SDL_WINDOW_MOUSE_CAPTURE = 0x00004000,
    SDL_WINDOW_ALWAYS_ON_TOP = 0x00008000,
    SDL_WINDOW_SKIP_TASKBAR = 0x00010000,
    SDL_WINDOW_UTILITY = 0x00020000,
    SDL_WINDOW_TOOLTIP = 0x00040000,
    SDL_WINDOW_POPUP_MENU = 0x00080000,
    SDL_WINDOW_VULKAN = 0x10000000
} SDL_WindowFlags;
# 146 "D:\\Libraries\\include\\SDL2/SDL_video.h"
typedef enum
{
    SDL_WINDOWEVENT_NONE,
    SDL_WINDOWEVENT_SHOWN,
    SDL_WINDOWEVENT_HIDDEN,
    SDL_WINDOWEVENT_EXPOSED,

    SDL_WINDOWEVENT_MOVED,

    SDL_WINDOWEVENT_RESIZED,
    SDL_WINDOWEVENT_SIZE_CHANGED,


    SDL_WINDOWEVENT_MINIMIZED,
    SDL_WINDOWEVENT_MAXIMIZED,
    SDL_WINDOWEVENT_RESTORED,

    SDL_WINDOWEVENT_ENTER,
    SDL_WINDOWEVENT_LEAVE,
    SDL_WINDOWEVENT_FOCUS_GAINED,
    SDL_WINDOWEVENT_FOCUS_LOST,
    SDL_WINDOWEVENT_CLOSE,
    SDL_WINDOWEVENT_TAKE_FOCUS,
    SDL_WINDOWEVENT_HIT_TEST
} SDL_WindowEventID;




typedef enum
{
    SDL_DISPLAYEVENT_NONE,
    SDL_DISPLAYEVENT_ORIENTATION
} SDL_DisplayEventID;

typedef enum
{
    SDL_ORIENTATION_UNKNOWN,
    SDL_ORIENTATION_LANDSCAPE,
    SDL_ORIENTATION_LANDSCAPE_FLIPPED,
    SDL_ORIENTATION_PORTRAIT,
    SDL_ORIENTATION_PORTRAIT_FLIPPED
} SDL_DisplayOrientation;




typedef void *SDL_GLContext;




typedef enum
{
    SDL_GL_RED_SIZE,
    SDL_GL_GREEN_SIZE,
    SDL_GL_BLUE_SIZE,
    SDL_GL_ALPHA_SIZE,
    SDL_GL_BUFFER_SIZE,
    SDL_GL_DOUBLEBUFFER,
    SDL_GL_DEPTH_SIZE,
    SDL_GL_STENCIL_SIZE,
    SDL_GL_ACCUM_RED_SIZE,
    SDL_GL_ACCUM_GREEN_SIZE,
    SDL_GL_ACCUM_BLUE_SIZE,
    SDL_GL_ACCUM_ALPHA_SIZE,
    SDL_GL_STEREO,
    SDL_GL_MULTISAMPLEBUFFERS,
    SDL_GL_MULTISAMPLESAMPLES,
    SDL_GL_ACCELERATED_VISUAL,
    SDL_GL_RETAINED_BACKING,
    SDL_GL_CONTEXT_MAJOR_VERSION,
    SDL_GL_CONTEXT_MINOR_VERSION,
    SDL_GL_CONTEXT_EGL,
    SDL_GL_CONTEXT_FLAGS,
    SDL_GL_CONTEXT_PROFILE_MASK,
    SDL_GL_SHARE_WITH_CURRENT_CONTEXT,
    SDL_GL_FRAMEBUFFER_SRGB_CAPABLE,
    SDL_GL_CONTEXT_RELEASE_BEHAVIOR,
    SDL_GL_CONTEXT_RESET_NOTIFICATION,
    SDL_GL_CONTEXT_NO_ERROR
} SDL_GLattr;

typedef enum
{
    SDL_GL_CONTEXT_PROFILE_CORE = 0x0001,
    SDL_GL_CONTEXT_PROFILE_COMPATIBILITY = 0x0002,
    SDL_GL_CONTEXT_PROFILE_ES = 0x0004
} SDL_GLprofile;

typedef enum
{
    SDL_GL_CONTEXT_DEBUG_FLAG = 0x0001,
    SDL_GL_CONTEXT_FORWARD_COMPATIBLE_FLAG = 0x0002,
    SDL_GL_CONTEXT_ROBUST_ACCESS_FLAG = 0x0004,
    SDL_GL_CONTEXT_RESET_ISOLATION_FLAG = 0x0008
} SDL_GLcontextFlag;

typedef enum
{
    SDL_GL_CONTEXT_RELEASE_BEHAVIOR_NONE = 0x0000,
    SDL_GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH = 0x0001
} SDL_GLcontextReleaseFlag;

typedef enum
{
    SDL_GL_CONTEXT_RESET_NO_NOTIFICATION = 0x0000,
    SDL_GL_CONTEXT_RESET_LOSE_CONTEXT = 0x0001
} SDL_GLContextResetNotification;
# 263 "D:\\Libraries\\include\\SDL2/SDL_video.h"
extern __declspec(dllexport) int __cdecl SDL_GetNumVideoDrivers(void);
# 273 "D:\\Libraries\\include\\SDL2/SDL_video.h"
extern __declspec(dllexport) const char *__cdecl SDL_GetVideoDriver(int index);
# 289 "D:\\Libraries\\include\\SDL2/SDL_video.h"
extern __declspec(dllexport) int __cdecl SDL_VideoInit(const char *driver_name);
# 298 "D:\\Libraries\\include\\SDL2/SDL_video.h"
extern __declspec(dllexport) void __cdecl SDL_VideoQuit(void);
# 309 "D:\\Libraries\\include\\SDL2/SDL_video.h"
extern __declspec(dllexport) const char *__cdecl SDL_GetCurrentVideoDriver(void);






extern __declspec(dllexport) int __cdecl SDL_GetNumVideoDisplays(void);
# 325 "D:\\Libraries\\include\\SDL2/SDL_video.h"
extern __declspec(dllexport) const char * __cdecl SDL_GetDisplayName(int displayIndex);
# 335 "D:\\Libraries\\include\\SDL2/SDL_video.h"
extern __declspec(dllexport) int __cdecl SDL_GetDisplayBounds(int displayIndex, SDL_Rect * rect);
# 354 "D:\\Libraries\\include\\SDL2/SDL_video.h"
extern __declspec(dllexport) int __cdecl SDL_GetDisplayUsableBounds(int displayIndex, SDL_Rect * rect);
# 366 "D:\\Libraries\\include\\SDL2/SDL_video.h"
extern __declspec(dllexport) int __cdecl SDL_GetDisplayDPI(int displayIndex, float * ddpi, float * hdpi, float * vdpi);
# 375 "D:\\Libraries\\include\\SDL2/SDL_video.h"
extern __declspec(dllexport) SDL_DisplayOrientation __cdecl SDL_GetDisplayOrientation(int displayIndex);






extern __declspec(dllexport) int __cdecl SDL_GetNumDisplayModes(int displayIndex);
# 395 "D:\\Libraries\\include\\SDL2/SDL_video.h"
extern __declspec(dllexport) int __cdecl SDL_GetDisplayMode(int displayIndex, int modeIndex,
                                               SDL_DisplayMode * mode);




extern __declspec(dllexport) int __cdecl SDL_GetDesktopDisplayMode(int displayIndex, SDL_DisplayMode * mode);




extern __declspec(dllexport) int __cdecl SDL_GetCurrentDisplayMode(int displayIndex, SDL_DisplayMode * mode);
# 430 "D:\\Libraries\\include\\SDL2/SDL_video.h"
extern __declspec(dllexport) SDL_DisplayMode * __cdecl SDL_GetClosestDisplayMode(int displayIndex, const SDL_DisplayMode * mode, SDL_DisplayMode * closest);







extern __declspec(dllexport) int __cdecl SDL_GetWindowDisplayIndex(SDL_Window * window);
# 454 "D:\\Libraries\\include\\SDL2/SDL_video.h"
extern __declspec(dllexport) int __cdecl SDL_SetWindowDisplayMode(SDL_Window * window,
                                                     const SDL_DisplayMode
                                                         * mode);
# 465 "D:\\Libraries\\include\\SDL2/SDL_video.h"
extern __declspec(dllexport) int __cdecl SDL_GetWindowDisplayMode(SDL_Window * window,
                                                     SDL_DisplayMode * mode);




extern __declspec(dllexport) Uint32 __cdecl SDL_GetWindowPixelFormat(SDL_Window * window);
# 515 "D:\\Libraries\\include\\SDL2/SDL_video.h"
extern __declspec(dllexport) SDL_Window * __cdecl SDL_CreateWindow(const char *title,
                                                      int x, int y, int w,
                                                      int h, Uint32 flags);
# 528 "D:\\Libraries\\include\\SDL2/SDL_video.h"
extern __declspec(dllexport) SDL_Window * __cdecl SDL_CreateWindowFrom(const void *data);




extern __declspec(dllexport) Uint32 __cdecl SDL_GetWindowID(SDL_Window * window);




extern __declspec(dllexport) SDL_Window * __cdecl SDL_GetWindowFromID(Uint32 id);




extern __declspec(dllexport) Uint32 __cdecl SDL_GetWindowFlags(SDL_Window * window);






extern __declspec(dllexport) void __cdecl SDL_SetWindowTitle(SDL_Window * window,
                                                const char *title);






extern __declspec(dllexport) const char *__cdecl SDL_GetWindowTitle(SDL_Window * window);







extern __declspec(dllexport) void __cdecl SDL_SetWindowIcon(SDL_Window * window,
                                               SDL_Surface * icon);
# 582 "D:\\Libraries\\include\\SDL2/SDL_video.h"
extern __declspec(dllexport) void* __cdecl SDL_SetWindowData(SDL_Window * window,
                                                const char *name,
                                                void *userdata);
# 596 "D:\\Libraries\\include\\SDL2/SDL_video.h"
extern __declspec(dllexport) void *__cdecl SDL_GetWindowData(SDL_Window * window,
                                                const char *name);
# 612 "D:\\Libraries\\include\\SDL2/SDL_video.h"
extern __declspec(dllexport) void __cdecl SDL_SetWindowPosition(SDL_Window * window,
                                                   int x, int y);
# 626 "D:\\Libraries\\include\\SDL2/SDL_video.h"
extern __declspec(dllexport) void __cdecl SDL_GetWindowPosition(SDL_Window * window,
                                                   int *x, int *y);
# 647 "D:\\Libraries\\include\\SDL2/SDL_video.h"
extern __declspec(dllexport) void __cdecl SDL_SetWindowSize(SDL_Window * window, int w,
                                               int h);
# 666 "D:\\Libraries\\include\\SDL2/SDL_video.h"
extern __declspec(dllexport) void __cdecl SDL_GetWindowSize(SDL_Window * window, int *w,
                                               int *h);
# 684 "D:\\Libraries\\include\\SDL2/SDL_video.h"
extern __declspec(dllexport) int __cdecl SDL_GetWindowBordersSize(SDL_Window * window,
                                                     int *top, int *left,
                                                     int *bottom, int *right);
# 701 "D:\\Libraries\\include\\SDL2/SDL_video.h"
extern __declspec(dllexport) void __cdecl SDL_SetWindowMinimumSize(SDL_Window * window,
                                                      int min_w, int min_h);
# 714 "D:\\Libraries\\include\\SDL2/SDL_video.h"
extern __declspec(dllexport) void __cdecl SDL_GetWindowMinimumSize(SDL_Window * window,
                                                      int *w, int *h);
# 730 "D:\\Libraries\\include\\SDL2/SDL_video.h"
extern __declspec(dllexport) void __cdecl SDL_SetWindowMaximumSize(SDL_Window * window,
                                                      int max_w, int max_h);
# 743 "D:\\Libraries\\include\\SDL2/SDL_video.h"
extern __declspec(dllexport) void __cdecl SDL_GetWindowMaximumSize(SDL_Window * window,
                                                      int *w, int *h);
# 760 "D:\\Libraries\\include\\SDL2/SDL_video.h"
extern __declspec(dllexport) void __cdecl SDL_SetWindowBordered(SDL_Window * window,
                                                   SDL_bool bordered);
# 777 "D:\\Libraries\\include\\SDL2/SDL_video.h"
extern __declspec(dllexport) void __cdecl SDL_SetWindowResizable(SDL_Window * window,
                                                    SDL_bool resizable);






extern __declspec(dllexport) void __cdecl SDL_ShowWindow(SDL_Window * window);






extern __declspec(dllexport) void __cdecl SDL_HideWindow(SDL_Window * window);




extern __declspec(dllexport) void __cdecl SDL_RaiseWindow(SDL_Window * window);






extern __declspec(dllexport) void __cdecl SDL_MaximizeWindow(SDL_Window * window);






extern __declspec(dllexport) void __cdecl SDL_MinimizeWindow(SDL_Window * window);







extern __declspec(dllexport) void __cdecl SDL_RestoreWindow(SDL_Window * window);
# 829 "D:\\Libraries\\include\\SDL2/SDL_video.h"
extern __declspec(dllexport) int __cdecl SDL_SetWindowFullscreen(SDL_Window * window,
                                                    Uint32 flags);
# 845 "D:\\Libraries\\include\\SDL2/SDL_video.h"
extern __declspec(dllexport) SDL_Surface * __cdecl SDL_GetWindowSurface(SDL_Window * window);
# 855 "D:\\Libraries\\include\\SDL2/SDL_video.h"
extern __declspec(dllexport) int __cdecl SDL_UpdateWindowSurface(SDL_Window * window);
# 865 "D:\\Libraries\\include\\SDL2/SDL_video.h"
extern __declspec(dllexport) int __cdecl SDL_UpdateWindowSurfaceRects(SDL_Window * window,
                                                         const SDL_Rect * rects,
                                                         int numrects);
# 880 "D:\\Libraries\\include\\SDL2/SDL_video.h"
extern __declspec(dllexport) void __cdecl SDL_SetWindowGrab(SDL_Window * window,
                                               SDL_bool grabbed);
# 890 "D:\\Libraries\\include\\SDL2/SDL_video.h"
extern __declspec(dllexport) SDL_bool __cdecl SDL_GetWindowGrab(SDL_Window * window);
# 899 "D:\\Libraries\\include\\SDL2/SDL_video.h"
extern __declspec(dllexport) SDL_Window * __cdecl SDL_GetGrabbedWindow(void);
# 909 "D:\\Libraries\\include\\SDL2/SDL_video.h"
extern __declspec(dllexport) int __cdecl SDL_SetWindowBrightness(SDL_Window * window, float brightness);
# 918 "D:\\Libraries\\include\\SDL2/SDL_video.h"
extern __declspec(dllexport) float __cdecl SDL_GetWindowBrightness(SDL_Window * window);
# 931 "D:\\Libraries\\include\\SDL2/SDL_video.h"
extern __declspec(dllexport) int __cdecl SDL_SetWindowOpacity(SDL_Window * window, float opacity);
# 946 "D:\\Libraries\\include\\SDL2/SDL_video.h"
extern __declspec(dllexport) int __cdecl SDL_GetWindowOpacity(SDL_Window * window, float * out_opacity);
# 956 "D:\\Libraries\\include\\SDL2/SDL_video.h"
extern __declspec(dllexport) int __cdecl SDL_SetWindowModalFor(SDL_Window * modal_window, SDL_Window * parent_window);
# 970 "D:\\Libraries\\include\\SDL2/SDL_video.h"
extern __declspec(dllexport) int __cdecl SDL_SetWindowInputFocus(SDL_Window * window);
# 990 "D:\\Libraries\\include\\SDL2/SDL_video.h"
extern __declspec(dllexport) int __cdecl SDL_SetWindowGammaRamp(SDL_Window * window,
                                                   const Uint16 * red,
                                                   const Uint16 * green,
                                                   const Uint16 * blue);
# 1010 "D:\\Libraries\\include\\SDL2/SDL_video.h"
extern __declspec(dllexport) int __cdecl SDL_GetWindowGammaRamp(SDL_Window * window,
                                                   Uint16 * red,
                                                   Uint16 * green,
                                                   Uint16 * blue);






typedef enum
{
    SDL_HITTEST_NORMAL,
    SDL_HITTEST_DRAGGABLE,
    SDL_HITTEST_RESIZE_TOPLEFT,
    SDL_HITTEST_RESIZE_TOP,
    SDL_HITTEST_RESIZE_TOPRIGHT,
    SDL_HITTEST_RESIZE_RIGHT,
    SDL_HITTEST_RESIZE_BOTTOMRIGHT,
    SDL_HITTEST_RESIZE_BOTTOM,
    SDL_HITTEST_RESIZE_BOTTOMLEFT,
    SDL_HITTEST_RESIZE_LEFT
} SDL_HitTestResult;






typedef SDL_HitTestResult (__cdecl *SDL_HitTest)(SDL_Window *win,
                                                 const SDL_Point *area,
                                                 void *data);
# 1080 "D:\\Libraries\\include\\SDL2/SDL_video.h"
extern __declspec(dllexport) int __cdecl SDL_SetWindowHitTest(SDL_Window * window,
                                                 SDL_HitTest callback,
                                                 void *callback_data);




extern __declspec(dllexport) void __cdecl SDL_DestroyWindow(SDL_Window * window);
# 1096 "D:\\Libraries\\include\\SDL2/SDL_video.h"
extern __declspec(dllexport) SDL_bool __cdecl SDL_IsScreenSaverEnabled(void);







extern __declspec(dllexport) void __cdecl SDL_EnableScreenSaver(void);







extern __declspec(dllexport) void __cdecl SDL_DisableScreenSaver(void);
# 1138 "D:\\Libraries\\include\\SDL2/SDL_video.h"
extern __declspec(dllexport) int __cdecl SDL_GL_LoadLibrary(const char *path);




extern __declspec(dllexport) void *__cdecl SDL_GL_GetProcAddress(const char *proc);






extern __declspec(dllexport) void __cdecl SDL_GL_UnloadLibrary(void);





extern __declspec(dllexport) SDL_bool __cdecl SDL_GL_ExtensionSupported(const char
                                                           *extension);




extern __declspec(dllexport) void __cdecl SDL_GL_ResetAttributes(void);






extern __declspec(dllexport) int __cdecl SDL_GL_SetAttribute(SDL_GLattr attr, int value);







extern __declspec(dllexport) int __cdecl SDL_GL_GetAttribute(SDL_GLattr attr, int *value);







extern __declspec(dllexport) SDL_GLContext __cdecl SDL_GL_CreateContext(SDL_Window *
                                                           window);






extern __declspec(dllexport) int __cdecl SDL_GL_MakeCurrent(SDL_Window * window,
                                               SDL_GLContext context);




extern __declspec(dllexport) SDL_Window* __cdecl SDL_GL_GetCurrentWindow(void);




extern __declspec(dllexport) SDL_GLContext __cdecl SDL_GL_GetCurrentContext(void);
# 1222 "D:\\Libraries\\include\\SDL2/SDL_video.h"
extern __declspec(dllexport) void __cdecl SDL_GL_GetDrawableSize(SDL_Window * window, int *w,
                                                    int *h);
# 1237 "D:\\Libraries\\include\\SDL2/SDL_video.h"
extern __declspec(dllexport) int __cdecl SDL_GL_SetSwapInterval(int interval);
# 1250 "D:\\Libraries\\include\\SDL2/SDL_video.h"
extern __declspec(dllexport) int __cdecl SDL_GL_GetSwapInterval(void);





extern __declspec(dllexport) void __cdecl SDL_GL_SwapWindow(SDL_Window * window);






extern __declspec(dllexport) void __cdecl SDL_GL_DeleteContext(SDL_GLContext context);
# 1272 "D:\\Libraries\\include\\SDL2/SDL_video.h"
# 1 "D:\\Libraries\\include\\SDL2/close_code.h" 1
# 39 "D:\\Libraries\\include\\SDL2/close_code.h"
#pragma pack(pop)
# 1273 "D:\\Libraries\\include\\SDL2/SDL_video.h" 2
# 34 "D:\\Libraries\\include\\SDL2/SDL_events.h" 2
# 1 "D:\\Libraries\\include\\SDL2/SDL_keyboard.h" 1
# 33 "D:\\Libraries\\include\\SDL2/SDL_keyboard.h"
# 1 "D:\\Libraries\\include\\SDL2/SDL_keycode.h" 1
# 32 "D:\\Libraries\\include\\SDL2/SDL_keycode.h"
# 1 "D:\\Libraries\\include\\SDL2/SDL_scancode.h" 1
# 43 "D:\\Libraries\\include\\SDL2/SDL_scancode.h"
typedef enum
{
    SDL_SCANCODE_UNKNOWN = 0,
# 54 "D:\\Libraries\\include\\SDL2/SDL_scancode.h"
    SDL_SCANCODE_A = 4,
    SDL_SCANCODE_B = 5,
    SDL_SCANCODE_C = 6,
    SDL_SCANCODE_D = 7,
    SDL_SCANCODE_E = 8,
    SDL_SCANCODE_F = 9,
    SDL_SCANCODE_G = 10,
    SDL_SCANCODE_H = 11,
    SDL_SCANCODE_I = 12,
    SDL_SCANCODE_J = 13,
    SDL_SCANCODE_K = 14,
    SDL_SCANCODE_L = 15,
    SDL_SCANCODE_M = 16,
    SDL_SCANCODE_N = 17,
    SDL_SCANCODE_O = 18,
    SDL_SCANCODE_P = 19,
    SDL_SCANCODE_Q = 20,
    SDL_SCANCODE_R = 21,
    SDL_SCANCODE_S = 22,
    SDL_SCANCODE_T = 23,
    SDL_SCANCODE_U = 24,
    SDL_SCANCODE_V = 25,
    SDL_SCANCODE_W = 26,
    SDL_SCANCODE_X = 27,
    SDL_SCANCODE_Y = 28,
    SDL_SCANCODE_Z = 29,

    SDL_SCANCODE_1 = 30,
    SDL_SCANCODE_2 = 31,
    SDL_SCANCODE_3 = 32,
    SDL_SCANCODE_4 = 33,
    SDL_SCANCODE_5 = 34,
    SDL_SCANCODE_6 = 35,
    SDL_SCANCODE_7 = 36,
    SDL_SCANCODE_8 = 37,
    SDL_SCANCODE_9 = 38,
    SDL_SCANCODE_0 = 39,

    SDL_SCANCODE_RETURN = 40,
    SDL_SCANCODE_ESCAPE = 41,
    SDL_SCANCODE_BACKSPACE = 42,
    SDL_SCANCODE_TAB = 43,
    SDL_SCANCODE_SPACE = 44,

    SDL_SCANCODE_MINUS = 45,
    SDL_SCANCODE_EQUALS = 46,
    SDL_SCANCODE_LEFTBRACKET = 47,
    SDL_SCANCODE_RIGHTBRACKET = 48,
    SDL_SCANCODE_BACKSLASH = 49,
# 116 "D:\\Libraries\\include\\SDL2/SDL_scancode.h"
    SDL_SCANCODE_NONUSHASH = 50,
# 128 "D:\\Libraries\\include\\SDL2/SDL_scancode.h"
    SDL_SCANCODE_SEMICOLON = 51,
    SDL_SCANCODE_APOSTROPHE = 52,
    SDL_SCANCODE_GRAVE = 53,
# 147 "D:\\Libraries\\include\\SDL2/SDL_scancode.h"
    SDL_SCANCODE_COMMA = 54,
    SDL_SCANCODE_PERIOD = 55,
    SDL_SCANCODE_SLASH = 56,

    SDL_SCANCODE_CAPSLOCK = 57,

    SDL_SCANCODE_F1 = 58,
    SDL_SCANCODE_F2 = 59,
    SDL_SCANCODE_F3 = 60,
    SDL_SCANCODE_F4 = 61,
    SDL_SCANCODE_F5 = 62,
    SDL_SCANCODE_F6 = 63,
    SDL_SCANCODE_F7 = 64,
    SDL_SCANCODE_F8 = 65,
    SDL_SCANCODE_F9 = 66,
    SDL_SCANCODE_F10 = 67,
    SDL_SCANCODE_F11 = 68,
    SDL_SCANCODE_F12 = 69,

    SDL_SCANCODE_PRINTSCREEN = 70,
    SDL_SCANCODE_SCROLLLOCK = 71,
    SDL_SCANCODE_PAUSE = 72,
    SDL_SCANCODE_INSERT = 73,

    SDL_SCANCODE_HOME = 74,
    SDL_SCANCODE_PAGEUP = 75,
    SDL_SCANCODE_DELETE = 76,
    SDL_SCANCODE_END = 77,
    SDL_SCANCODE_PAGEDOWN = 78,
    SDL_SCANCODE_RIGHT = 79,
    SDL_SCANCODE_LEFT = 80,
    SDL_SCANCODE_DOWN = 81,
    SDL_SCANCODE_UP = 82,

    SDL_SCANCODE_NUMLOCKCLEAR = 83,

    SDL_SCANCODE_KP_DIVIDE = 84,
    SDL_SCANCODE_KP_MULTIPLY = 85,
    SDL_SCANCODE_KP_MINUS = 86,
    SDL_SCANCODE_KP_PLUS = 87,
    SDL_SCANCODE_KP_ENTER = 88,
    SDL_SCANCODE_KP_1 = 89,
    SDL_SCANCODE_KP_2 = 90,
    SDL_SCANCODE_KP_3 = 91,
    SDL_SCANCODE_KP_4 = 92,
    SDL_SCANCODE_KP_5 = 93,
    SDL_SCANCODE_KP_6 = 94,
    SDL_SCANCODE_KP_7 = 95,
    SDL_SCANCODE_KP_8 = 96,
    SDL_SCANCODE_KP_9 = 97,
    SDL_SCANCODE_KP_0 = 98,
    SDL_SCANCODE_KP_PERIOD = 99,

    SDL_SCANCODE_NONUSBACKSLASH = 100,
# 210 "D:\\Libraries\\include\\SDL2/SDL_scancode.h"
    SDL_SCANCODE_APPLICATION = 101,
    SDL_SCANCODE_POWER = 102,


    SDL_SCANCODE_KP_EQUALS = 103,
    SDL_SCANCODE_F13 = 104,
    SDL_SCANCODE_F14 = 105,
    SDL_SCANCODE_F15 = 106,
    SDL_SCANCODE_F16 = 107,
    SDL_SCANCODE_F17 = 108,
    SDL_SCANCODE_F18 = 109,
    SDL_SCANCODE_F19 = 110,
    SDL_SCANCODE_F20 = 111,
    SDL_SCANCODE_F21 = 112,
    SDL_SCANCODE_F22 = 113,
    SDL_SCANCODE_F23 = 114,
    SDL_SCANCODE_F24 = 115,
    SDL_SCANCODE_EXECUTE = 116,
    SDL_SCANCODE_HELP = 117,
    SDL_SCANCODE_MENU = 118,
    SDL_SCANCODE_SELECT = 119,
    SDL_SCANCODE_STOP = 120,
    SDL_SCANCODE_AGAIN = 121,
    SDL_SCANCODE_UNDO = 122,
    SDL_SCANCODE_CUT = 123,
    SDL_SCANCODE_COPY = 124,
    SDL_SCANCODE_PASTE = 125,
    SDL_SCANCODE_FIND = 126,
    SDL_SCANCODE_MUTE = 127,
    SDL_SCANCODE_VOLUMEUP = 128,
    SDL_SCANCODE_VOLUMEDOWN = 129,




    SDL_SCANCODE_KP_COMMA = 133,
    SDL_SCANCODE_KP_EQUALSAS400 = 134,

    SDL_SCANCODE_INTERNATIONAL1 = 135,

    SDL_SCANCODE_INTERNATIONAL2 = 136,
    SDL_SCANCODE_INTERNATIONAL3 = 137,
    SDL_SCANCODE_INTERNATIONAL4 = 138,
    SDL_SCANCODE_INTERNATIONAL5 = 139,
    SDL_SCANCODE_INTERNATIONAL6 = 140,
    SDL_SCANCODE_INTERNATIONAL7 = 141,
    SDL_SCANCODE_INTERNATIONAL8 = 142,
    SDL_SCANCODE_INTERNATIONAL9 = 143,
    SDL_SCANCODE_LANG1 = 144,
    SDL_SCANCODE_LANG2 = 145,
    SDL_SCANCODE_LANG3 = 146,
    SDL_SCANCODE_LANG4 = 147,
    SDL_SCANCODE_LANG5 = 148,
    SDL_SCANCODE_LANG6 = 149,
    SDL_SCANCODE_LANG7 = 150,
    SDL_SCANCODE_LANG8 = 151,
    SDL_SCANCODE_LANG9 = 152,

    SDL_SCANCODE_ALTERASE = 153,
    SDL_SCANCODE_SYSREQ = 154,
    SDL_SCANCODE_CANCEL = 155,
    SDL_SCANCODE_CLEAR = 156,
    SDL_SCANCODE_PRIOR = 157,
    SDL_SCANCODE_RETURN2 = 158,
    SDL_SCANCODE_SEPARATOR = 159,
    SDL_SCANCODE_OUT = 160,
    SDL_SCANCODE_OPER = 161,
    SDL_SCANCODE_CLEARAGAIN = 162,
    SDL_SCANCODE_CRSEL = 163,
    SDL_SCANCODE_EXSEL = 164,

    SDL_SCANCODE_KP_00 = 176,
    SDL_SCANCODE_KP_000 = 177,
    SDL_SCANCODE_THOUSANDSSEPARATOR = 178,
    SDL_SCANCODE_DECIMALSEPARATOR = 179,
    SDL_SCANCODE_CURRENCYUNIT = 180,
    SDL_SCANCODE_CURRENCYSUBUNIT = 181,
    SDL_SCANCODE_KP_LEFTPAREN = 182,
    SDL_SCANCODE_KP_RIGHTPAREN = 183,
    SDL_SCANCODE_KP_LEFTBRACE = 184,
    SDL_SCANCODE_KP_RIGHTBRACE = 185,
    SDL_SCANCODE_KP_TAB = 186,
    SDL_SCANCODE_KP_BACKSPACE = 187,
    SDL_SCANCODE_KP_A = 188,
    SDL_SCANCODE_KP_B = 189,
    SDL_SCANCODE_KP_C = 190,
    SDL_SCANCODE_KP_D = 191,
    SDL_SCANCODE_KP_E = 192,
    SDL_SCANCODE_KP_F = 193,
    SDL_SCANCODE_KP_XOR = 194,
    SDL_SCANCODE_KP_POWER = 195,
    SDL_SCANCODE_KP_PERCENT = 196,
    SDL_SCANCODE_KP_LESS = 197,
    SDL_SCANCODE_KP_GREATER = 198,
    SDL_SCANCODE_KP_AMPERSAND = 199,
    SDL_SCANCODE_KP_DBLAMPERSAND = 200,
    SDL_SCANCODE_KP_VERTICALBAR = 201,
    SDL_SCANCODE_KP_DBLVERTICALBAR = 202,
    SDL_SCANCODE_KP_COLON = 203,
    SDL_SCANCODE_KP_HASH = 204,
    SDL_SCANCODE_KP_SPACE = 205,
    SDL_SCANCODE_KP_AT = 206,
    SDL_SCANCODE_KP_EXCLAM = 207,
    SDL_SCANCODE_KP_MEMSTORE = 208,
    SDL_SCANCODE_KP_MEMRECALL = 209,
    SDL_SCANCODE_KP_MEMCLEAR = 210,
    SDL_SCANCODE_KP_MEMADD = 211,
    SDL_SCANCODE_KP_MEMSUBTRACT = 212,
    SDL_SCANCODE_KP_MEMMULTIPLY = 213,
    SDL_SCANCODE_KP_MEMDIVIDE = 214,
    SDL_SCANCODE_KP_PLUSMINUS = 215,
    SDL_SCANCODE_KP_CLEAR = 216,
    SDL_SCANCODE_KP_CLEARENTRY = 217,
    SDL_SCANCODE_KP_BINARY = 218,
    SDL_SCANCODE_KP_OCTAL = 219,
    SDL_SCANCODE_KP_DECIMAL = 220,
    SDL_SCANCODE_KP_HEXADECIMAL = 221,

    SDL_SCANCODE_LCTRL = 224,
    SDL_SCANCODE_LSHIFT = 225,
    SDL_SCANCODE_LALT = 226,
    SDL_SCANCODE_LGUI = 227,
    SDL_SCANCODE_RCTRL = 228,
    SDL_SCANCODE_RSHIFT = 229,
    SDL_SCANCODE_RALT = 230,
    SDL_SCANCODE_RGUI = 231,

    SDL_SCANCODE_MODE = 257,
# 351 "D:\\Libraries\\include\\SDL2/SDL_scancode.h"
    SDL_SCANCODE_AUDIONEXT = 258,
    SDL_SCANCODE_AUDIOPREV = 259,
    SDL_SCANCODE_AUDIOSTOP = 260,
    SDL_SCANCODE_AUDIOPLAY = 261,
    SDL_SCANCODE_AUDIOMUTE = 262,
    SDL_SCANCODE_MEDIASELECT = 263,
    SDL_SCANCODE_WWW = 264,
    SDL_SCANCODE_MAIL = 265,
    SDL_SCANCODE_CALCULATOR = 266,
    SDL_SCANCODE_COMPUTER = 267,
    SDL_SCANCODE_AC_SEARCH = 268,
    SDL_SCANCODE_AC_HOME = 269,
    SDL_SCANCODE_AC_BACK = 270,
    SDL_SCANCODE_AC_FORWARD = 271,
    SDL_SCANCODE_AC_STOP = 272,
    SDL_SCANCODE_AC_REFRESH = 273,
    SDL_SCANCODE_AC_BOOKMARKS = 274,
# 378 "D:\\Libraries\\include\\SDL2/SDL_scancode.h"
    SDL_SCANCODE_BRIGHTNESSDOWN = 275,
    SDL_SCANCODE_BRIGHTNESSUP = 276,
    SDL_SCANCODE_DISPLAYSWITCH = 277,

    SDL_SCANCODE_KBDILLUMTOGGLE = 278,
    SDL_SCANCODE_KBDILLUMDOWN = 279,
    SDL_SCANCODE_KBDILLUMUP = 280,
    SDL_SCANCODE_EJECT = 281,
    SDL_SCANCODE_SLEEP = 282,

    SDL_SCANCODE_APP1 = 283,
    SDL_SCANCODE_APP2 = 284,
# 400 "D:\\Libraries\\include\\SDL2/SDL_scancode.h"
    SDL_SCANCODE_AUDIOREWIND = 285,
    SDL_SCANCODE_AUDIOFASTFORWARD = 286,





    SDL_NUM_SCANCODES = 512

} SDL_Scancode;
# 33 "D:\\Libraries\\include\\SDL2/SDL_keycode.h" 2
# 45 "D:\\Libraries\\include\\SDL2/SDL_keycode.h"
typedef Sint32 SDL_Keycode;




enum
{
    SDLK_UNKNOWN = 0,

    SDLK_RETURN = '\r',
    SDLK_ESCAPE = '\033',
    SDLK_BACKSPACE = '\b',
    SDLK_TAB = '\t',
    SDLK_SPACE = ' ',
    SDLK_EXCLAIM = '!',
    SDLK_QUOTEDBL = '"',
    SDLK_HASH = '#',
    SDLK_PERCENT = '%',
    SDLK_DOLLAR = '$',
    SDLK_AMPERSAND = '&',
    SDLK_QUOTE = '\'',
    SDLK_LEFTPAREN = '(',
    SDLK_RIGHTPAREN = ')',
    SDLK_ASTERISK = '*',
    SDLK_PLUS = '+',
    SDLK_COMMA = ',',
    SDLK_MINUS = '-',
    SDLK_PERIOD = '.',
    SDLK_SLASH = '/',
    SDLK_0 = '0',
    SDLK_1 = '1',
    SDLK_2 = '2',
    SDLK_3 = '3',
    SDLK_4 = '4',
    SDLK_5 = '5',
    SDLK_6 = '6',
    SDLK_7 = '7',
    SDLK_8 = '8',
    SDLK_9 = '9',
    SDLK_COLON = ':',
    SDLK_SEMICOLON = ';',
    SDLK_LESS = '<',
    SDLK_EQUALS = '=',
    SDLK_GREATER = '>',
    SDLK_QUESTION = '?',
    SDLK_AT = '@',



    SDLK_LEFTBRACKET = '[',
    SDLK_BACKSLASH = '\\',
    SDLK_RIGHTBRACKET = ']',
    SDLK_CARET = '^',
    SDLK_UNDERSCORE = '_',
    SDLK_BACKQUOTE = '`',
    SDLK_a = 'a',
    SDLK_b = 'b',
    SDLK_c = 'c',
    SDLK_d = 'd',
    SDLK_e = 'e',
    SDLK_f = 'f',
    SDLK_g = 'g',
    SDLK_h = 'h',
    SDLK_i = 'i',
    SDLK_j = 'j',
    SDLK_k = 'k',
    SDLK_l = 'l',
    SDLK_m = 'm',
    SDLK_n = 'n',
    SDLK_o = 'o',
    SDLK_p = 'p',
    SDLK_q = 'q',
    SDLK_r = 'r',
    SDLK_s = 's',
    SDLK_t = 't',
    SDLK_u = 'u',
    SDLK_v = 'v',
    SDLK_w = 'w',
    SDLK_x = 'x',
    SDLK_y = 'y',
    SDLK_z = 'z',

    SDLK_CAPSLOCK = (SDL_SCANCODE_CAPSLOCK | (1<<30)),

    SDLK_F1 = (SDL_SCANCODE_F1 | (1<<30)),
    SDLK_F2 = (SDL_SCANCODE_F2 | (1<<30)),
    SDLK_F3 = (SDL_SCANCODE_F3 | (1<<30)),
    SDLK_F4 = (SDL_SCANCODE_F4 | (1<<30)),
    SDLK_F5 = (SDL_SCANCODE_F5 | (1<<30)),
    SDLK_F6 = (SDL_SCANCODE_F6 | (1<<30)),
    SDLK_F7 = (SDL_SCANCODE_F7 | (1<<30)),
    SDLK_F8 = (SDL_SCANCODE_F8 | (1<<30)),
    SDLK_F9 = (SDL_SCANCODE_F9 | (1<<30)),
    SDLK_F10 = (SDL_SCANCODE_F10 | (1<<30)),
    SDLK_F11 = (SDL_SCANCODE_F11 | (1<<30)),
    SDLK_F12 = (SDL_SCANCODE_F12 | (1<<30)),

    SDLK_PRINTSCREEN = (SDL_SCANCODE_PRINTSCREEN | (1<<30)),
    SDLK_SCROLLLOCK = (SDL_SCANCODE_SCROLLLOCK | (1<<30)),
    SDLK_PAUSE = (SDL_SCANCODE_PAUSE | (1<<30)),
    SDLK_INSERT = (SDL_SCANCODE_INSERT | (1<<30)),
    SDLK_HOME = (SDL_SCANCODE_HOME | (1<<30)),
    SDLK_PAGEUP = (SDL_SCANCODE_PAGEUP | (1<<30)),
    SDLK_DELETE = '\177',
    SDLK_END = (SDL_SCANCODE_END | (1<<30)),
    SDLK_PAGEDOWN = (SDL_SCANCODE_PAGEDOWN | (1<<30)),
    SDLK_RIGHT = (SDL_SCANCODE_RIGHT | (1<<30)),
    SDLK_LEFT = (SDL_SCANCODE_LEFT | (1<<30)),
    SDLK_DOWN = (SDL_SCANCODE_DOWN | (1<<30)),
    SDLK_UP = (SDL_SCANCODE_UP | (1<<30)),

    SDLK_NUMLOCKCLEAR = (SDL_SCANCODE_NUMLOCKCLEAR | (1<<30)),
    SDLK_KP_DIVIDE = (SDL_SCANCODE_KP_DIVIDE | (1<<30)),
    SDLK_KP_MULTIPLY = (SDL_SCANCODE_KP_MULTIPLY | (1<<30)),
    SDLK_KP_MINUS = (SDL_SCANCODE_KP_MINUS | (1<<30)),
    SDLK_KP_PLUS = (SDL_SCANCODE_KP_PLUS | (1<<30)),
    SDLK_KP_ENTER = (SDL_SCANCODE_KP_ENTER | (1<<30)),
    SDLK_KP_1 = (SDL_SCANCODE_KP_1 | (1<<30)),
    SDLK_KP_2 = (SDL_SCANCODE_KP_2 | (1<<30)),
    SDLK_KP_3 = (SDL_SCANCODE_KP_3 | (1<<30)),
    SDLK_KP_4 = (SDL_SCANCODE_KP_4 | (1<<30)),
    SDLK_KP_5 = (SDL_SCANCODE_KP_5 | (1<<30)),
    SDLK_KP_6 = (SDL_SCANCODE_KP_6 | (1<<30)),
    SDLK_KP_7 = (SDL_SCANCODE_KP_7 | (1<<30)),
    SDLK_KP_8 = (SDL_SCANCODE_KP_8 | (1<<30)),
    SDLK_KP_9 = (SDL_SCANCODE_KP_9 | (1<<30)),
    SDLK_KP_0 = (SDL_SCANCODE_KP_0 | (1<<30)),
    SDLK_KP_PERIOD = (SDL_SCANCODE_KP_PERIOD | (1<<30)),

    SDLK_APPLICATION = (SDL_SCANCODE_APPLICATION | (1<<30)),
    SDLK_POWER = (SDL_SCANCODE_POWER | (1<<30)),
    SDLK_KP_EQUALS = (SDL_SCANCODE_KP_EQUALS | (1<<30)),
    SDLK_F13 = (SDL_SCANCODE_F13 | (1<<30)),
    SDLK_F14 = (SDL_SCANCODE_F14 | (1<<30)),
    SDLK_F15 = (SDL_SCANCODE_F15 | (1<<30)),
    SDLK_F16 = (SDL_SCANCODE_F16 | (1<<30)),
    SDLK_F17 = (SDL_SCANCODE_F17 | (1<<30)),
    SDLK_F18 = (SDL_SCANCODE_F18 | (1<<30)),
    SDLK_F19 = (SDL_SCANCODE_F19 | (1<<30)),
    SDLK_F20 = (SDL_SCANCODE_F20 | (1<<30)),
    SDLK_F21 = (SDL_SCANCODE_F21 | (1<<30)),
    SDLK_F22 = (SDL_SCANCODE_F22 | (1<<30)),
    SDLK_F23 = (SDL_SCANCODE_F23 | (1<<30)),
    SDLK_F24 = (SDL_SCANCODE_F24 | (1<<30)),
    SDLK_EXECUTE = (SDL_SCANCODE_EXECUTE | (1<<30)),
    SDLK_HELP = (SDL_SCANCODE_HELP | (1<<30)),
    SDLK_MENU = (SDL_SCANCODE_MENU | (1<<30)),
    SDLK_SELECT = (SDL_SCANCODE_SELECT | (1<<30)),
    SDLK_STOP = (SDL_SCANCODE_STOP | (1<<30)),
    SDLK_AGAIN = (SDL_SCANCODE_AGAIN | (1<<30)),
    SDLK_UNDO = (SDL_SCANCODE_UNDO | (1<<30)),
    SDLK_CUT = (SDL_SCANCODE_CUT | (1<<30)),
    SDLK_COPY = (SDL_SCANCODE_COPY | (1<<30)),
    SDLK_PASTE = (SDL_SCANCODE_PASTE | (1<<30)),
    SDLK_FIND = (SDL_SCANCODE_FIND | (1<<30)),
    SDLK_MUTE = (SDL_SCANCODE_MUTE | (1<<30)),
    SDLK_VOLUMEUP = (SDL_SCANCODE_VOLUMEUP | (1<<30)),
    SDLK_VOLUMEDOWN = (SDL_SCANCODE_VOLUMEDOWN | (1<<30)),
    SDLK_KP_COMMA = (SDL_SCANCODE_KP_COMMA | (1<<30)),
    SDLK_KP_EQUALSAS400 =
        (SDL_SCANCODE_KP_EQUALSAS400 | (1<<30)),

    SDLK_ALTERASE = (SDL_SCANCODE_ALTERASE | (1<<30)),
    SDLK_SYSREQ = (SDL_SCANCODE_SYSREQ | (1<<30)),
    SDLK_CANCEL = (SDL_SCANCODE_CANCEL | (1<<30)),
    SDLK_CLEAR = (SDL_SCANCODE_CLEAR | (1<<30)),
    SDLK_PRIOR = (SDL_SCANCODE_PRIOR | (1<<30)),
    SDLK_RETURN2 = (SDL_SCANCODE_RETURN2 | (1<<30)),
    SDLK_SEPARATOR = (SDL_SCANCODE_SEPARATOR | (1<<30)),
    SDLK_OUT = (SDL_SCANCODE_OUT | (1<<30)),
    SDLK_OPER = (SDL_SCANCODE_OPER | (1<<30)),
    SDLK_CLEARAGAIN = (SDL_SCANCODE_CLEARAGAIN | (1<<30)),
    SDLK_CRSEL = (SDL_SCANCODE_CRSEL | (1<<30)),
    SDLK_EXSEL = (SDL_SCANCODE_EXSEL | (1<<30)),

    SDLK_KP_00 = (SDL_SCANCODE_KP_00 | (1<<30)),
    SDLK_KP_000 = (SDL_SCANCODE_KP_000 | (1<<30)),
    SDLK_THOUSANDSSEPARATOR =
        (SDL_SCANCODE_THOUSANDSSEPARATOR | (1<<30)),
    SDLK_DECIMALSEPARATOR =
        (SDL_SCANCODE_DECIMALSEPARATOR | (1<<30)),
    SDLK_CURRENCYUNIT = (SDL_SCANCODE_CURRENCYUNIT | (1<<30)),
    SDLK_CURRENCYSUBUNIT =
        (SDL_SCANCODE_CURRENCYSUBUNIT | (1<<30)),
    SDLK_KP_LEFTPAREN = (SDL_SCANCODE_KP_LEFTPAREN | (1<<30)),
    SDLK_KP_RIGHTPAREN = (SDL_SCANCODE_KP_RIGHTPAREN | (1<<30)),
    SDLK_KP_LEFTBRACE = (SDL_SCANCODE_KP_LEFTBRACE | (1<<30)),
    SDLK_KP_RIGHTBRACE = (SDL_SCANCODE_KP_RIGHTBRACE | (1<<30)),
    SDLK_KP_TAB = (SDL_SCANCODE_KP_TAB | (1<<30)),
    SDLK_KP_BACKSPACE = (SDL_SCANCODE_KP_BACKSPACE | (1<<30)),
    SDLK_KP_A = (SDL_SCANCODE_KP_A | (1<<30)),
    SDLK_KP_B = (SDL_SCANCODE_KP_B | (1<<30)),
    SDLK_KP_C = (SDL_SCANCODE_KP_C | (1<<30)),
    SDLK_KP_D = (SDL_SCANCODE_KP_D | (1<<30)),
    SDLK_KP_E = (SDL_SCANCODE_KP_E | (1<<30)),
    SDLK_KP_F = (SDL_SCANCODE_KP_F | (1<<30)),
    SDLK_KP_XOR = (SDL_SCANCODE_KP_XOR | (1<<30)),
    SDLK_KP_POWER = (SDL_SCANCODE_KP_POWER | (1<<30)),
    SDLK_KP_PERCENT = (SDL_SCANCODE_KP_PERCENT | (1<<30)),
    SDLK_KP_LESS = (SDL_SCANCODE_KP_LESS | (1<<30)),
    SDLK_KP_GREATER = (SDL_SCANCODE_KP_GREATER | (1<<30)),
    SDLK_KP_AMPERSAND = (SDL_SCANCODE_KP_AMPERSAND | (1<<30)),
    SDLK_KP_DBLAMPERSAND =
        (SDL_SCANCODE_KP_DBLAMPERSAND | (1<<30)),
    SDLK_KP_VERTICALBAR =
        (SDL_SCANCODE_KP_VERTICALBAR | (1<<30)),
    SDLK_KP_DBLVERTICALBAR =
        (SDL_SCANCODE_KP_DBLVERTICALBAR | (1<<30)),
    SDLK_KP_COLON = (SDL_SCANCODE_KP_COLON | (1<<30)),
    SDLK_KP_HASH = (SDL_SCANCODE_KP_HASH | (1<<30)),
    SDLK_KP_SPACE = (SDL_SCANCODE_KP_SPACE | (1<<30)),
    SDLK_KP_AT = (SDL_SCANCODE_KP_AT | (1<<30)),
    SDLK_KP_EXCLAM = (SDL_SCANCODE_KP_EXCLAM | (1<<30)),
    SDLK_KP_MEMSTORE = (SDL_SCANCODE_KP_MEMSTORE | (1<<30)),
    SDLK_KP_MEMRECALL = (SDL_SCANCODE_KP_MEMRECALL | (1<<30)),
    SDLK_KP_MEMCLEAR = (SDL_SCANCODE_KP_MEMCLEAR | (1<<30)),
    SDLK_KP_MEMADD = (SDL_SCANCODE_KP_MEMADD | (1<<30)),
    SDLK_KP_MEMSUBTRACT =
        (SDL_SCANCODE_KP_MEMSUBTRACT | (1<<30)),
    SDLK_KP_MEMMULTIPLY =
        (SDL_SCANCODE_KP_MEMMULTIPLY | (1<<30)),
    SDLK_KP_MEMDIVIDE = (SDL_SCANCODE_KP_MEMDIVIDE | (1<<30)),
    SDLK_KP_PLUSMINUS = (SDL_SCANCODE_KP_PLUSMINUS | (1<<30)),
    SDLK_KP_CLEAR = (SDL_SCANCODE_KP_CLEAR | (1<<30)),
    SDLK_KP_CLEARENTRY = (SDL_SCANCODE_KP_CLEARENTRY | (1<<30)),
    SDLK_KP_BINARY = (SDL_SCANCODE_KP_BINARY | (1<<30)),
    SDLK_KP_OCTAL = (SDL_SCANCODE_KP_OCTAL | (1<<30)),
    SDLK_KP_DECIMAL = (SDL_SCANCODE_KP_DECIMAL | (1<<30)),
    SDLK_KP_HEXADECIMAL =
        (SDL_SCANCODE_KP_HEXADECIMAL | (1<<30)),

    SDLK_LCTRL = (SDL_SCANCODE_LCTRL | (1<<30)),
    SDLK_LSHIFT = (SDL_SCANCODE_LSHIFT | (1<<30)),
    SDLK_LALT = (SDL_SCANCODE_LALT | (1<<30)),
    SDLK_LGUI = (SDL_SCANCODE_LGUI | (1<<30)),
    SDLK_RCTRL = (SDL_SCANCODE_RCTRL | (1<<30)),
    SDLK_RSHIFT = (SDL_SCANCODE_RSHIFT | (1<<30)),
    SDLK_RALT = (SDL_SCANCODE_RALT | (1<<30)),
    SDLK_RGUI = (SDL_SCANCODE_RGUI | (1<<30)),

    SDLK_MODE = (SDL_SCANCODE_MODE | (1<<30)),

    SDLK_AUDIONEXT = (SDL_SCANCODE_AUDIONEXT | (1<<30)),
    SDLK_AUDIOPREV = (SDL_SCANCODE_AUDIOPREV | (1<<30)),
    SDLK_AUDIOSTOP = (SDL_SCANCODE_AUDIOSTOP | (1<<30)),
    SDLK_AUDIOPLAY = (SDL_SCANCODE_AUDIOPLAY | (1<<30)),
    SDLK_AUDIOMUTE = (SDL_SCANCODE_AUDIOMUTE | (1<<30)),
    SDLK_MEDIASELECT = (SDL_SCANCODE_MEDIASELECT | (1<<30)),
    SDLK_WWW = (SDL_SCANCODE_WWW | (1<<30)),
    SDLK_MAIL = (SDL_SCANCODE_MAIL | (1<<30)),
    SDLK_CALCULATOR = (SDL_SCANCODE_CALCULATOR | (1<<30)),
    SDLK_COMPUTER = (SDL_SCANCODE_COMPUTER | (1<<30)),
    SDLK_AC_SEARCH = (SDL_SCANCODE_AC_SEARCH | (1<<30)),
    SDLK_AC_HOME = (SDL_SCANCODE_AC_HOME | (1<<30)),
    SDLK_AC_BACK = (SDL_SCANCODE_AC_BACK | (1<<30)),
    SDLK_AC_FORWARD = (SDL_SCANCODE_AC_FORWARD | (1<<30)),
    SDLK_AC_STOP = (SDL_SCANCODE_AC_STOP | (1<<30)),
    SDLK_AC_REFRESH = (SDL_SCANCODE_AC_REFRESH | (1<<30)),
    SDLK_AC_BOOKMARKS = (SDL_SCANCODE_AC_BOOKMARKS | (1<<30)),

    SDLK_BRIGHTNESSDOWN =
        (SDL_SCANCODE_BRIGHTNESSDOWN | (1<<30)),
    SDLK_BRIGHTNESSUP = (SDL_SCANCODE_BRIGHTNESSUP | (1<<30)),
    SDLK_DISPLAYSWITCH = (SDL_SCANCODE_DISPLAYSWITCH | (1<<30)),
    SDLK_KBDILLUMTOGGLE =
        (SDL_SCANCODE_KBDILLUMTOGGLE | (1<<30)),
    SDLK_KBDILLUMDOWN = (SDL_SCANCODE_KBDILLUMDOWN | (1<<30)),
    SDLK_KBDILLUMUP = (SDL_SCANCODE_KBDILLUMUP | (1<<30)),
    SDLK_EJECT = (SDL_SCANCODE_EJECT | (1<<30)),
    SDLK_SLEEP = (SDL_SCANCODE_SLEEP | (1<<30)),
    SDLK_APP1 = (SDL_SCANCODE_APP1 | (1<<30)),
    SDLK_APP2 = (SDL_SCANCODE_APP2 | (1<<30)),

    SDLK_AUDIOREWIND = (SDL_SCANCODE_AUDIOREWIND | (1<<30)),
    SDLK_AUDIOFASTFORWARD = (SDL_SCANCODE_AUDIOFASTFORWARD | (1<<30))
};




typedef enum
{
    KMOD_NONE = 0x0000,
    KMOD_LSHIFT = 0x0001,
    KMOD_RSHIFT = 0x0002,
    KMOD_LCTRL = 0x0040,
    KMOD_RCTRL = 0x0080,
    KMOD_LALT = 0x0100,
    KMOD_RALT = 0x0200,
    KMOD_LGUI = 0x0400,
    KMOD_RGUI = 0x0800,
    KMOD_NUM = 0x1000,
    KMOD_CAPS = 0x2000,
    KMOD_MODE = 0x4000,
    KMOD_RESERVED = 0x8000
} SDL_Keymod;
# 34 "D:\\Libraries\\include\\SDL2/SDL_keyboard.h" 2


# 1 "D:\\Libraries\\include\\SDL2/begin_code.h" 1
# 106 "D:\\Libraries\\include\\SDL2/begin_code.h"
#pragma warning(disable: 4103)


#pragma clang diagnostic ignored "-Wpragma-pack"






#pragma pack(push,8)
# 37 "D:\\Libraries\\include\\SDL2/SDL_keyboard.h" 2
# 47 "D:\\Libraries\\include\\SDL2/SDL_keyboard.h"
typedef struct SDL_Keysym
{
    SDL_Scancode scancode;
    SDL_Keycode sym;
    Uint16 mod;
    Uint32 unused;
} SDL_Keysym;






extern __declspec(dllexport) SDL_Window * __cdecl SDL_GetKeyboardFocus(void);
# 77 "D:\\Libraries\\include\\SDL2/SDL_keyboard.h"
extern __declspec(dllexport) const Uint8 *__cdecl SDL_GetKeyboardState(int *numkeys);




extern __declspec(dllexport) SDL_Keymod __cdecl SDL_GetModState(void);






extern __declspec(dllexport) void __cdecl SDL_SetModState(SDL_Keymod modstate);
# 99 "D:\\Libraries\\include\\SDL2/SDL_keyboard.h"
extern __declspec(dllexport) SDL_Keycode __cdecl SDL_GetKeyFromScancode(SDL_Scancode scancode);
# 109 "D:\\Libraries\\include\\SDL2/SDL_keyboard.h"
extern __declspec(dllexport) SDL_Scancode __cdecl SDL_GetScancodeFromKey(SDL_Keycode key);
# 120 "D:\\Libraries\\include\\SDL2/SDL_keyboard.h"
extern __declspec(dllexport) const char *__cdecl SDL_GetScancodeName(SDL_Scancode scancode);
# 129 "D:\\Libraries\\include\\SDL2/SDL_keyboard.h"
extern __declspec(dllexport) SDL_Scancode __cdecl SDL_GetScancodeFromName(const char *name);
# 141 "D:\\Libraries\\include\\SDL2/SDL_keyboard.h"
extern __declspec(dllexport) const char *__cdecl SDL_GetKeyName(SDL_Keycode key);
# 150 "D:\\Libraries\\include\\SDL2/SDL_keyboard.h"
extern __declspec(dllexport) SDL_Keycode __cdecl SDL_GetKeyFromName(const char *name);
# 160 "D:\\Libraries\\include\\SDL2/SDL_keyboard.h"
extern __declspec(dllexport) void __cdecl SDL_StartTextInput(void);







extern __declspec(dllexport) SDL_bool __cdecl SDL_IsTextInputActive(void);
# 177 "D:\\Libraries\\include\\SDL2/SDL_keyboard.h"
extern __declspec(dllexport) void __cdecl SDL_StopTextInput(void);







extern __declspec(dllexport) void __cdecl SDL_SetTextInputRect(SDL_Rect *rect);
# 196 "D:\\Libraries\\include\\SDL2/SDL_keyboard.h"
extern __declspec(dllexport) SDL_bool __cdecl SDL_HasScreenKeyboardSupport(void);
# 207 "D:\\Libraries\\include\\SDL2/SDL_keyboard.h"
extern __declspec(dllexport) SDL_bool __cdecl SDL_IsScreenKeyboardShown(SDL_Window *window);






# 1 "D:\\Libraries\\include\\SDL2/close_code.h" 1
# 39 "D:\\Libraries\\include\\SDL2/close_code.h"
#pragma pack(pop)
# 214 "D:\\Libraries\\include\\SDL2/SDL_keyboard.h" 2
# 35 "D:\\Libraries\\include\\SDL2/SDL_events.h" 2
# 1 "D:\\Libraries\\include\\SDL2/SDL_mouse.h" 1
# 35 "D:\\Libraries\\include\\SDL2/SDL_mouse.h"
# 1 "D:\\Libraries\\include\\SDL2/begin_code.h" 1
# 106 "D:\\Libraries\\include\\SDL2/begin_code.h"
#pragma warning(disable: 4103)


#pragma clang diagnostic ignored "-Wpragma-pack"






#pragma pack(push,8)
# 36 "D:\\Libraries\\include\\SDL2/SDL_mouse.h" 2





typedef struct SDL_Cursor SDL_Cursor;




typedef enum
{
    SDL_SYSTEM_CURSOR_ARROW,
    SDL_SYSTEM_CURSOR_IBEAM,
    SDL_SYSTEM_CURSOR_WAIT,
    SDL_SYSTEM_CURSOR_CROSSHAIR,
    SDL_SYSTEM_CURSOR_WAITARROW,
    SDL_SYSTEM_CURSOR_SIZENWSE,
    SDL_SYSTEM_CURSOR_SIZENESW,
    SDL_SYSTEM_CURSOR_SIZEWE,
    SDL_SYSTEM_CURSOR_SIZENS,
    SDL_SYSTEM_CURSOR_SIZEALL,
    SDL_SYSTEM_CURSOR_NO,
    SDL_SYSTEM_CURSOR_HAND,
    SDL_NUM_SYSTEM_CURSORS
} SDL_SystemCursor;




typedef enum
{
    SDL_MOUSEWHEEL_NORMAL,
    SDL_MOUSEWHEEL_FLIPPED
} SDL_MouseWheelDirection;






extern __declspec(dllexport) SDL_Window * __cdecl SDL_GetMouseFocus(void);
# 87 "D:\\Libraries\\include\\SDL2/SDL_mouse.h"
extern __declspec(dllexport) Uint32 __cdecl SDL_GetMouseState(int *x, int *y);
# 112 "D:\\Libraries\\include\\SDL2/SDL_mouse.h"
extern __declspec(dllexport) Uint32 __cdecl SDL_GetGlobalMouseState(int *x, int *y);
# 121 "D:\\Libraries\\include\\SDL2/SDL_mouse.h"
extern __declspec(dllexport) Uint32 __cdecl SDL_GetRelativeMouseState(int *x, int *y);
# 132 "D:\\Libraries\\include\\SDL2/SDL_mouse.h"
extern __declspec(dllexport) void __cdecl SDL_WarpMouseInWindow(SDL_Window * window,
                                                   int x, int y);
# 144 "D:\\Libraries\\include\\SDL2/SDL_mouse.h"
extern __declspec(dllexport) int __cdecl SDL_WarpMouseGlobal(int x, int y);
# 162 "D:\\Libraries\\include\\SDL2/SDL_mouse.h"
extern __declspec(dllexport) int __cdecl SDL_SetRelativeMouseMode(SDL_bool enabled);
# 193 "D:\\Libraries\\include\\SDL2/SDL_mouse.h"
extern __declspec(dllexport) int __cdecl SDL_CaptureMouse(SDL_bool enabled);






extern __declspec(dllexport) SDL_bool __cdecl SDL_GetRelativeMouseMode(void);
# 220 "D:\\Libraries\\include\\SDL2/SDL_mouse.h"
extern __declspec(dllexport) SDL_Cursor *__cdecl SDL_CreateCursor(const Uint8 * data,
                                                     const Uint8 * mask,
                                                     int w, int h, int hot_x,
                                                     int hot_y);






extern __declspec(dllexport) SDL_Cursor *__cdecl SDL_CreateColorCursor(SDL_Surface *surface,
                                                          int hot_x,
                                                          int hot_y);






extern __declspec(dllexport) SDL_Cursor *__cdecl SDL_CreateSystemCursor(SDL_SystemCursor id);




extern __declspec(dllexport) void __cdecl SDL_SetCursor(SDL_Cursor * cursor);




extern __declspec(dllexport) SDL_Cursor *__cdecl SDL_GetCursor(void);




extern __declspec(dllexport) SDL_Cursor *__cdecl SDL_GetDefaultCursor(void);
# 263 "D:\\Libraries\\include\\SDL2/SDL_mouse.h"
extern __declspec(dllexport) void __cdecl SDL_FreeCursor(SDL_Cursor * cursor);
# 273 "D:\\Libraries\\include\\SDL2/SDL_mouse.h"
extern __declspec(dllexport) int __cdecl SDL_ShowCursor(int toggle);
# 298 "D:\\Libraries\\include\\SDL2/SDL_mouse.h"
# 1 "D:\\Libraries\\include\\SDL2/close_code.h" 1
# 39 "D:\\Libraries\\include\\SDL2/close_code.h"
#pragma pack(pop)
# 299 "D:\\Libraries\\include\\SDL2/SDL_mouse.h" 2
# 36 "D:\\Libraries\\include\\SDL2/SDL_events.h" 2
# 1 "D:\\Libraries\\include\\SDL2/SDL_joystick.h" 1
# 45 "D:\\Libraries\\include\\SDL2/SDL_joystick.h"
# 1 "D:\\Libraries\\include\\SDL2/begin_code.h" 1
# 106 "D:\\Libraries\\include\\SDL2/begin_code.h"
#pragma warning(disable: 4103)


#pragma clang diagnostic ignored "-Wpragma-pack"






#pragma pack(push,8)
# 46 "D:\\Libraries\\include\\SDL2/SDL_joystick.h" 2
# 66 "D:\\Libraries\\include\\SDL2/SDL_joystick.h"
struct _SDL_Joystick;
typedef struct _SDL_Joystick SDL_Joystick;


typedef struct {
    Uint8 data[16];
} SDL_JoystickGUID;
# 81 "D:\\Libraries\\include\\SDL2/SDL_joystick.h"
typedef Sint32 SDL_JoystickID;

typedef enum
{
    SDL_JOYSTICK_TYPE_UNKNOWN,
    SDL_JOYSTICK_TYPE_GAMECONTROLLER,
    SDL_JOYSTICK_TYPE_WHEEL,
    SDL_JOYSTICK_TYPE_ARCADE_STICK,
    SDL_JOYSTICK_TYPE_FLIGHT_STICK,
    SDL_JOYSTICK_TYPE_DANCE_PAD,
    SDL_JOYSTICK_TYPE_GUITAR,
    SDL_JOYSTICK_TYPE_DRUM_KIT,
    SDL_JOYSTICK_TYPE_ARCADE_PAD,
    SDL_JOYSTICK_TYPE_THROTTLE
} SDL_JoystickType;

typedef enum
{
    SDL_JOYSTICK_POWER_UNKNOWN = -1,
    SDL_JOYSTICK_POWER_EMPTY,
    SDL_JOYSTICK_POWER_LOW,
    SDL_JOYSTICK_POWER_MEDIUM,
    SDL_JOYSTICK_POWER_FULL,
    SDL_JOYSTICK_POWER_WIRED,
    SDL_JOYSTICK_POWER_MAX
} SDL_JoystickPowerLevel;
# 120 "D:\\Libraries\\include\\SDL2/SDL_joystick.h"
extern __declspec(dllexport) void __cdecl SDL_LockJoysticks(void);
extern __declspec(dllexport) void __cdecl SDL_UnlockJoysticks(void);




extern __declspec(dllexport) int __cdecl SDL_NumJoysticks(void);






extern __declspec(dllexport) const char *__cdecl SDL_JoystickNameForIndex(int device_index);





extern __declspec(dllexport) int __cdecl SDL_JoystickGetDevicePlayerIndex(int device_index);





extern __declspec(dllexport) SDL_JoystickGUID __cdecl SDL_JoystickGetDeviceGUID(int device_index);






extern __declspec(dllexport) Uint16 __cdecl SDL_JoystickGetDeviceVendor(int device_index);






extern __declspec(dllexport) Uint16 __cdecl SDL_JoystickGetDeviceProduct(int device_index);






extern __declspec(dllexport) Uint16 __cdecl SDL_JoystickGetDeviceProductVersion(int device_index);





extern __declspec(dllexport) SDL_JoystickType __cdecl SDL_JoystickGetDeviceType(int device_index);






extern __declspec(dllexport) SDL_JoystickID __cdecl SDL_JoystickGetDeviceInstanceID(int device_index);
# 190 "D:\\Libraries\\include\\SDL2/SDL_joystick.h"
extern __declspec(dllexport) SDL_Joystick *__cdecl SDL_JoystickOpen(int device_index);




extern __declspec(dllexport) SDL_Joystick *__cdecl SDL_JoystickFromInstanceID(SDL_JoystickID joyid);





extern __declspec(dllexport) const char *__cdecl SDL_JoystickName(SDL_Joystick * joystick);






extern __declspec(dllexport) int __cdecl SDL_JoystickGetPlayerIndex(SDL_Joystick * joystick);




extern __declspec(dllexport) SDL_JoystickGUID __cdecl SDL_JoystickGetGUID(SDL_Joystick * joystick);





extern __declspec(dllexport) Uint16 __cdecl SDL_JoystickGetVendor(SDL_Joystick * joystick);





extern __declspec(dllexport) Uint16 __cdecl SDL_JoystickGetProduct(SDL_Joystick * joystick);





extern __declspec(dllexport) Uint16 __cdecl SDL_JoystickGetProductVersion(SDL_Joystick * joystick);




extern __declspec(dllexport) SDL_JoystickType __cdecl SDL_JoystickGetType(SDL_Joystick * joystick);





extern __declspec(dllexport) void __cdecl SDL_JoystickGetGUIDString(SDL_JoystickGUID guid, char *pszGUID, int cbGUID);




extern __declspec(dllexport) SDL_JoystickGUID __cdecl SDL_JoystickGetGUIDFromString(const char *pchGUID);




extern __declspec(dllexport) SDL_bool __cdecl SDL_JoystickGetAttached(SDL_Joystick * joystick);




extern __declspec(dllexport) SDL_JoystickID __cdecl SDL_JoystickInstanceID(SDL_Joystick * joystick);




extern __declspec(dllexport) int __cdecl SDL_JoystickNumAxes(SDL_Joystick * joystick);







extern __declspec(dllexport) int __cdecl SDL_JoystickNumBalls(SDL_Joystick * joystick);




extern __declspec(dllexport) int __cdecl SDL_JoystickNumHats(SDL_Joystick * joystick);




extern __declspec(dllexport) int __cdecl SDL_JoystickNumButtons(SDL_Joystick * joystick);







extern __declspec(dllexport) void __cdecl SDL_JoystickUpdate(void);
# 299 "D:\\Libraries\\include\\SDL2/SDL_joystick.h"
extern __declspec(dllexport) int __cdecl SDL_JoystickEventState(int state);
# 310 "D:\\Libraries\\include\\SDL2/SDL_joystick.h"
extern __declspec(dllexport) Sint16 __cdecl SDL_JoystickGetAxis(SDL_Joystick * joystick,
                                                   int axis);
# 322 "D:\\Libraries\\include\\SDL2/SDL_joystick.h"
extern __declspec(dllexport) SDL_bool __cdecl SDL_JoystickGetAxisInitialState(SDL_Joystick * joystick,
                                                   int axis, Sint16 *state);
# 356 "D:\\Libraries\\include\\SDL2/SDL_joystick.h"
extern __declspec(dllexport) Uint8 __cdecl SDL_JoystickGetHat(SDL_Joystick * joystick,
                                                 int hat);
# 366 "D:\\Libraries\\include\\SDL2/SDL_joystick.h"
extern __declspec(dllexport) int __cdecl SDL_JoystickGetBall(SDL_Joystick * joystick,
                                                int ball, int *dx, int *dy);






extern __declspec(dllexport) Uint8 __cdecl SDL_JoystickGetButton(SDL_Joystick * joystick,
                                                    int button);
# 388 "D:\\Libraries\\include\\SDL2/SDL_joystick.h"
extern __declspec(dllexport) int __cdecl SDL_JoystickRumble(SDL_Joystick * joystick, Uint16 low_frequency_rumble, Uint16 high_frequency_rumble, Uint32 duration_ms);




extern __declspec(dllexport) void __cdecl SDL_JoystickClose(SDL_Joystick * joystick);




extern __declspec(dllexport) SDL_JoystickPowerLevel __cdecl SDL_JoystickCurrentPowerLevel(SDL_Joystick * joystick);






# 1 "D:\\Libraries\\include\\SDL2/close_code.h" 1
# 39 "D:\\Libraries\\include\\SDL2/close_code.h"
#pragma pack(pop)
# 405 "D:\\Libraries\\include\\SDL2/SDL_joystick.h" 2
# 37 "D:\\Libraries\\include\\SDL2/SDL_events.h" 2
# 1 "D:\\Libraries\\include\\SDL2/SDL_gamecontroller.h" 1
# 36 "D:\\Libraries\\include\\SDL2/SDL_gamecontroller.h"
# 1 "D:\\Libraries\\include\\SDL2/begin_code.h" 1
# 106 "D:\\Libraries\\include\\SDL2/begin_code.h"
#pragma warning(disable: 4103)


#pragma clang diagnostic ignored "-Wpragma-pack"






#pragma pack(push,8)
# 37 "D:\\Libraries\\include\\SDL2/SDL_gamecontroller.h" 2
# 57 "D:\\Libraries\\include\\SDL2/SDL_gamecontroller.h"
struct _SDL_GameController;
typedef struct _SDL_GameController SDL_GameController;


typedef enum
{
    SDL_CONTROLLER_BINDTYPE_NONE = 0,
    SDL_CONTROLLER_BINDTYPE_BUTTON,
    SDL_CONTROLLER_BINDTYPE_AXIS,
    SDL_CONTROLLER_BINDTYPE_HAT
} SDL_GameControllerBindType;




typedef struct SDL_GameControllerButtonBind
{
    SDL_GameControllerBindType bindType;
    union
    {
        int button;
        int axis;
        struct {
            int hat;
            int hat_mask;
        } hat;
    } value;

} SDL_GameControllerButtonBind;
# 122 "D:\\Libraries\\include\\SDL2/SDL_gamecontroller.h"
extern __declspec(dllexport) int __cdecl SDL_GameControllerAddMappingsFromRW(SDL_RWops * rw, int freerw);
# 136 "D:\\Libraries\\include\\SDL2/SDL_gamecontroller.h"
extern __declspec(dllexport) int __cdecl SDL_GameControllerAddMapping(const char* mappingString);






extern __declspec(dllexport) int __cdecl SDL_GameControllerNumMappings(void);






extern __declspec(dllexport) char * __cdecl SDL_GameControllerMappingForIndex(int mapping_index);






extern __declspec(dllexport) char * __cdecl SDL_GameControllerMappingForGUID(SDL_JoystickGUID guid);






extern __declspec(dllexport) char * __cdecl SDL_GameControllerMapping(SDL_GameController * gamecontroller);




extern __declspec(dllexport) SDL_bool __cdecl SDL_IsGameController(int joystick_index);






extern __declspec(dllexport) const char *__cdecl SDL_GameControllerNameForIndex(int joystick_index);







extern __declspec(dllexport) char *__cdecl SDL_GameControllerMappingForDeviceIndex(int joystick_index);
# 195 "D:\\Libraries\\include\\SDL2/SDL_gamecontroller.h"
extern __declspec(dllexport) SDL_GameController *__cdecl SDL_GameControllerOpen(int joystick_index);




extern __declspec(dllexport) SDL_GameController *__cdecl SDL_GameControllerFromInstanceID(SDL_JoystickID joyid);




extern __declspec(dllexport) const char *__cdecl SDL_GameControllerName(SDL_GameController *gamecontroller);






extern __declspec(dllexport) int __cdecl SDL_GameControllerGetPlayerIndex(SDL_GameController *gamecontroller);





extern __declspec(dllexport) Uint16 __cdecl SDL_GameControllerGetVendor(SDL_GameController * gamecontroller);





extern __declspec(dllexport) Uint16 __cdecl SDL_GameControllerGetProduct(SDL_GameController * gamecontroller);





extern __declspec(dllexport) Uint16 __cdecl SDL_GameControllerGetProductVersion(SDL_GameController * gamecontroller);





extern __declspec(dllexport) SDL_bool __cdecl SDL_GameControllerGetAttached(SDL_GameController *gamecontroller);




extern __declspec(dllexport) SDL_Joystick *__cdecl SDL_GameControllerGetJoystick(SDL_GameController *gamecontroller);
# 252 "D:\\Libraries\\include\\SDL2/SDL_gamecontroller.h"
extern __declspec(dllexport) int __cdecl SDL_GameControllerEventState(int state);







extern __declspec(dllexport) void __cdecl SDL_GameControllerUpdate(void);
# 272 "D:\\Libraries\\include\\SDL2/SDL_gamecontroller.h"
typedef enum
{
    SDL_CONTROLLER_AXIS_INVALID = -1,
    SDL_CONTROLLER_AXIS_LEFTX,
    SDL_CONTROLLER_AXIS_LEFTY,
    SDL_CONTROLLER_AXIS_RIGHTX,
    SDL_CONTROLLER_AXIS_RIGHTY,
    SDL_CONTROLLER_AXIS_TRIGGERLEFT,
    SDL_CONTROLLER_AXIS_TRIGGERRIGHT,
    SDL_CONTROLLER_AXIS_MAX
} SDL_GameControllerAxis;




extern __declspec(dllexport) SDL_GameControllerAxis __cdecl SDL_GameControllerGetAxisFromString(const char *pchString);




extern __declspec(dllexport) const char* __cdecl SDL_GameControllerGetStringForAxis(SDL_GameControllerAxis axis);




extern __declspec(dllexport) SDL_GameControllerButtonBind __cdecl
SDL_GameControllerGetBindForAxis(SDL_GameController *gamecontroller,
                                 SDL_GameControllerAxis axis);
# 309 "D:\\Libraries\\include\\SDL2/SDL_gamecontroller.h"
extern __declspec(dllexport) Sint16 __cdecl
SDL_GameControllerGetAxis(SDL_GameController *gamecontroller,
                          SDL_GameControllerAxis axis);




typedef enum
{
    SDL_CONTROLLER_BUTTON_INVALID = -1,
    SDL_CONTROLLER_BUTTON_A,
    SDL_CONTROLLER_BUTTON_B,
    SDL_CONTROLLER_BUTTON_X,
    SDL_CONTROLLER_BUTTON_Y,
    SDL_CONTROLLER_BUTTON_BACK,
    SDL_CONTROLLER_BUTTON_GUIDE,
    SDL_CONTROLLER_BUTTON_START,
    SDL_CONTROLLER_BUTTON_LEFTSTICK,
    SDL_CONTROLLER_BUTTON_RIGHTSTICK,
    SDL_CONTROLLER_BUTTON_LEFTSHOULDER,
    SDL_CONTROLLER_BUTTON_RIGHTSHOULDER,
    SDL_CONTROLLER_BUTTON_DPAD_UP,
    SDL_CONTROLLER_BUTTON_DPAD_DOWN,
    SDL_CONTROLLER_BUTTON_DPAD_LEFT,
    SDL_CONTROLLER_BUTTON_DPAD_RIGHT,
    SDL_CONTROLLER_BUTTON_MAX
} SDL_GameControllerButton;




extern __declspec(dllexport) SDL_GameControllerButton __cdecl SDL_GameControllerGetButtonFromString(const char *pchString);




extern __declspec(dllexport) const char* __cdecl SDL_GameControllerGetStringForButton(SDL_GameControllerButton button);




extern __declspec(dllexport) SDL_GameControllerButtonBind __cdecl
SDL_GameControllerGetBindForButton(SDL_GameController *gamecontroller,
                                   SDL_GameControllerButton button);







extern __declspec(dllexport) Uint8 __cdecl SDL_GameControllerGetButton(SDL_GameController *gamecontroller,
                                                          SDL_GameControllerButton button);
# 374 "D:\\Libraries\\include\\SDL2/SDL_gamecontroller.h"
extern __declspec(dllexport) int __cdecl SDL_GameControllerRumble(SDL_GameController *gamecontroller, Uint16 low_frequency_rumble, Uint16 high_frequency_rumble, Uint32 duration_ms);




extern __declspec(dllexport) void __cdecl SDL_GameControllerClose(SDL_GameController *gamecontroller);







# 1 "D:\\Libraries\\include\\SDL2/close_code.h" 1
# 39 "D:\\Libraries\\include\\SDL2/close_code.h"
#pragma pack(pop)
# 387 "D:\\Libraries\\include\\SDL2/SDL_gamecontroller.h" 2
# 38 "D:\\Libraries\\include\\SDL2/SDL_events.h" 2
# 1 "D:\\Libraries\\include\\SDL2/SDL_quit.h" 1
# 39 "D:\\Libraries\\include\\SDL2/SDL_events.h" 2
# 1 "D:\\Libraries\\include\\SDL2/SDL_gesture.h" 1
# 35 "D:\\Libraries\\include\\SDL2/SDL_gesture.h"
# 1 "D:\\Libraries\\include\\SDL2/SDL_touch.h" 1
# 35 "D:\\Libraries\\include\\SDL2/SDL_touch.h"
# 1 "D:\\Libraries\\include\\SDL2/begin_code.h" 1
# 106 "D:\\Libraries\\include\\SDL2/begin_code.h"
#pragma warning(disable: 4103)


#pragma clang diagnostic ignored "-Wpragma-pack"






#pragma pack(push,8)
# 36 "D:\\Libraries\\include\\SDL2/SDL_touch.h" 2





typedef Sint64 SDL_TouchID;
typedef Sint64 SDL_FingerID;

typedef enum
{
    SDL_TOUCH_DEVICE_INVALID = -1,
    SDL_TOUCH_DEVICE_DIRECT,
    SDL_TOUCH_DEVICE_INDIRECT_ABSOLUTE,
    SDL_TOUCH_DEVICE_INDIRECT_RELATIVE
} SDL_TouchDeviceType;

typedef struct SDL_Finger
{
    SDL_FingerID id;
    float x;
    float y;
    float pressure;
} SDL_Finger;
# 72 "D:\\Libraries\\include\\SDL2/SDL_touch.h"
extern __declspec(dllexport) int __cdecl SDL_GetNumTouchDevices(void);




extern __declspec(dllexport) SDL_TouchID __cdecl SDL_GetTouchDevice(int index);




extern __declspec(dllexport) SDL_TouchDeviceType __cdecl SDL_GetTouchDeviceType(SDL_TouchID touchID);




extern __declspec(dllexport) int __cdecl SDL_GetNumTouchFingers(SDL_TouchID touchID);




extern __declspec(dllexport) SDL_Finger * __cdecl SDL_GetTouchFinger(SDL_TouchID touchID, int index);






# 1 "D:\\Libraries\\include\\SDL2/close_code.h" 1
# 39 "D:\\Libraries\\include\\SDL2/close_code.h"
#pragma pack(pop)
# 99 "D:\\Libraries\\include\\SDL2/SDL_touch.h" 2
# 36 "D:\\Libraries\\include\\SDL2/SDL_gesture.h" 2


# 1 "D:\\Libraries\\include\\SDL2/begin_code.h" 1
# 106 "D:\\Libraries\\include\\SDL2/begin_code.h"
#pragma warning(disable: 4103)


#pragma clang diagnostic ignored "-Wpragma-pack"






#pragma pack(push,8)
# 39 "D:\\Libraries\\include\\SDL2/SDL_gesture.h" 2





typedef Sint64 SDL_GestureID;
# 53 "D:\\Libraries\\include\\SDL2/SDL_gesture.h"
extern __declspec(dllexport) int __cdecl SDL_RecordGesture(SDL_TouchID touchId);







extern __declspec(dllexport) int __cdecl SDL_SaveAllDollarTemplates(SDL_RWops *dst);






extern __declspec(dllexport) int __cdecl SDL_SaveDollarTemplate(SDL_GestureID gestureId,SDL_RWops *dst);







extern __declspec(dllexport) int __cdecl SDL_LoadDollarTemplates(SDL_TouchID touchId, SDL_RWops *src);







# 1 "D:\\Libraries\\include\\SDL2/close_code.h" 1
# 39 "D:\\Libraries\\include\\SDL2/close_code.h"
#pragma pack(pop)
# 84 "D:\\Libraries\\include\\SDL2/SDL_gesture.h" 2
# 40 "D:\\Libraries\\include\\SDL2/SDL_events.h" 2


# 1 "D:\\Libraries\\include\\SDL2/begin_code.h" 1
# 106 "D:\\Libraries\\include\\SDL2/begin_code.h"
#pragma warning(disable: 4103)


#pragma clang diagnostic ignored "-Wpragma-pack"






#pragma pack(push,8)
# 43 "D:\\Libraries\\include\\SDL2/SDL_events.h" 2
# 55 "D:\\Libraries\\include\\SDL2/SDL_events.h"
typedef enum
{
    SDL_FIRSTEVENT = 0,


    SDL_QUIT = 0x100,


    SDL_APP_TERMINATING,



    SDL_APP_LOWMEMORY,



    SDL_APP_WILLENTERBACKGROUND,



    SDL_APP_DIDENTERBACKGROUND,



    SDL_APP_WILLENTERFOREGROUND,



    SDL_APP_DIDENTERFOREGROUND,





    SDL_DISPLAYEVENT = 0x150,


    SDL_WINDOWEVENT = 0x200,
    SDL_SYSWMEVENT,


    SDL_KEYDOWN = 0x300,
    SDL_KEYUP,
    SDL_TEXTEDITING,
    SDL_TEXTINPUT,
    SDL_KEYMAPCHANGED,




    SDL_MOUSEMOTION = 0x400,
    SDL_MOUSEBUTTONDOWN,
    SDL_MOUSEBUTTONUP,
    SDL_MOUSEWHEEL,


    SDL_JOYAXISMOTION = 0x600,
    SDL_JOYBALLMOTION,
    SDL_JOYHATMOTION,
    SDL_JOYBUTTONDOWN,
    SDL_JOYBUTTONUP,
    SDL_JOYDEVICEADDED,
    SDL_JOYDEVICEREMOVED,


    SDL_CONTROLLERAXISMOTION = 0x650,
    SDL_CONTROLLERBUTTONDOWN,
    SDL_CONTROLLERBUTTONUP,
    SDL_CONTROLLERDEVICEADDED,
    SDL_CONTROLLERDEVICEREMOVED,
    SDL_CONTROLLERDEVICEREMAPPED,


    SDL_FINGERDOWN = 0x700,
    SDL_FINGERUP,
    SDL_FINGERMOTION,


    SDL_DOLLARGESTURE = 0x800,
    SDL_DOLLARRECORD,
    SDL_MULTIGESTURE,


    SDL_CLIPBOARDUPDATE = 0x900,


    SDL_DROPFILE = 0x1000,
    SDL_DROPTEXT,
    SDL_DROPBEGIN,
    SDL_DROPCOMPLETE,


    SDL_AUDIODEVICEADDED = 0x1100,
    SDL_AUDIODEVICEREMOVED,


    SDL_SENSORUPDATE = 0x1200,


    SDL_RENDER_TARGETS_RESET = 0x2000,
    SDL_RENDER_DEVICE_RESET,




    SDL_USEREVENT = 0x8000,




    SDL_LASTEVENT = 0xFFFF
} SDL_EventType;




typedef struct SDL_CommonEvent
{
    Uint32 type;
    Uint32 timestamp;
} SDL_CommonEvent;




typedef struct SDL_DisplayEvent
{
    Uint32 type;
    Uint32 timestamp;
    Uint32 display;
    Uint8 event;
    Uint8 padding1;
    Uint8 padding2;
    Uint8 padding3;
    Sint32 data1;
} SDL_DisplayEvent;




typedef struct SDL_WindowEvent
{
    Uint32 type;
    Uint32 timestamp;
    Uint32 windowID;
    Uint8 event;
    Uint8 padding1;
    Uint8 padding2;
    Uint8 padding3;
    Sint32 data1;
    Sint32 data2;
} SDL_WindowEvent;




typedef struct SDL_KeyboardEvent
{
    Uint32 type;
    Uint32 timestamp;
    Uint32 windowID;
    Uint8 state;
    Uint8 repeat;
    Uint8 padding2;
    Uint8 padding3;
    SDL_Keysym keysym;
} SDL_KeyboardEvent;





typedef struct SDL_TextEditingEvent
{
    Uint32 type;
    Uint32 timestamp;
    Uint32 windowID;
    char text[(32)];
    Sint32 start;
    Sint32 length;
} SDL_TextEditingEvent;






typedef struct SDL_TextInputEvent
{
    Uint32 type;
    Uint32 timestamp;
    Uint32 windowID;
    char text[(32)];
} SDL_TextInputEvent;




typedef struct SDL_MouseMotionEvent
{
    Uint32 type;
    Uint32 timestamp;
    Uint32 windowID;
    Uint32 which;
    Uint32 state;
    Sint32 x;
    Sint32 y;
    Sint32 xrel;
    Sint32 yrel;
} SDL_MouseMotionEvent;




typedef struct SDL_MouseButtonEvent
{
    Uint32 type;
    Uint32 timestamp;
    Uint32 windowID;
    Uint32 which;
    Uint8 button;
    Uint8 state;
    Uint8 clicks;
    Uint8 padding1;
    Sint32 x;
    Sint32 y;
} SDL_MouseButtonEvent;




typedef struct SDL_MouseWheelEvent
{
    Uint32 type;
    Uint32 timestamp;
    Uint32 windowID;
    Uint32 which;
    Sint32 x;
    Sint32 y;
    Uint32 direction;
} SDL_MouseWheelEvent;




typedef struct SDL_JoyAxisEvent
{
    Uint32 type;
    Uint32 timestamp;
    SDL_JoystickID which;
    Uint8 axis;
    Uint8 padding1;
    Uint8 padding2;
    Uint8 padding3;
    Sint16 value;
    Uint16 padding4;
} SDL_JoyAxisEvent;




typedef struct SDL_JoyBallEvent
{
    Uint32 type;
    Uint32 timestamp;
    SDL_JoystickID which;
    Uint8 ball;
    Uint8 padding1;
    Uint8 padding2;
    Uint8 padding3;
    Sint16 xrel;
    Sint16 yrel;
} SDL_JoyBallEvent;




typedef struct SDL_JoyHatEvent
{
    Uint32 type;
    Uint32 timestamp;
    SDL_JoystickID which;
    Uint8 hat;
    Uint8 value;






    Uint8 padding1;
    Uint8 padding2;
} SDL_JoyHatEvent;




typedef struct SDL_JoyButtonEvent
{
    Uint32 type;
    Uint32 timestamp;
    SDL_JoystickID which;
    Uint8 button;
    Uint8 state;
    Uint8 padding1;
    Uint8 padding2;
} SDL_JoyButtonEvent;




typedef struct SDL_JoyDeviceEvent
{
    Uint32 type;
    Uint32 timestamp;
    Sint32 which;
} SDL_JoyDeviceEvent;





typedef struct SDL_ControllerAxisEvent
{
    Uint32 type;
    Uint32 timestamp;
    SDL_JoystickID which;
    Uint8 axis;
    Uint8 padding1;
    Uint8 padding2;
    Uint8 padding3;
    Sint16 value;
    Uint16 padding4;
} SDL_ControllerAxisEvent;





typedef struct SDL_ControllerButtonEvent
{
    Uint32 type;
    Uint32 timestamp;
    SDL_JoystickID which;
    Uint8 button;
    Uint8 state;
    Uint8 padding1;
    Uint8 padding2;
} SDL_ControllerButtonEvent;





typedef struct SDL_ControllerDeviceEvent
{
    Uint32 type;
    Uint32 timestamp;
    Sint32 which;
} SDL_ControllerDeviceEvent;




typedef struct SDL_AudioDeviceEvent
{
    Uint32 type;
    Uint32 timestamp;
    Uint32 which;
    Uint8 iscapture;
    Uint8 padding1;
    Uint8 padding2;
    Uint8 padding3;
} SDL_AudioDeviceEvent;





typedef struct SDL_TouchFingerEvent
{
    Uint32 type;
    Uint32 timestamp;
    SDL_TouchID touchId;
    SDL_FingerID fingerId;
    float x;
    float y;
    float dx;
    float dy;
    float pressure;
} SDL_TouchFingerEvent;





typedef struct SDL_MultiGestureEvent
{
    Uint32 type;
    Uint32 timestamp;
    SDL_TouchID touchId;
    float dTheta;
    float dDist;
    float x;
    float y;
    Uint16 numFingers;
    Uint16 padding;
} SDL_MultiGestureEvent;





typedef struct SDL_DollarGestureEvent
{
    Uint32 type;
    Uint32 timestamp;
    SDL_TouchID touchId;
    SDL_GestureID gestureId;
    Uint32 numFingers;
    float error;
    float x;
    float y;
} SDL_DollarGestureEvent;







typedef struct SDL_DropEvent
{
    Uint32 type;
    Uint32 timestamp;
    char *file;
    Uint32 windowID;
} SDL_DropEvent;





typedef struct SDL_SensorEvent
{
    Uint32 type;
    Uint32 timestamp;
    Sint32 which;
    float data[6];
} SDL_SensorEvent;




typedef struct SDL_QuitEvent
{
    Uint32 type;
    Uint32 timestamp;
} SDL_QuitEvent;




typedef struct SDL_OSEvent
{
    Uint32 type;
    Uint32 timestamp;
} SDL_OSEvent;




typedef struct SDL_UserEvent
{
    Uint32 type;
    Uint32 timestamp;
    Uint32 windowID;
    Sint32 code;
    void *data1;
    void *data2;
} SDL_UserEvent;


struct SDL_SysWMmsg;
typedef struct SDL_SysWMmsg SDL_SysWMmsg;







typedef struct SDL_SysWMEvent
{
    Uint32 type;
    Uint32 timestamp;
    SDL_SysWMmsg *msg;
} SDL_SysWMEvent;




typedef union SDL_Event
{
    Uint32 type;
    SDL_CommonEvent common;
    SDL_DisplayEvent display;
    SDL_WindowEvent window;
    SDL_KeyboardEvent key;
    SDL_TextEditingEvent edit;
    SDL_TextInputEvent text;
    SDL_MouseMotionEvent motion;
    SDL_MouseButtonEvent button;
    SDL_MouseWheelEvent wheel;
    SDL_JoyAxisEvent jaxis;
    SDL_JoyBallEvent jball;
    SDL_JoyHatEvent jhat;
    SDL_JoyButtonEvent jbutton;
    SDL_JoyDeviceEvent jdevice;
    SDL_ControllerAxisEvent caxis;
    SDL_ControllerButtonEvent cbutton;
    SDL_ControllerDeviceEvent cdevice;
    SDL_AudioDeviceEvent adevice;
    SDL_SensorEvent sensor;
    SDL_QuitEvent quit;
    SDL_UserEvent user;
    SDL_SysWMEvent syswm;
    SDL_TouchFingerEvent tfinger;
    SDL_MultiGestureEvent mgesture;
    SDL_DollarGestureEvent dgesture;
    SDL_DropEvent drop;
# 594 "D:\\Libraries\\include\\SDL2/SDL_events.h"
    Uint8 padding[56];
} SDL_Event;


typedef int SDL_compile_time_assert_SDL_Event[(sizeof(SDL_Event) == 56) * 2 - 1];
# 610 "D:\\Libraries\\include\\SDL2/SDL_events.h"
extern __declspec(dllexport) void __cdecl SDL_PumpEvents(void);


typedef enum
{
    SDL_ADDEVENT,
    SDL_PEEKEVENT,
    SDL_GETEVENT
} SDL_eventaction;
# 638 "D:\\Libraries\\include\\SDL2/SDL_events.h"
extern __declspec(dllexport) int __cdecl SDL_PeepEvents(SDL_Event * events, int numevents,
                                           SDL_eventaction action,
                                           Uint32 minType, Uint32 maxType);





extern __declspec(dllexport) SDL_bool __cdecl SDL_HasEvent(Uint32 type);
extern __declspec(dllexport) SDL_bool __cdecl SDL_HasEvents(Uint32 minType, Uint32 maxType);







extern __declspec(dllexport) void __cdecl SDL_FlushEvent(Uint32 type);
extern __declspec(dllexport) void __cdecl SDL_FlushEvents(Uint32 minType, Uint32 maxType);
# 666 "D:\\Libraries\\include\\SDL2/SDL_events.h"
extern __declspec(dllexport) int __cdecl SDL_PollEvent(SDL_Event * event);
# 676 "D:\\Libraries\\include\\SDL2/SDL_events.h"
extern __declspec(dllexport) int __cdecl SDL_WaitEvent(SDL_Event * event);
# 688 "D:\\Libraries\\include\\SDL2/SDL_events.h"
extern __declspec(dllexport) int __cdecl SDL_WaitEventTimeout(SDL_Event * event,
                                                 int timeout);







extern __declspec(dllexport) int __cdecl SDL_PushEvent(SDL_Event * event);

typedef int (__cdecl * SDL_EventFilter) (void *userdata, SDL_Event * event);
# 726 "D:\\Libraries\\include\\SDL2/SDL_events.h"
extern __declspec(dllexport) void __cdecl SDL_SetEventFilter(SDL_EventFilter filter,
                                                void *userdata);





extern __declspec(dllexport) SDL_bool __cdecl SDL_GetEventFilter(SDL_EventFilter * filter,
                                                    void **userdata);




extern __declspec(dllexport) void __cdecl SDL_AddEventWatch(SDL_EventFilter filter,
                                               void *userdata);




extern __declspec(dllexport) void __cdecl SDL_DelEventWatch(SDL_EventFilter filter,
                                               void *userdata);





extern __declspec(dllexport) void __cdecl SDL_FilterEvents(SDL_EventFilter filter,
                                              void *userdata);
# 770 "D:\\Libraries\\include\\SDL2/SDL_events.h"
extern __declspec(dllexport) Uint8 __cdecl SDL_EventState(Uint32 type, int state);
# 781 "D:\\Libraries\\include\\SDL2/SDL_events.h"
extern __declspec(dllexport) Uint32 __cdecl SDL_RegisterEvents(int numevents);






# 1 "D:\\Libraries\\include\\SDL2/close_code.h" 1
# 39 "D:\\Libraries\\include\\SDL2/close_code.h"
#pragma pack(pop)
# 788 "D:\\Libraries\\include\\SDL2/SDL_events.h" 2
# 42 "D:\\Libraries\\include\\SDL2\\SDL.h" 2
# 1 "D:\\Libraries\\include\\SDL2/SDL_filesystem.h" 1
# 33 "D:\\Libraries\\include\\SDL2/SDL_filesystem.h"
# 1 "D:\\Libraries\\include\\SDL2/begin_code.h" 1
# 106 "D:\\Libraries\\include\\SDL2/begin_code.h"
#pragma warning(disable: 4103)


#pragma clang diagnostic ignored "-Wpragma-pack"






#pragma pack(push,8)
# 34 "D:\\Libraries\\include\\SDL2/SDL_filesystem.h" 2
# 63 "D:\\Libraries\\include\\SDL2/SDL_filesystem.h"
extern __declspec(dllexport) char *__cdecl SDL_GetBasePath(void);
# 126 "D:\\Libraries\\include\\SDL2/SDL_filesystem.h"
extern __declspec(dllexport) char *__cdecl SDL_GetPrefPath(const char *org, const char *app);






# 1 "D:\\Libraries\\include\\SDL2/close_code.h" 1
# 39 "D:\\Libraries\\include\\SDL2/close_code.h"
#pragma pack(pop)
# 133 "D:\\Libraries\\include\\SDL2/SDL_filesystem.h" 2
# 43 "D:\\Libraries\\include\\SDL2\\SDL.h" 2

# 1 "D:\\Libraries\\include\\SDL2/SDL_haptic.h" 1
# 114 "D:\\Libraries\\include\\SDL2/SDL_haptic.h"
# 1 "D:\\Libraries\\include\\SDL2/begin_code.h" 1
# 106 "D:\\Libraries\\include\\SDL2/begin_code.h"
#pragma warning(disable: 4103)


#pragma clang diagnostic ignored "-Wpragma-pack"






#pragma pack(push,8)
# 115 "D:\\Libraries\\include\\SDL2/SDL_haptic.h" 2
# 140 "D:\\Libraries\\include\\SDL2/SDL_haptic.h"
struct _SDL_Haptic;
typedef struct _SDL_Haptic SDL_Haptic;
# 450 "D:\\Libraries\\include\\SDL2/SDL_haptic.h"
typedef struct SDL_HapticDirection
{
    Uint8 type;
    Sint32 dir[3];
} SDL_HapticDirection;
# 468 "D:\\Libraries\\include\\SDL2/SDL_haptic.h"
typedef struct SDL_HapticConstant
{

    Uint16 type;
    SDL_HapticDirection direction;


    Uint32 length;
    Uint16 delay;


    Uint16 button;
    Uint16 interval;


    Sint16 level;


    Uint16 attack_length;
    Uint16 attack_level;
    Uint16 fade_length;
    Uint16 fade_level;
} SDL_HapticConstant;
# 549 "D:\\Libraries\\include\\SDL2/SDL_haptic.h"
typedef struct SDL_HapticPeriodic
{

    Uint16 type;


    SDL_HapticDirection direction;


    Uint32 length;
    Uint16 delay;


    Uint16 button;
    Uint16 interval;


    Uint16 period;
    Sint16 magnitude;
    Sint16 offset;
    Uint16 phase;


    Uint16 attack_length;
    Uint16 attack_level;
    Uint16 fade_length;
    Uint16 fade_level;
} SDL_HapticPeriodic;
# 602 "D:\\Libraries\\include\\SDL2/SDL_haptic.h"
typedef struct SDL_HapticCondition
{

    Uint16 type;

    SDL_HapticDirection direction;


    Uint32 length;
    Uint16 delay;


    Uint16 button;
    Uint16 interval;


    Uint16 right_sat[3];
    Uint16 left_sat[3];
    Sint16 right_coeff[3];
    Sint16 left_coeff[3];
    Uint16 deadband[3];
    Sint16 center[3];
} SDL_HapticCondition;
# 639 "D:\\Libraries\\include\\SDL2/SDL_haptic.h"
typedef struct SDL_HapticRamp
{

    Uint16 type;
    SDL_HapticDirection direction;


    Uint32 length;
    Uint16 delay;


    Uint16 button;
    Uint16 interval;


    Sint16 start;
    Sint16 end;


    Uint16 attack_length;
    Uint16 attack_level;
    Uint16 fade_length;
    Uint16 fade_level;
} SDL_HapticRamp;
# 676 "D:\\Libraries\\include\\SDL2/SDL_haptic.h"
typedef struct SDL_HapticLeftRight
{

    Uint16 type;


    Uint32 length;


    Uint16 large_magnitude;
    Uint16 small_magnitude;
} SDL_HapticLeftRight;
# 704 "D:\\Libraries\\include\\SDL2/SDL_haptic.h"
typedef struct SDL_HapticCustom
{

    Uint16 type;
    SDL_HapticDirection direction;


    Uint32 length;
    Uint16 delay;


    Uint16 button;
    Uint16 interval;


    Uint8 channels;
    Uint16 period;
    Uint16 samples;
    Uint16 *data;


    Uint16 attack_length;
    Uint16 attack_level;
    Uint16 fade_length;
    Uint16 fade_level;
} SDL_HapticCustom;
# 800 "D:\\Libraries\\include\\SDL2/SDL_haptic.h"
typedef union SDL_HapticEffect
{

    Uint16 type;
    SDL_HapticConstant constant;
    SDL_HapticPeriodic periodic;
    SDL_HapticCondition condition;
    SDL_HapticRamp ramp;
    SDL_HapticLeftRight leftright;
    SDL_HapticCustom custom;
} SDL_HapticEffect;
# 819 "D:\\Libraries\\include\\SDL2/SDL_haptic.h"
extern __declspec(dllexport) int __cdecl SDL_NumHaptics(void);
# 832 "D:\\Libraries\\include\\SDL2/SDL_haptic.h"
extern __declspec(dllexport) const char *__cdecl SDL_HapticName(int device_index);
# 856 "D:\\Libraries\\include\\SDL2/SDL_haptic.h"
extern __declspec(dllexport) SDL_Haptic *__cdecl SDL_HapticOpen(int device_index);
# 867 "D:\\Libraries\\include\\SDL2/SDL_haptic.h"
extern __declspec(dllexport) int __cdecl SDL_HapticOpened(int device_index);
# 878 "D:\\Libraries\\include\\SDL2/SDL_haptic.h"
extern __declspec(dllexport) int __cdecl SDL_HapticIndex(SDL_Haptic * haptic);
# 887 "D:\\Libraries\\include\\SDL2/SDL_haptic.h"
extern __declspec(dllexport) int __cdecl SDL_MouseIsHaptic(void);
# 897 "D:\\Libraries\\include\\SDL2/SDL_haptic.h"
extern __declspec(dllexport) SDL_Haptic *__cdecl SDL_HapticOpenFromMouse(void);
# 908 "D:\\Libraries\\include\\SDL2/SDL_haptic.h"
extern __declspec(dllexport) int __cdecl SDL_JoystickIsHaptic(SDL_Joystick * joystick);
# 927 "D:\\Libraries\\include\\SDL2/SDL_haptic.h"
extern __declspec(dllexport) SDL_Haptic *__cdecl SDL_HapticOpenFromJoystick(SDL_Joystick *
                                                               joystick);






extern __declspec(dllexport) void __cdecl SDL_HapticClose(SDL_Haptic * haptic);
# 951 "D:\\Libraries\\include\\SDL2/SDL_haptic.h"
extern __declspec(dllexport) int __cdecl SDL_HapticNumEffects(SDL_Haptic * haptic);
# 967 "D:\\Libraries\\include\\SDL2/SDL_haptic.h"
extern __declspec(dllexport) int __cdecl SDL_HapticNumEffectsPlaying(SDL_Haptic * haptic);
# 985 "D:\\Libraries\\include\\SDL2/SDL_haptic.h"
extern __declspec(dllexport) unsigned int __cdecl SDL_HapticQuery(SDL_Haptic * haptic);







extern __declspec(dllexport) int __cdecl SDL_HapticNumAxes(SDL_Haptic * haptic);
# 1005 "D:\\Libraries\\include\\SDL2/SDL_haptic.h"
extern __declspec(dllexport) int __cdecl SDL_HapticEffectSupported(SDL_Haptic * haptic,
                                                      SDL_HapticEffect *
                                                      effect);
# 1020 "D:\\Libraries\\include\\SDL2/SDL_haptic.h"
extern __declspec(dllexport) int __cdecl SDL_HapticNewEffect(SDL_Haptic * haptic,
                                                SDL_HapticEffect * effect);
# 1040 "D:\\Libraries\\include\\SDL2/SDL_haptic.h"
extern __declspec(dllexport) int __cdecl SDL_HapticUpdateEffect(SDL_Haptic * haptic,
                                                   int effect,
                                                   SDL_HapticEffect * data);
# 1062 "D:\\Libraries\\include\\SDL2/SDL_haptic.h"
extern __declspec(dllexport) int __cdecl SDL_HapticRunEffect(SDL_Haptic * haptic,
                                                int effect,
                                                Uint32 iterations);
# 1076 "D:\\Libraries\\include\\SDL2/SDL_haptic.h"
extern __declspec(dllexport) int __cdecl SDL_HapticStopEffect(SDL_Haptic * haptic,
                                                 int effect);
# 1090 "D:\\Libraries\\include\\SDL2/SDL_haptic.h"
extern __declspec(dllexport) void __cdecl SDL_HapticDestroyEffect(SDL_Haptic * haptic,
                                                     int effect);
# 1105 "D:\\Libraries\\include\\SDL2/SDL_haptic.h"
extern __declspec(dllexport) int __cdecl SDL_HapticGetEffectStatus(SDL_Haptic * haptic,
                                                      int effect);
# 1124 "D:\\Libraries\\include\\SDL2/SDL_haptic.h"
extern __declspec(dllexport) int __cdecl SDL_HapticSetGain(SDL_Haptic * haptic, int gain);
# 1140 "D:\\Libraries\\include\\SDL2/SDL_haptic.h"
extern __declspec(dllexport) int __cdecl SDL_HapticSetAutocenter(SDL_Haptic * haptic,
                                                    int autocenter);
# 1157 "D:\\Libraries\\include\\SDL2/SDL_haptic.h"
extern __declspec(dllexport) int __cdecl SDL_HapticPause(SDL_Haptic * haptic);
# 1169 "D:\\Libraries\\include\\SDL2/SDL_haptic.h"
extern __declspec(dllexport) int __cdecl SDL_HapticUnpause(SDL_Haptic * haptic);







extern __declspec(dllexport) int __cdecl SDL_HapticStopAll(SDL_Haptic * haptic);
# 1189 "D:\\Libraries\\include\\SDL2/SDL_haptic.h"
extern __declspec(dllexport) int __cdecl SDL_HapticRumbleSupported(SDL_Haptic * haptic);
# 1202 "D:\\Libraries\\include\\SDL2/SDL_haptic.h"
extern __declspec(dllexport) int __cdecl SDL_HapticRumbleInit(SDL_Haptic * haptic);
# 1216 "D:\\Libraries\\include\\SDL2/SDL_haptic.h"
extern __declspec(dllexport) int __cdecl SDL_HapticRumblePlay(SDL_Haptic * haptic, float strength, Uint32 length );
# 1228 "D:\\Libraries\\include\\SDL2/SDL_haptic.h"
extern __declspec(dllexport) int __cdecl SDL_HapticRumbleStop(SDL_Haptic * haptic);






# 1 "D:\\Libraries\\include\\SDL2/close_code.h" 1
# 39 "D:\\Libraries\\include\\SDL2/close_code.h"
#pragma pack(pop)
# 1235 "D:\\Libraries\\include\\SDL2/SDL_haptic.h" 2
# 45 "D:\\Libraries\\include\\SDL2\\SDL.h" 2
# 1 "D:\\Libraries\\include\\SDL2/SDL_hints.h" 1
# 44 "D:\\Libraries\\include\\SDL2/SDL_hints.h"
# 1 "D:\\Libraries\\include\\SDL2/begin_code.h" 1
# 106 "D:\\Libraries\\include\\SDL2/begin_code.h"
#pragma warning(disable: 4103)


#pragma clang diagnostic ignored "-Wpragma-pack"






#pragma pack(push,8)
# 45 "D:\\Libraries\\include\\SDL2/SDL_hints.h" 2
# 1180 "D:\\Libraries\\include\\SDL2/SDL_hints.h"
typedef enum
{
    SDL_HINT_DEFAULT,
    SDL_HINT_NORMAL,
    SDL_HINT_OVERRIDE
} SDL_HintPriority;
# 1197 "D:\\Libraries\\include\\SDL2/SDL_hints.h"
extern __declspec(dllexport) SDL_bool __cdecl SDL_SetHintWithPriority(const char *name,
                                                         const char *value,
                                                         SDL_HintPriority priority);






extern __declspec(dllexport) SDL_bool __cdecl SDL_SetHint(const char *name,
                                             const char *value);






extern __declspec(dllexport) const char * __cdecl SDL_GetHint(const char *name);






extern __declspec(dllexport) SDL_bool __cdecl SDL_GetHintBoolean(const char *name, SDL_bool default_value);




typedef void (__cdecl *SDL_HintCallback)(void *userdata, const char *name, const char *oldValue, const char *newValue);
# 1235 "D:\\Libraries\\include\\SDL2/SDL_hints.h"
extern __declspec(dllexport) void __cdecl SDL_AddHintCallback(const char *name,
                                                 SDL_HintCallback callback,
                                                 void *userdata);
# 1246 "D:\\Libraries\\include\\SDL2/SDL_hints.h"
extern __declspec(dllexport) void __cdecl SDL_DelHintCallback(const char *name,
                                                 SDL_HintCallback callback,
                                                 void *userdata);






extern __declspec(dllexport) void __cdecl SDL_ClearHints(void);







# 1 "D:\\Libraries\\include\\SDL2/close_code.h" 1
# 39 "D:\\Libraries\\include\\SDL2/close_code.h"
#pragma pack(pop)
# 1263 "D:\\Libraries\\include\\SDL2/SDL_hints.h" 2
# 46 "D:\\Libraries\\include\\SDL2\\SDL.h" 2

# 1 "D:\\Libraries\\include\\SDL2/SDL_loadso.h" 1
# 47 "D:\\Libraries\\include\\SDL2/SDL_loadso.h"
# 1 "D:\\Libraries\\include\\SDL2/begin_code.h" 1
# 106 "D:\\Libraries\\include\\SDL2/begin_code.h"
#pragma warning(disable: 4103)


#pragma clang diagnostic ignored "-Wpragma-pack"






#pragma pack(push,8)
# 48 "D:\\Libraries\\include\\SDL2/SDL_loadso.h" 2
# 58 "D:\\Libraries\\include\\SDL2/SDL_loadso.h"
extern __declspec(dllexport) void *__cdecl SDL_LoadObject(const char *sofile);






extern __declspec(dllexport) void *__cdecl SDL_LoadFunction(void *handle,
                                               const char *name);




extern __declspec(dllexport) void __cdecl SDL_UnloadObject(void *handle);






# 1 "D:\\Libraries\\include\\SDL2/close_code.h" 1
# 39 "D:\\Libraries\\include\\SDL2/close_code.h"
#pragma pack(pop)
# 78 "D:\\Libraries\\include\\SDL2/SDL_loadso.h" 2
# 48 "D:\\Libraries\\include\\SDL2\\SDL.h" 2
# 1 "D:\\Libraries\\include\\SDL2/SDL_log.h" 1
# 42 "D:\\Libraries\\include\\SDL2/SDL_log.h"
# 1 "D:\\Libraries\\include\\SDL2/begin_code.h" 1
# 106 "D:\\Libraries\\include\\SDL2/begin_code.h"
#pragma warning(disable: 4103)


#pragma clang diagnostic ignored "-Wpragma-pack"






#pragma pack(push,8)
# 43 "D:\\Libraries\\include\\SDL2/SDL_log.h" 2
# 64 "D:\\Libraries\\include\\SDL2/SDL_log.h"
enum
{
    SDL_LOG_CATEGORY_APPLICATION,
    SDL_LOG_CATEGORY_ERROR,
    SDL_LOG_CATEGORY_ASSERT,
    SDL_LOG_CATEGORY_SYSTEM,
    SDL_LOG_CATEGORY_AUDIO,
    SDL_LOG_CATEGORY_VIDEO,
    SDL_LOG_CATEGORY_RENDER,
    SDL_LOG_CATEGORY_INPUT,
    SDL_LOG_CATEGORY_TEST,


    SDL_LOG_CATEGORY_RESERVED1,
    SDL_LOG_CATEGORY_RESERVED2,
    SDL_LOG_CATEGORY_RESERVED3,
    SDL_LOG_CATEGORY_RESERVED4,
    SDL_LOG_CATEGORY_RESERVED5,
    SDL_LOG_CATEGORY_RESERVED6,
    SDL_LOG_CATEGORY_RESERVED7,
    SDL_LOG_CATEGORY_RESERVED8,
    SDL_LOG_CATEGORY_RESERVED9,
    SDL_LOG_CATEGORY_RESERVED10,
# 96 "D:\\Libraries\\include\\SDL2/SDL_log.h"
    SDL_LOG_CATEGORY_CUSTOM
};




typedef enum
{
    SDL_LOG_PRIORITY_VERBOSE = 1,
    SDL_LOG_PRIORITY_DEBUG,
    SDL_LOG_PRIORITY_INFO,
    SDL_LOG_PRIORITY_WARN,
    SDL_LOG_PRIORITY_ERROR,
    SDL_LOG_PRIORITY_CRITICAL,
    SDL_NUM_LOG_PRIORITIES
} SDL_LogPriority;





extern __declspec(dllexport) void __cdecl SDL_LogSetAllPriority(SDL_LogPriority priority);




extern __declspec(dllexport) void __cdecl SDL_LogSetPriority(int category,
                                                SDL_LogPriority priority);




extern __declspec(dllexport) SDL_LogPriority __cdecl SDL_LogGetPriority(int category);






extern __declspec(dllexport) void __cdecl SDL_LogResetPriorities(void);




extern __declspec(dllexport) void __cdecl SDL_Log( const char *fmt, ...) ;




extern __declspec(dllexport) void __cdecl SDL_LogVerbose(int category, const char *fmt, ...) ;




extern __declspec(dllexport) void __cdecl SDL_LogDebug(int category, const char *fmt, ...) ;




extern __declspec(dllexport) void __cdecl SDL_LogInfo(int category, const char *fmt, ...) ;




extern __declspec(dllexport) void __cdecl SDL_LogWarn(int category, const char *fmt, ...) ;




extern __declspec(dllexport) void __cdecl SDL_LogError(int category, const char *fmt, ...) ;




extern __declspec(dllexport) void __cdecl SDL_LogCritical(int category, const char *fmt, ...) ;




extern __declspec(dllexport) void __cdecl SDL_LogMessage(int category,
                                            SDL_LogPriority priority,
                                                                     const char *fmt, ...) ;




extern __declspec(dllexport) void __cdecl SDL_LogMessageV(int category,
                                             SDL_LogPriority priority,
                                             const char *fmt, va_list ap);




typedef void (__cdecl *SDL_LogOutputFunction)(void *userdata, int category, SDL_LogPriority priority, const char *message);




extern __declspec(dllexport) void __cdecl SDL_LogGetOutputFunction(SDL_LogOutputFunction *callback, void **userdata);





extern __declspec(dllexport) void __cdecl SDL_LogSetOutputFunction(SDL_LogOutputFunction callback, void *userdata);







# 1 "D:\\Libraries\\include\\SDL2/close_code.h" 1
# 39 "D:\\Libraries\\include\\SDL2/close_code.h"
#pragma pack(pop)
# 208 "D:\\Libraries\\include\\SDL2/SDL_log.h" 2
# 49 "D:\\Libraries\\include\\SDL2\\SDL.h" 2
# 1 "D:\\Libraries\\include\\SDL2/SDL_messagebox.h" 1
# 28 "D:\\Libraries\\include\\SDL2/SDL_messagebox.h"
# 1 "D:\\Libraries\\include\\SDL2/begin_code.h" 1
# 106 "D:\\Libraries\\include\\SDL2/begin_code.h"
#pragma warning(disable: 4103)


#pragma clang diagnostic ignored "-Wpragma-pack"






#pragma pack(push,8)
# 29 "D:\\Libraries\\include\\SDL2/SDL_messagebox.h" 2








typedef enum
{
    SDL_MESSAGEBOX_ERROR = 0x00000010,
    SDL_MESSAGEBOX_WARNING = 0x00000020,
    SDL_MESSAGEBOX_INFORMATION = 0x00000040
} SDL_MessageBoxFlags;




typedef enum
{
    SDL_MESSAGEBOX_BUTTON_RETURNKEY_DEFAULT = 0x00000001,
    SDL_MESSAGEBOX_BUTTON_ESCAPEKEY_DEFAULT = 0x00000002
} SDL_MessageBoxButtonFlags;




typedef struct
{
    Uint32 flags;
    int buttonid;
    const char * text;
} SDL_MessageBoxButtonData;




typedef struct
{
    Uint8 r, g, b;
} SDL_MessageBoxColor;

typedef enum
{
    SDL_MESSAGEBOX_COLOR_BACKGROUND,
    SDL_MESSAGEBOX_COLOR_TEXT,
    SDL_MESSAGEBOX_COLOR_BUTTON_BORDER,
    SDL_MESSAGEBOX_COLOR_BUTTON_BACKGROUND,
    SDL_MESSAGEBOX_COLOR_BUTTON_SELECTED,
    SDL_MESSAGEBOX_COLOR_MAX
} SDL_MessageBoxColorType;




typedef struct
{
    SDL_MessageBoxColor colors[SDL_MESSAGEBOX_COLOR_MAX];
} SDL_MessageBoxColorScheme;




typedef struct
{
    Uint32 flags;
    SDL_Window *window;
    const char *title;
    const char *message;

    int numbuttons;
    const SDL_MessageBoxButtonData *buttons;

    const SDL_MessageBoxColorScheme *colorScheme;
} SDL_MessageBoxData;
# 119 "D:\\Libraries\\include\\SDL2/SDL_messagebox.h"
extern __declspec(dllexport) int __cdecl SDL_ShowMessageBox(const SDL_MessageBoxData *messageboxdata, int *buttonid);
# 133 "D:\\Libraries\\include\\SDL2/SDL_messagebox.h"
extern __declspec(dllexport) int __cdecl SDL_ShowSimpleMessageBox(Uint32 flags, const char *title, const char *message, SDL_Window *window);







# 1 "D:\\Libraries\\include\\SDL2/close_code.h" 1
# 39 "D:\\Libraries\\include\\SDL2/close_code.h"
#pragma pack(pop)
# 141 "D:\\Libraries\\include\\SDL2/SDL_messagebox.h" 2
# 50 "D:\\Libraries\\include\\SDL2\\SDL.h" 2

# 1 "D:\\Libraries\\include\\SDL2/SDL_power.h" 1
# 33 "D:\\Libraries\\include\\SDL2/SDL_power.h"
# 1 "D:\\Libraries\\include\\SDL2/begin_code.h" 1
# 106 "D:\\Libraries\\include\\SDL2/begin_code.h"
#pragma warning(disable: 4103)


#pragma clang diagnostic ignored "-Wpragma-pack"






#pragma pack(push,8)
# 34 "D:\\Libraries\\include\\SDL2/SDL_power.h" 2








typedef enum
{
    SDL_POWERSTATE_UNKNOWN,
    SDL_POWERSTATE_ON_BATTERY,
    SDL_POWERSTATE_NO_BATTERY,
    SDL_POWERSTATE_CHARGING,
    SDL_POWERSTATE_CHARGED
} SDL_PowerState;
# 65 "D:\\Libraries\\include\\SDL2/SDL_power.h"
extern __declspec(dllexport) SDL_PowerState __cdecl SDL_GetPowerInfo(int *secs, int *pct);






# 1 "D:\\Libraries\\include\\SDL2/close_code.h" 1
# 39 "D:\\Libraries\\include\\SDL2/close_code.h"
#pragma pack(pop)
# 72 "D:\\Libraries\\include\\SDL2/SDL_power.h" 2
# 52 "D:\\Libraries\\include\\SDL2\\SDL.h" 2
# 1 "D:\\Libraries\\include\\SDL2/SDL_render.h" 1
# 55 "D:\\Libraries\\include\\SDL2/SDL_render.h"
# 1 "D:\\Libraries\\include\\SDL2/begin_code.h" 1
# 106 "D:\\Libraries\\include\\SDL2/begin_code.h"
#pragma warning(disable: 4103)


#pragma clang diagnostic ignored "-Wpragma-pack"






#pragma pack(push,8)
# 56 "D:\\Libraries\\include\\SDL2/SDL_render.h" 2








typedef enum
{
    SDL_RENDERER_SOFTWARE = 0x00000001,
    SDL_RENDERER_ACCELERATED = 0x00000002,

    SDL_RENDERER_PRESENTVSYNC = 0x00000004,

    SDL_RENDERER_TARGETTEXTURE = 0x00000008

} SDL_RendererFlags;




typedef struct SDL_RendererInfo
{
    const char *name;
    Uint32 flags;
    Uint32 num_texture_formats;
    Uint32 texture_formats[16];
    int max_texture_width;
    int max_texture_height;
} SDL_RendererInfo;




typedef enum
{
    SDL_TEXTUREACCESS_STATIC,
    SDL_TEXTUREACCESS_STREAMING,
    SDL_TEXTUREACCESS_TARGET
} SDL_TextureAccess;




typedef enum
{
    SDL_TEXTUREMODULATE_NONE = 0x00000000,
    SDL_TEXTUREMODULATE_COLOR = 0x00000001,
    SDL_TEXTUREMODULATE_ALPHA = 0x00000002
} SDL_TextureModulate;




typedef enum
{
    SDL_FLIP_NONE = 0x00000000,
    SDL_FLIP_HORIZONTAL = 0x00000001,
    SDL_FLIP_VERTICAL = 0x00000002
} SDL_RendererFlip;




struct SDL_Renderer;
typedef struct SDL_Renderer SDL_Renderer;




struct SDL_Texture;
typedef struct SDL_Texture SDL_Texture;
# 144 "D:\\Libraries\\include\\SDL2/SDL_render.h"
extern __declspec(dllexport) int __cdecl SDL_GetNumRenderDrivers(void);
# 158 "D:\\Libraries\\include\\SDL2/SDL_render.h"
extern __declspec(dllexport) int __cdecl SDL_GetRenderDriverInfo(int index,
                                                    SDL_RendererInfo * info);
# 172 "D:\\Libraries\\include\\SDL2/SDL_render.h"
extern __declspec(dllexport) int __cdecl SDL_CreateWindowAndRenderer(
                                int width, int height, Uint32 window_flags,
                                SDL_Window **window, SDL_Renderer **renderer);
# 191 "D:\\Libraries\\include\\SDL2/SDL_render.h"
extern __declspec(dllexport) SDL_Renderer * __cdecl SDL_CreateRenderer(SDL_Window * window,
                                               int index, Uint32 flags);
# 204 "D:\\Libraries\\include\\SDL2/SDL_render.h"
extern __declspec(dllexport) SDL_Renderer * __cdecl SDL_CreateSoftwareRenderer(SDL_Surface * surface);




extern __declspec(dllexport) SDL_Renderer * __cdecl SDL_GetRenderer(SDL_Window * window);




extern __declspec(dllexport) int __cdecl SDL_GetRendererInfo(SDL_Renderer * renderer,
                                                SDL_RendererInfo * info);




extern __declspec(dllexport) int __cdecl SDL_GetRendererOutputSize(SDL_Renderer * renderer,
                                                      int *w, int *h);
# 242 "D:\\Libraries\\include\\SDL2/SDL_render.h"
extern __declspec(dllexport) SDL_Texture * __cdecl SDL_CreateTexture(SDL_Renderer * renderer,
                                                        Uint32 format,
                                                        int access, int w,
                                                        int h);
# 260 "D:\\Libraries\\include\\SDL2/SDL_render.h"
extern __declspec(dllexport) SDL_Texture * __cdecl SDL_CreateTextureFromSurface(SDL_Renderer * renderer, SDL_Surface * surface);
# 275 "D:\\Libraries\\include\\SDL2/SDL_render.h"
extern __declspec(dllexport) int __cdecl SDL_QueryTexture(SDL_Texture * texture,
                                             Uint32 * format, int *access,
                                             int *w, int *h);
# 292 "D:\\Libraries\\include\\SDL2/SDL_render.h"
extern __declspec(dllexport) int __cdecl SDL_SetTextureColorMod(SDL_Texture * texture,
                                                   Uint8 r, Uint8 g, Uint8 b);
# 308 "D:\\Libraries\\include\\SDL2/SDL_render.h"
extern __declspec(dllexport) int __cdecl SDL_GetTextureColorMod(SDL_Texture * texture,
                                                   Uint8 * r, Uint8 * g,
                                                   Uint8 * b);
# 323 "D:\\Libraries\\include\\SDL2/SDL_render.h"
extern __declspec(dllexport) int __cdecl SDL_SetTextureAlphaMod(SDL_Texture * texture,
                                                   Uint8 alpha);
# 336 "D:\\Libraries\\include\\SDL2/SDL_render.h"
extern __declspec(dllexport) int __cdecl SDL_GetTextureAlphaMod(SDL_Texture * texture,
                                                   Uint8 * alpha);
# 353 "D:\\Libraries\\include\\SDL2/SDL_render.h"
extern __declspec(dllexport) int __cdecl SDL_SetTextureBlendMode(SDL_Texture * texture,
                                                    SDL_BlendMode blendMode);
# 366 "D:\\Libraries\\include\\SDL2/SDL_render.h"
extern __declspec(dllexport) int __cdecl SDL_GetTextureBlendMode(SDL_Texture * texture,
                                                    SDL_BlendMode *blendMode);
# 385 "D:\\Libraries\\include\\SDL2/SDL_render.h"
extern __declspec(dllexport) int __cdecl SDL_UpdateTexture(SDL_Texture * texture,
                                              const SDL_Rect * rect,
                                              const void *pixels, int pitch);
# 408 "D:\\Libraries\\include\\SDL2/SDL_render.h"
extern __declspec(dllexport) int __cdecl SDL_UpdateYUVTexture(SDL_Texture * texture,
                                                 const SDL_Rect * rect,
                                                 const Uint8 *Yplane, int Ypitch,
                                                 const Uint8 *Uplane, int Upitch,
                                                 const Uint8 *Vplane, int Vpitch);
# 429 "D:\\Libraries\\include\\SDL2/SDL_render.h"
extern __declspec(dllexport) int __cdecl SDL_LockTexture(SDL_Texture * texture,
                                            const SDL_Rect * rect,
                                            void **pixels, int *pitch);






extern __declspec(dllexport) void __cdecl SDL_UnlockTexture(SDL_Texture * texture);
# 447 "D:\\Libraries\\include\\SDL2/SDL_render.h"
extern __declspec(dllexport) SDL_bool __cdecl SDL_RenderTargetSupported(SDL_Renderer *renderer);
# 459 "D:\\Libraries\\include\\SDL2/SDL_render.h"
extern __declspec(dllexport) int __cdecl SDL_SetRenderTarget(SDL_Renderer *renderer,
                                                SDL_Texture *texture);
# 469 "D:\\Libraries\\include\\SDL2/SDL_render.h"
extern __declspec(dllexport) SDL_Texture * __cdecl SDL_GetRenderTarget(SDL_Renderer *renderer);
# 494 "D:\\Libraries\\include\\SDL2/SDL_render.h"
extern __declspec(dllexport) int __cdecl SDL_RenderSetLogicalSize(SDL_Renderer * renderer, int w, int h);
# 505 "D:\\Libraries\\include\\SDL2/SDL_render.h"
extern __declspec(dllexport) void __cdecl SDL_RenderGetLogicalSize(SDL_Renderer * renderer, int *w, int *h);
# 519 "D:\\Libraries\\include\\SDL2/SDL_render.h"
extern __declspec(dllexport) int __cdecl SDL_RenderSetIntegerScale(SDL_Renderer * renderer,
                                                      SDL_bool enable);
# 529 "D:\\Libraries\\include\\SDL2/SDL_render.h"
extern __declspec(dllexport) SDL_bool __cdecl SDL_RenderGetIntegerScale(SDL_Renderer * renderer);
# 546 "D:\\Libraries\\include\\SDL2/SDL_render.h"
extern __declspec(dllexport) int __cdecl SDL_RenderSetViewport(SDL_Renderer * renderer,
                                                  const SDL_Rect * rect);






extern __declspec(dllexport) void __cdecl SDL_RenderGetViewport(SDL_Renderer * renderer,
                                                   SDL_Rect * rect);
# 568 "D:\\Libraries\\include\\SDL2/SDL_render.h"
extern __declspec(dllexport) int __cdecl SDL_RenderSetClipRect(SDL_Renderer * renderer,
                                                  const SDL_Rect * rect);
# 580 "D:\\Libraries\\include\\SDL2/SDL_render.h"
extern __declspec(dllexport) void __cdecl SDL_RenderGetClipRect(SDL_Renderer * renderer,
                                                   SDL_Rect * rect);
# 590 "D:\\Libraries\\include\\SDL2/SDL_render.h"
extern __declspec(dllexport) SDL_bool __cdecl SDL_RenderIsClipEnabled(SDL_Renderer * renderer);
# 611 "D:\\Libraries\\include\\SDL2/SDL_render.h"
extern __declspec(dllexport) int __cdecl SDL_RenderSetScale(SDL_Renderer * renderer,
                                               float scaleX, float scaleY);
# 623 "D:\\Libraries\\include\\SDL2/SDL_render.h"
extern __declspec(dllexport) void __cdecl SDL_RenderGetScale(SDL_Renderer * renderer,
                                               float *scaleX, float *scaleY);
# 638 "D:\\Libraries\\include\\SDL2/SDL_render.h"
extern __declspec(dllexport) int __cdecl SDL_SetRenderDrawColor(SDL_Renderer * renderer,
                                           Uint8 r, Uint8 g, Uint8 b,
                                           Uint8 a);
# 654 "D:\\Libraries\\include\\SDL2/SDL_render.h"
extern __declspec(dllexport) int __cdecl SDL_GetRenderDrawColor(SDL_Renderer * renderer,
                                           Uint8 * r, Uint8 * g, Uint8 * b,
                                           Uint8 * a);
# 671 "D:\\Libraries\\include\\SDL2/SDL_render.h"
extern __declspec(dllexport) int __cdecl SDL_SetRenderDrawBlendMode(SDL_Renderer * renderer,
                                                       SDL_BlendMode blendMode);
# 684 "D:\\Libraries\\include\\SDL2/SDL_render.h"
extern __declspec(dllexport) int __cdecl SDL_GetRenderDrawBlendMode(SDL_Renderer * renderer,
                                                       SDL_BlendMode *blendMode);
# 695 "D:\\Libraries\\include\\SDL2/SDL_render.h"
extern __declspec(dllexport) int __cdecl SDL_RenderClear(SDL_Renderer * renderer);
# 706 "D:\\Libraries\\include\\SDL2/SDL_render.h"
extern __declspec(dllexport) int __cdecl SDL_RenderDrawPoint(SDL_Renderer * renderer,
                                                int x, int y);
# 718 "D:\\Libraries\\include\\SDL2/SDL_render.h"
extern __declspec(dllexport) int __cdecl SDL_RenderDrawPoints(SDL_Renderer * renderer,
                                                 const SDL_Point * points,
                                                 int count);
# 733 "D:\\Libraries\\include\\SDL2/SDL_render.h"
extern __declspec(dllexport) int __cdecl SDL_RenderDrawLine(SDL_Renderer * renderer,
                                               int x1, int y1, int x2, int y2);
# 745 "D:\\Libraries\\include\\SDL2/SDL_render.h"
extern __declspec(dllexport) int __cdecl SDL_RenderDrawLines(SDL_Renderer * renderer,
                                                const SDL_Point * points,
                                                int count);
# 757 "D:\\Libraries\\include\\SDL2/SDL_render.h"
extern __declspec(dllexport) int __cdecl SDL_RenderDrawRect(SDL_Renderer * renderer,
                                               const SDL_Rect * rect);
# 769 "D:\\Libraries\\include\\SDL2/SDL_render.h"
extern __declspec(dllexport) int __cdecl SDL_RenderDrawRects(SDL_Renderer * renderer,
                                                const SDL_Rect * rects,
                                                int count);
# 782 "D:\\Libraries\\include\\SDL2/SDL_render.h"
extern __declspec(dllexport) int __cdecl SDL_RenderFillRect(SDL_Renderer * renderer,
                                               const SDL_Rect * rect);
# 794 "D:\\Libraries\\include\\SDL2/SDL_render.h"
extern __declspec(dllexport) int __cdecl SDL_RenderFillRects(SDL_Renderer * renderer,
                                                const SDL_Rect * rects,
                                                int count);
# 810 "D:\\Libraries\\include\\SDL2/SDL_render.h"
extern __declspec(dllexport) int __cdecl SDL_RenderCopy(SDL_Renderer * renderer,
                                           SDL_Texture * texture,
                                           const SDL_Rect * srcrect,
                                           const SDL_Rect * dstrect);
# 830 "D:\\Libraries\\include\\SDL2/SDL_render.h"
extern __declspec(dllexport) int __cdecl SDL_RenderCopyEx(SDL_Renderer * renderer,
                                           SDL_Texture * texture,
                                           const SDL_Rect * srcrect,
                                           const SDL_Rect * dstrect,
                                           const double angle,
                                           const SDL_Point *center,
                                           const SDL_RendererFlip flip);
# 848 "D:\\Libraries\\include\\SDL2/SDL_render.h"
extern __declspec(dllexport) int __cdecl SDL_RenderDrawPointF(SDL_Renderer * renderer,
                                                 float x, float y);
# 860 "D:\\Libraries\\include\\SDL2/SDL_render.h"
extern __declspec(dllexport) int __cdecl SDL_RenderDrawPointsF(SDL_Renderer * renderer,
                                                  const SDL_FPoint * points,
                                                  int count);
# 875 "D:\\Libraries\\include\\SDL2/SDL_render.h"
extern __declspec(dllexport) int __cdecl SDL_RenderDrawLineF(SDL_Renderer * renderer,
                                                float x1, float y1, float x2, float y2);
# 887 "D:\\Libraries\\include\\SDL2/SDL_render.h"
extern __declspec(dllexport) int __cdecl SDL_RenderDrawLinesF(SDL_Renderer * renderer,
                                                const SDL_FPoint * points,
                                                int count);
# 899 "D:\\Libraries\\include\\SDL2/SDL_render.h"
extern __declspec(dllexport) int __cdecl SDL_RenderDrawRectF(SDL_Renderer * renderer,
                                               const SDL_FRect * rect);
# 911 "D:\\Libraries\\include\\SDL2/SDL_render.h"
extern __declspec(dllexport) int __cdecl SDL_RenderDrawRectsF(SDL_Renderer * renderer,
                                                 const SDL_FRect * rects,
                                                 int count);
# 924 "D:\\Libraries\\include\\SDL2/SDL_render.h"
extern __declspec(dllexport) int __cdecl SDL_RenderFillRectF(SDL_Renderer * renderer,
                                                const SDL_FRect * rect);
# 936 "D:\\Libraries\\include\\SDL2/SDL_render.h"
extern __declspec(dllexport) int __cdecl SDL_RenderFillRectsF(SDL_Renderer * renderer,
                                                 const SDL_FRect * rects,
                                                 int count);
# 952 "D:\\Libraries\\include\\SDL2/SDL_render.h"
extern __declspec(dllexport) int __cdecl SDL_RenderCopyF(SDL_Renderer * renderer,
                                            SDL_Texture * texture,
                                            const SDL_Rect * srcrect,
                                            const SDL_FRect * dstrect);
# 972 "D:\\Libraries\\include\\SDL2/SDL_render.h"
extern __declspec(dllexport) int __cdecl SDL_RenderCopyExF(SDL_Renderer * renderer,
                                            SDL_Texture * texture,
                                            const SDL_Rect * srcrect,
                                            const SDL_FRect * dstrect,
                                            const double angle,
                                            const SDL_FPoint *center,
                                            const SDL_RendererFlip flip);
# 995 "D:\\Libraries\\include\\SDL2/SDL_render.h"
extern __declspec(dllexport) int __cdecl SDL_RenderReadPixels(SDL_Renderer * renderer,
                                                 const SDL_Rect * rect,
                                                 Uint32 format,
                                                 void *pixels, int pitch);




extern __declspec(dllexport) void __cdecl SDL_RenderPresent(SDL_Renderer * renderer);







extern __declspec(dllexport) void __cdecl SDL_DestroyTexture(SDL_Texture * texture);







extern __declspec(dllexport) void __cdecl SDL_DestroyRenderer(SDL_Renderer * renderer);
# 1044 "D:\\Libraries\\include\\SDL2/SDL_render.h"
extern __declspec(dllexport) int __cdecl SDL_RenderFlush(SDL_Renderer * renderer);
# 1057 "D:\\Libraries\\include\\SDL2/SDL_render.h"
extern __declspec(dllexport) int __cdecl SDL_GL_BindTexture(SDL_Texture *texture, float *texw, float *texh);
# 1066 "D:\\Libraries\\include\\SDL2/SDL_render.h"
extern __declspec(dllexport) int __cdecl SDL_GL_UnbindTexture(SDL_Texture *texture);
# 1077 "D:\\Libraries\\include\\SDL2/SDL_render.h"
extern __declspec(dllexport) void *__cdecl SDL_RenderGetMetalLayer(SDL_Renderer * renderer);
# 1088 "D:\\Libraries\\include\\SDL2/SDL_render.h"
extern __declspec(dllexport) void *__cdecl SDL_RenderGetMetalCommandEncoder(SDL_Renderer * renderer);






# 1 "D:\\Libraries\\include\\SDL2/close_code.h" 1
# 39 "D:\\Libraries\\include\\SDL2/close_code.h"
#pragma pack(pop)
# 1095 "D:\\Libraries\\include\\SDL2/SDL_render.h" 2
# 53 "D:\\Libraries\\include\\SDL2\\SDL.h" 2

# 1 "D:\\Libraries\\include\\SDL2/SDL_sensor.h" 1
# 35 "D:\\Libraries\\include\\SDL2/SDL_sensor.h"
# 1 "D:\\Libraries\\include\\SDL2/begin_code.h" 1
# 106 "D:\\Libraries\\include\\SDL2/begin_code.h"
#pragma warning(disable: 4103)


#pragma clang diagnostic ignored "-Wpragma-pack"






#pragma pack(push,8)
# 36 "D:\\Libraries\\include\\SDL2/SDL_sensor.h" 2
# 51 "D:\\Libraries\\include\\SDL2/SDL_sensor.h"
struct _SDL_Sensor;
typedef struct _SDL_Sensor SDL_Sensor;







typedef Sint32 SDL_SensorID;
# 69 "D:\\Libraries\\include\\SDL2/SDL_sensor.h"
typedef enum
{
    SDL_SENSOR_INVALID = -1,
    SDL_SENSOR_UNKNOWN,
    SDL_SENSOR_ACCEL,
    SDL_SENSOR_GYRO
} SDL_SensorType;
# 127 "D:\\Libraries\\include\\SDL2/SDL_sensor.h"
extern __declspec(dllexport) int __cdecl SDL_NumSensors(void);
# 136 "D:\\Libraries\\include\\SDL2/SDL_sensor.h"
extern __declspec(dllexport) const char *__cdecl SDL_SensorGetDeviceName(int device_index);
# 145 "D:\\Libraries\\include\\SDL2/SDL_sensor.h"
extern __declspec(dllexport) SDL_SensorType __cdecl SDL_SensorGetDeviceType(int device_index);
# 154 "D:\\Libraries\\include\\SDL2/SDL_sensor.h"
extern __declspec(dllexport) int __cdecl SDL_SensorGetDeviceNonPortableType(int device_index);
# 163 "D:\\Libraries\\include\\SDL2/SDL_sensor.h"
extern __declspec(dllexport) SDL_SensorID __cdecl SDL_SensorGetDeviceInstanceID(int device_index);
# 172 "D:\\Libraries\\include\\SDL2/SDL_sensor.h"
extern __declspec(dllexport) SDL_Sensor *__cdecl SDL_SensorOpen(int device_index);




extern __declspec(dllexport) SDL_Sensor *__cdecl SDL_SensorFromInstanceID(SDL_SensorID instance_id);






extern __declspec(dllexport) const char *__cdecl SDL_SensorGetName(SDL_Sensor *sensor);
# 193 "D:\\Libraries\\include\\SDL2/SDL_sensor.h"
extern __declspec(dllexport) SDL_SensorType __cdecl SDL_SensorGetType(SDL_Sensor *sensor);
# 202 "D:\\Libraries\\include\\SDL2/SDL_sensor.h"
extern __declspec(dllexport) int __cdecl SDL_SensorGetNonPortableType(SDL_Sensor *sensor);
# 211 "D:\\Libraries\\include\\SDL2/SDL_sensor.h"
extern __declspec(dllexport) SDL_SensorID __cdecl SDL_SensorGetInstanceID(SDL_Sensor *sensor);
# 224 "D:\\Libraries\\include\\SDL2/SDL_sensor.h"
extern __declspec(dllexport) int __cdecl SDL_SensorGetData(SDL_Sensor * sensor, float *data, int num_values);




extern __declspec(dllexport) void __cdecl SDL_SensorClose(SDL_Sensor * sensor);
# 238 "D:\\Libraries\\include\\SDL2/SDL_sensor.h"
extern __declspec(dllexport) void __cdecl SDL_SensorUpdate(void);
# 247 "D:\\Libraries\\include\\SDL2/SDL_sensor.h"
# 1 "D:\\Libraries\\include\\SDL2/close_code.h" 1
# 39 "D:\\Libraries\\include\\SDL2/close_code.h"
#pragma pack(pop)
# 248 "D:\\Libraries\\include\\SDL2/SDL_sensor.h" 2
# 55 "D:\\Libraries\\include\\SDL2\\SDL.h" 2
# 1 "D:\\Libraries\\include\\SDL2/SDL_shape.h" 1
# 31 "D:\\Libraries\\include\\SDL2/SDL_shape.h"
# 1 "D:\\Libraries\\include\\SDL2/begin_code.h" 1
# 106 "D:\\Libraries\\include\\SDL2/begin_code.h"
#pragma warning(disable: 4103)


#pragma clang diagnostic ignored "-Wpragma-pack"






#pragma pack(push,8)
# 32 "D:\\Libraries\\include\\SDL2/SDL_shape.h" 2
# 66 "D:\\Libraries\\include\\SDL2/SDL_shape.h"
extern __declspec(dllexport) SDL_Window * __cdecl SDL_CreateShapedWindow(const char *title,unsigned int x,unsigned int y,unsigned int w,unsigned int h,Uint32 flags);
# 77 "D:\\Libraries\\include\\SDL2/SDL_shape.h"
extern __declspec(dllexport) SDL_bool __cdecl SDL_IsShapedWindow(const SDL_Window *window);


typedef enum {

    ShapeModeDefault,

    ShapeModeBinarizeAlpha,

    ShapeModeReverseBinarizeAlpha,

    ShapeModeColorKey
} WindowShapeMode;




typedef union {

    Uint8 binarizationCutoff;
    SDL_Color colorKey;
} SDL_WindowShapeParams;


typedef struct SDL_WindowShapeMode {

    WindowShapeMode mode;

    SDL_WindowShapeParams parameters;
} SDL_WindowShapeMode;
# 121 "D:\\Libraries\\include\\SDL2/SDL_shape.h"
extern __declspec(dllexport) int __cdecl SDL_SetWindowShape(SDL_Window *window,SDL_Surface *shape,SDL_WindowShapeMode *shape_mode);
# 136 "D:\\Libraries\\include\\SDL2/SDL_shape.h"
extern __declspec(dllexport) int __cdecl SDL_GetShapedWindowMode(SDL_Window *window,SDL_WindowShapeMode *shape_mode);






# 1 "D:\\Libraries\\include\\SDL2/close_code.h" 1
# 39 "D:\\Libraries\\include\\SDL2/close_code.h"
#pragma pack(pop)
# 143 "D:\\Libraries\\include\\SDL2/SDL_shape.h" 2
# 56 "D:\\Libraries\\include\\SDL2\\SDL.h" 2
# 1 "D:\\Libraries\\include\\SDL2/SDL_system.h" 1
# 36 "D:\\Libraries\\include\\SDL2/SDL_system.h"
# 1 "D:\\Libraries\\include\\SDL2/begin_code.h" 1
# 106 "D:\\Libraries\\include\\SDL2/begin_code.h"
#pragma warning(disable: 4103)


#pragma clang diagnostic ignored "-Wpragma-pack"






#pragma pack(push,8)
# 37 "D:\\Libraries\\include\\SDL2/SDL_system.h" 2
# 49 "D:\\Libraries\\include\\SDL2/SDL_system.h"
typedef void (__cdecl * SDL_WindowsMessageHook)(void *userdata, void *hWnd, unsigned int message, Uint64 wParam, Sint64 lParam);
extern __declspec(dllexport) void __cdecl SDL_SetWindowsMessageHook(SDL_WindowsMessageHook callback, void *userdata);







extern __declspec(dllexport) int __cdecl SDL_Direct3D9GetAdapterIndex( int displayIndex );

typedef struct IDirect3DDevice9 IDirect3DDevice9;





extern __declspec(dllexport) IDirect3DDevice9* __cdecl SDL_RenderGetD3D9Device(SDL_Renderer * renderer);







extern __declspec(dllexport) SDL_bool __cdecl SDL_DXGIGetOutputInfo( int displayIndex, int *adapterIndex, int *outputIndex );
# 269 "D:\\Libraries\\include\\SDL2/SDL_system.h"
extern __declspec(dllexport) SDL_bool __cdecl SDL_IsTablet(void);






# 1 "D:\\Libraries\\include\\SDL2/close_code.h" 1
# 39 "D:\\Libraries\\include\\SDL2/close_code.h"
#pragma pack(pop)
# 276 "D:\\Libraries\\include\\SDL2/SDL_system.h" 2
# 57 "D:\\Libraries\\include\\SDL2\\SDL.h" 2

# 1 "D:\\Libraries\\include\\SDL2/SDL_timer.h" 1
# 34 "D:\\Libraries\\include\\SDL2/SDL_timer.h"
# 1 "D:\\Libraries\\include\\SDL2/begin_code.h" 1
# 106 "D:\\Libraries\\include\\SDL2/begin_code.h"
#pragma warning(disable: 4103)


#pragma clang diagnostic ignored "-Wpragma-pack"






#pragma pack(push,8)
# 35 "D:\\Libraries\\include\\SDL2/SDL_timer.h" 2
# 45 "D:\\Libraries\\include\\SDL2/SDL_timer.h"
extern __declspec(dllexport) Uint32 __cdecl SDL_GetTicks(void);
# 61 "D:\\Libraries\\include\\SDL2/SDL_timer.h"
extern __declspec(dllexport) Uint64 __cdecl SDL_GetPerformanceCounter(void);




extern __declspec(dllexport) Uint64 __cdecl SDL_GetPerformanceFrequency(void);




extern __declspec(dllexport) void __cdecl SDL_Delay(Uint32 ms);
# 81 "D:\\Libraries\\include\\SDL2/SDL_timer.h"
typedef Uint32 (__cdecl * SDL_TimerCallback) (Uint32 interval, void *param);




typedef int SDL_TimerID;






extern __declspec(dllexport) SDL_TimerID __cdecl SDL_AddTimer(Uint32 interval,
                                                 SDL_TimerCallback callback,
                                                 void *param);
# 104 "D:\\Libraries\\include\\SDL2/SDL_timer.h"
extern __declspec(dllexport) SDL_bool __cdecl SDL_RemoveTimer(SDL_TimerID id);







# 1 "D:\\Libraries\\include\\SDL2/close_code.h" 1
# 39 "D:\\Libraries\\include\\SDL2/close_code.h"
#pragma pack(pop)
# 112 "D:\\Libraries\\include\\SDL2/SDL_timer.h" 2
# 59 "D:\\Libraries\\include\\SDL2\\SDL.h" 2
# 1 "D:\\Libraries\\include\\SDL2/SDL_version.h" 1
# 33 "D:\\Libraries\\include\\SDL2/SDL_version.h"
# 1 "D:\\Libraries\\include\\SDL2/begin_code.h" 1
# 106 "D:\\Libraries\\include\\SDL2/begin_code.h"
#pragma warning(disable: 4103)


#pragma clang diagnostic ignored "-Wpragma-pack"






#pragma pack(push,8)
# 34 "D:\\Libraries\\include\\SDL2/SDL_version.h" 2
# 51 "D:\\Libraries\\include\\SDL2/SDL_version.h"
typedef struct SDL_version
{
    Uint8 major;
    Uint8 minor;
    Uint8 patch;
} SDL_version;
# 133 "D:\\Libraries\\include\\SDL2/SDL_version.h"
extern __declspec(dllexport) void __cdecl SDL_GetVersion(SDL_version * ver);
# 142 "D:\\Libraries\\include\\SDL2/SDL_version.h"
extern __declspec(dllexport) const char *__cdecl SDL_GetRevision(void);
# 151 "D:\\Libraries\\include\\SDL2/SDL_version.h"
extern __declspec(dllexport) int __cdecl SDL_GetRevisionNumber(void);







# 1 "D:\\Libraries\\include\\SDL2/close_code.h" 1
# 39 "D:\\Libraries\\include\\SDL2/close_code.h"
#pragma pack(pop)
# 159 "D:\\Libraries\\include\\SDL2/SDL_version.h" 2
# 60 "D:\\Libraries\\include\\SDL2\\SDL.h" 2


# 1 "D:\\Libraries\\include\\SDL2/begin_code.h" 1
# 106 "D:\\Libraries\\include\\SDL2/begin_code.h"
#pragma warning(disable: 4103)


#pragma clang diagnostic ignored "-Wpragma-pack"






#pragma pack(push,8)
# 63 "D:\\Libraries\\include\\SDL2\\SDL.h" 2
# 95 "D:\\Libraries\\include\\SDL2\\SDL.h"
extern __declspec(dllexport) int __cdecl SDL_Init(Uint32 flags);
# 106 "D:\\Libraries\\include\\SDL2\\SDL.h"
extern __declspec(dllexport) int __cdecl SDL_InitSubSystem(Uint32 flags);




extern __declspec(dllexport) void __cdecl SDL_QuitSubSystem(Uint32 flags);







extern __declspec(dllexport) Uint32 __cdecl SDL_WasInit(Uint32 flags);





extern __declspec(dllexport) void __cdecl SDL_Quit(void);






# 1 "D:\\Libraries\\include\\SDL2/close_code.h" 1
# 39 "D:\\Libraries\\include\\SDL2/close_code.h"
#pragma pack(pop)
# 132 "D:\\Libraries\\include\\SDL2\\SDL.h" 2
# 7 "main.c" 2

# 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\math.h" 1 3
# 9 "main.c" 2
# 33 "main.c"
uint8_t MEMORY[0xFFF];
uint8_t V[0x10];
uint16_t I_REGISTER;
uint16_t PC;
uint16_t STACK[0x10];
uint8_t SP;
uint8_t KEY[0x10];
uint8_t delay_timer;
uint8_t sound_timer;
uint8_t DISPLAY[64][32];
uint16_t OPCODE;
uint8_t X;
uint8_t Y;
uint16_t NNN;
uint8_t KK;
uint8_t N;

int draw_flag;
int WAIT_KEY = 0;




uint8_t chip8_fontset[80] =
{
    0xF0, 0x90, 0x90, 0x90, 0xF0,
    0x20, 0x60, 0x20, 0x20, 0x70,
    0xF0, 0x10, 0xF0, 0x80, 0xF0,
    0xF0, 0x10, 0xF0, 0x10, 0xF0,
    0x90, 0x90, 0xF0, 0x10, 0x10,
    0xF0, 0x80, 0xF0, 0x10, 0xF0,
    0xF0, 0x80, 0xF0, 0x90, 0xF0,
    0xF0, 0x10, 0x20, 0x40, 0x40,
    0xF0, 0x90, 0xF0, 0x90, 0xF0,
    0xF0, 0x90, 0xF0, 0x10, 0xF0,
    0xF0, 0x90, 0xF0, 0x90, 0x90,
    0xE0, 0x90, 0xE0, 0x90, 0xE0,
    0xF0, 0x80, 0x80, 0x80, 0xF0,
    0xE0, 0x90, 0x90, 0x90, 0xE0,
    0xF0, 0x80, 0xF0, 0x80, 0xF0,
    0xF0, 0x80, 0xF0, 0x80, 0x80
};

void LoadGame(char *filename) {
    FILE * file = fopen(filename, "rb");
    if (((void*)0) == file) {
        SDL_ShowSimpleMessageBox(0, "Unable to open rom", filename, ((void*)0));
        exit(42);
    }
    fread(&MEMORY[0x200], 1, (0x1000 - 0x200), file);
    fclose(file);

};



typedef struct {uint32_t opcode; int hasVariant; void(*func_ptr)();}INSTRUCTION_REF;




void chip8_func_0x00E0 () {memset(DISPLAY, 0, sizeof(uint8_t) * 64 * 32);draw_flag = 1; printf("Clear screen\n");; };
void chip8_func_0x00EE () {PC = STACK[--SP]; printf("Return from subroutine PC(%i) = STACK[(%i)]; SP-1(%i)\n", PC, SP, SP);; };
void chip8_func_0x1000 () {PC = NNN; printf("Jump to nnn PC = %i\n", NNN);; };
void chip8_func_0x2000 () {STACK[SP++] = PC; PC = NNN; printf("Call subroutine: SP+1(%i);STACK[%i]; PC(%i) = nnn(%i)\n", SP, SP, PC, NNN);; };
void chip8_func_0x3000 () {if(V[X] == KK) PC+=2; printf("Skip next instr if %i == %i\n", V[X], KK);; };
void chip8_func_0x4000 () {if(V[X] != KK) PC+=2; printf("Skip next instr if %i != %i\n", V[X], KK);; };
void chip8_func_0x5000 () {if(V[X] == V[Y]) PC+=2; printf("Skip next instr if %i == %i\n", V[X], V[Y]);; };
void chip8_func_0x6000 () {V[X] = KK; printf("assign V[%i] = %i\n", X, KK);; };
void chip8_func_0x7000 () {V[X] += KK; printf("add V[%i] += %i\n", X, KK);; };

void chip8_func_0x8000 () {V[X] = V[Y]; printf("V[%i] = V[%i]\n", X, Y);; };
void chip8_func_0x8001 () {V[X] = V[X] | V[Y]; printf("assign V[%i] = V[%i] OR V[%i]\n", X, X, Y);; };
void chip8_func_0x8002 () {V[X] = V[X] & V[Y]; printf("assign V[%i] = V[%i] AND V[%i]\n", X, X, Y);; };
void chip8_func_0x8003 () {V[X] = V[X] ^ V[Y]; printf("assign V[%i] = V[%i] XOR V[%i]\n", X, X, Y);; };
void chip8_func_0x8004 () {V[0xF] = ((int)V[X] + (int)V[Y] > 255)?1:0;V[X]=V[X]+V[Y]; printf("add V[%i] += V[%i]\n", X, Y);; };
void chip8_func_0x8005 () {V[0xF] = (V[X] > V[Y]) ? 1 : 0; V[X]=V[X]-V[Y]; printf("sub V[%i] -= V[%i]\n", X, Y);; };
void chip8_func_0x8006 () {V[0xF] = V[X] & 0x1; V[X] = (V[X] >> 1); printf("shr V[%i]>>1\n", X);; };
void chip8_func_0x8007 () {V[0xF] = (V[Y] > V[X]) ? 1 : 0; V[X] = V[Y] - V[X]; printf("sub V[%i] = V[%i] - V[%i]\n", X, Y, X);; };
void chip8_func_0x800E () {V[0xF] = (V[X] >> 7) & 0x1; V[X] = (V[X] << 1); printf("shl V[%i]<<1\n", X);; };

void chip8_func_0x9000 () {if(V[X] != V[Y]) PC+=2; printf("Skip next instr if %i != %i\n", V[X], V[Y]);; };
void chip8_func_0xA000 () {I_REGISTER = NNN; printf("assign I = %i\n", NNN);; };
void chip8_func_0xB000 () {PC = NNN + V[0]; printf("Jump to %i\n", PC);; };
void chip8_func_0xC000 () {V[X] = (rand() % 256) & KK; printf("random byte AND kk assign V[%i] = %i\n", X, V[X]);; };
void chip8_func_0xD000 () {V[0xF] = 0;unsigned row = V[X];unsigned col = V[Y];unsigned byteI;unsigned bitI;for(byteI=0; byteI < N; byteI++){ uint8_t byte = MEMORY[I_REGISTER + byteI]; for(bitI=0; bitI < 8; bitI++) { uint8_t bit = (byte >> bitI) & 0x1; uint8_t *pixelbit = &DISPLAY[ row + (7 - bitI) % 64][ col + byteI % 32]; if(bit == 1 && *pixelbit == 1) V[0xF] = 1; *pixelbit = *pixelbit ^ bit; }}draw_flag = 1; printf("Draw\n");;};
# 144 "main.c"
void chip8_func_0xE09E () {if(KEY[V[X]]) PC+=2; printf("Skip next inst if KEY[%i] is down\n", V[X]);;};
void chip8_func_0xE0A1 () {if(!KEY[V[X]]) PC+=2; printf("Skip next inst if KEY[%i] is up\n", V[X]);;};
void chip8_func_0xF007 () {V[X] = delay_timer; printf("V[%i] = delta_timer(%i)\n", X, delay_timer);;};
void chip8_func_0xF00A () {WAIT_KEY = 1; printf("Wait for a keypress\n");;};
void chip8_func_0xF015 () {delay_timer = V[X]; printf("delta_timer = V[%i](%i)\n", X, V[X]);;};
void chip8_func_0xF018 () {sound_timer = V[X]; printf("sound_timer = V[%i](%i)\n", X, V[X]);;};
void chip8_func_0xF01E () {V[0xF] = (V[X] + I_REGISTER > 0xFFF)?1:0; I_REGISTER = I_REGISTER + V[X]; printf("I += V[%i](%i)\n", X, V[X]);;};
void chip8_func_0xF029 () {I_REGISTER = 5 * V[X]; printf("I = CharLocation(%i)\n", 5 * V[X]);;};
void chip8_func_0xF033 () { MEMORY[I_REGISTER] = (V[X] % 1000) / 100; MEMORY[I_REGISTER+1] = (V[X] % 100) / 10; MEMORY[I_REGISTER+2] = (V[X] % 10); printf("Store BCD representation of Vx\n");;};
# 162 "main.c"
void chip8_func_0xF055 () { unsigned i; for(i=0; i <= X; i++) { MEMORY[I_REGISTER + i] = V[i]; } I_REGISTER += X+1; printf("Stores V0 to VX in memory\n");;};
# 171 "main.c"
void chip8_func_0xF065 () { unsigned i; for(i=0; i <= X; i++) { V[i] = MEMORY[I_REGISTER + i]; } I_REGISTER += X+1; printf("Fills V0 to VX from memory\n");;};
# 183 "main.c"
INSTRUCTION_REF INSTRUCTION_SET[36] = {
    {(uint32_t)0x00E0, 1, chip8_func_0x00E0},
    {(uint32_t)0x00EE, 1, chip8_func_0x00EE},
    {(uint32_t)0x1000, 0, chip8_func_0x1000},
    {(uint32_t)0x2000, 0, chip8_func_0x2000},
    {(uint32_t)0x3000, 0, chip8_func_0x3000},
    {(uint32_t)0x4000, 0, chip8_func_0x4000},
    {(uint32_t)0x5000, 0, chip8_func_0x5000},
    {(uint32_t)0x6000, 0, chip8_func_0x6000},
    {(uint32_t)0x7000, 0, chip8_func_0x7000},
    {(uint32_t)0x8000, 0, chip8_func_0x8000},
    {(uint32_t)0x8001, 1, chip8_func_0x8001},
    {(uint32_t)0x8002, 1, chip8_func_0x8002},
    {(uint32_t)0x8003, 1, chip8_func_0x8003},
    {(uint32_t)0x8004, 1, chip8_func_0x8004},
    {(uint32_t)0x8005, 1, chip8_func_0x8005},
    {(uint32_t)0x8006, 1, chip8_func_0x8006},
    {(uint32_t)0x8007, 1, chip8_func_0x8007},
    {(uint32_t)0x800E, 1, chip8_func_0x800E},
    {(uint32_t)0x9000, 0, chip8_func_0x9000},
    {(uint32_t)0xA000, 0, chip8_func_0xA000},
    {(uint32_t)0xB000, 0, chip8_func_0xB000},
    {(uint32_t)0xC000, 0, chip8_func_0xC000},
    {(uint32_t)0xD000, 0, chip8_func_0xD000},
    {(uint32_t)0xE00E, 1, chip8_func_0xE00E},
    {(uint32_t)0xE001, 1, chip8_func_0xE001},
    {(uint32_t)0xF007, 1, chip8_func_0xF007},
    {(uint32_t)0xF00A, 1, chip8_func_0xF00A},
    {(uint32_t)0xF015, 1, chip8_func_0xF015},
    {(uint32_t)0xF018, 1, chip8_func_0xF018},
    {(uint32_t)0xF01E, 1, chip8_func_0xF01E},
    {(uint32_t)0xF029, 1, chip8_func_0xF029},
    {(uint32_t)0xF033, 1, chip8_func_0xF033},
    {(uint32_t)0xF055, 1, chip8_func_0xF055},
    {(uint32_t)0xF065, 1, chip8_func_0xF065}
};


void Execute()
{


OPCODE = MEMORY[PC] << 8 | MEMORY[PC+1];


X = (OPCODE >> 8) & 0x000F;
Y = (OPCODE >> 4) & 0x000F;
NNN = OPCODE & 0x0FFF;
KK = OPCODE & 0x0FF;
N = OPCODE & 0x0F;


PC += 2;

unsigned o;
for(o=0; o <= 36; o++){
    if(o == 36){
            printf("Unknown instruction for opcode 0x%04x\n", OPCODE);
            SDL_ShowSimpleMessageBox(0, "Unknown Opcode", "Unknown opcode", ((void*)0));
            exit(-45);
        }

    int instruction_found = 0;


    if( (OPCODE & 0xF000) == (INSTRUCTION_SET[o].opcode & 0xF000) ){
        if(INSTRUCTION_SET[o].hasVariant) {

            if(KK == (INSTRUCTION_SET[o].opcode & 0xFF))
                instruction_found = 1;

            if(N == (INSTRUCTION_SET[o].opcode & 0xF))
                instruction_found = 1;
        }
        else instruction_found = 1;

    if(instruction_found)
    {
    printf("OPCODE 0x%04x\n", OPCODE);;
    INSTRUCTION_SET[o].func_ptr();
    break;
    }

    }
}




if(delay_timer > 0)
    delay_timer--;

if(sound_timer > 0)
    sound_timer--;

};



float sinPos;
float sinStep;
void populate_audio(void* data, Uint8 *stream, int len) {
 int i=0;
    float VOLUME = 127.0;
 for (i=0; i<len; i++) {

  stream[i] = (Uint8) (VOLUME * sinf(sinPos))+127.0f;
  sinPos += sinStep;
 }
}

int SDL_main(int argc, char *argv[])
{
    srand(time(((void*)0)));

    AllocConsole();
    freopen("conin$", "r", (__acrt_iob_func(0)));
    freopen("conout$", "w", (__acrt_iob_func(1)));
    freopen("conout$", "w", (__acrt_iob_func(2)));
    printf("Debugging Window:\n");


    SDL_Init(( 0x00000001u | 0x00000010u | 0x00000020u | 0x00004000u | 0x00000200u | 0x00001000u | 0x00002000u | 0x00008000u ));
    SDL_Window* m_win = SDL_CreateWindow("Chip8 Interpreter - written by Stanislav Kirichenko", (0x1FFF0000u|(0)), (0x1FFF0000u|(0)), 640, 480, 0u);
    SDL_Renderer *m_display = SDL_CreateRenderer(m_win, -1, SDL_RENDERER_ACCELERATED);


    SDL_Texture *bitmapTex = SDL_CreateTexture(m_display, SDL_PIXELFORMAT_RGB888, SDL_TEXTUREACCESS_STREAMING, 64, 32);
    unsigned char* pixels = ((void*)0); int pitch = 0;
    if(SDL_LockTexture(bitmapTex, ((void*)0), (void**)&pixels, &pitch ) < 0) {
        SDL_ShowSimpleMessageBox(0, "SDL failed to access texture", SDL_GetError(), ((void*)0));
        exit(-12);
    }

    memset(pixels, 0, pitch*32);
    SDL_UnlockTexture(bitmapTex);

    SDL_Surface* formattedSurf = SDL_CreateRGBSurfaceWithFormat(0, 64, 32, 8, SDL_PIXELFORMAT_RGB888);



    SDL_AudioSpec audioSpec;

 audioSpec.freq = 44100;
 audioSpec.format = 0x0008;
 audioSpec.channels = 1;
 audioSpec.samples = 8192 ;
 audioSpec.callback = (*populate_audio);
 audioSpec.userdata = ((void*)0);

    const float mpi = 3.1415926535897963f;
    sinPos = 0; sinStep = 2.0f * mpi * 800.0f / 44100.0f;


    if (SDL_OpenAudio(&audioSpec, ((void*)0)) < 0){
        SDL_ShowSimpleMessageBox(0, "SDL Failed to open audio device", SDL_GetError(), ((void*)0));
        exit(-12);
    }



    PC = 0x200;
    OPCODE = 0;
    I_REGISTER = 0;
    SP = 0;
    draw_flag = 1;
    delay_timer = 0;
    sound_timer = 0;

    memset(MEMORY, 0, sizeof(uint8_t) * 0xFFF);
    memset(V, 0, sizeof(uint8_t) * 0x10);
    memset(STACK, 0, sizeof(uint16_t) * 0x10);
    memset(DISPLAY, 0, sizeof(uint8_t) * 64 * 32);
    memset(KEY, 0, sizeof(uint8_t) * 0x10);

    unsigned i;

    memcpy(MEMORY, chip8_fontset, 5 * 16);



    if(argc > 1)
        LoadGame(argv[1]);
    else
    {
        SDL_ShowSimpleMessageBox(0, "Nothing to run", "Drag a rom on top of executable", ((void*)0));
        exit(-1);
    }



    uint32_t rate = ((int) ((1.0f / 60.0f ) * 1000.0f + 0.5f));

    uint32_t time = SDL_GetTicks();
    int running = 1;
    while(running) {
        SDL_Event e;
        while(SDL_PollEvent(&e) || WAIT_KEY)
        {
            if(e.type == SDL_QUIT)
                running = 0;


            if(WAIT_KEY && e.type == SDL_KEYDOWN)
            {
                switch(e.key.keysym.scancode){
                    case SDL_SCANCODE_1: V[X] = 0x0; WAIT_KEY = 0; break;
                    case SDL_SCANCODE_2: V[X] = 0x1; WAIT_KEY = 0; break;
                    case SDL_SCANCODE_3: V[X] = 0x2; WAIT_KEY = 0; break;
                    case SDL_SCANCODE_4: V[X] = 0x3; WAIT_KEY = 0; break;
                    case SDL_SCANCODE_Q: V[X] = 0x4; WAIT_KEY = 0; break;
                    case SDL_SCANCODE_W: V[X] = 0x5; WAIT_KEY = 0; break;
                    case SDL_SCANCODE_E: V[X] = 0x6; WAIT_KEY = 0; break;
                    case SDL_SCANCODE_R: V[X] = 0x7; WAIT_KEY = 0; break;
                    case SDL_SCANCODE_A: V[X] = 0x8; WAIT_KEY = 0; break;
                    case SDL_SCANCODE_S: V[X] = 0x9; WAIT_KEY = 0; break;
                    case SDL_SCANCODE_D: V[X] = 0xA; WAIT_KEY = 0; break;
                    case SDL_SCANCODE_F: V[X] = 0xB; WAIT_KEY = 0; break;
                    case SDL_SCANCODE_Z: V[X] = 0xC; WAIT_KEY = 0; break;
                    case SDL_SCANCODE_X: V[X] = 0xD; WAIT_KEY = 0; break;
                    case SDL_SCANCODE_C: V[X] = 0xE; WAIT_KEY = 0; break;
                    case SDL_SCANCODE_V: V[X] = 0xF; WAIT_KEY = 0; break;
                    default: break;
                }
            }
        }

        const uint8_t *key = SDL_GetKeyboardState(((void*)0));
        KEY[0x0] = key[SDL_SCANCODE_1];
        KEY[0x1] = key[SDL_SCANCODE_2];
        KEY[0x2] = key[SDL_SCANCODE_3];
        KEY[0x3] = key[SDL_SCANCODE_4];

        KEY[0x4] = key[SDL_SCANCODE_Q];
        KEY[0x5] = key[SDL_SCANCODE_W];
        KEY[0x6] = key[SDL_SCANCODE_E];
        KEY[0x7] = key[SDL_SCANCODE_R];

        KEY[0x8] = key[SDL_SCANCODE_A];
        KEY[0x9] = key[SDL_SCANCODE_S];
        KEY[0xA] = key[SDL_SCANCODE_D];
        KEY[0xB] = key[SDL_SCANCODE_F];

        KEY[0xC] = key[SDL_SCANCODE_Z];
        KEY[0xD] = key[SDL_SCANCODE_X];
        KEY[0xE] = key[SDL_SCANCODE_C];
        KEY[0xF] = key[SDL_SCANCODE_V];


        time = SDL_GetTicks();


        Execute();

        if(sound_timer > 0){
            SDL_PauseAudio(0);
        }
        else{
            SDL_PauseAudio(1);
        }



        if(draw_flag)
        {

            SDL_LockTexture(bitmapTex, ((void*)0), (void**)&pixels, &pitch );


            unsigned k,j;
            for(j=0; j < 32; j++)
            for(k=0; k < 64; k++)
            {
                uint8_t bit = DISPLAY[k][j] ? 255 : 0;
# 465 "main.c"
                memset(&pixels[j * pitch + k*4], bit, pitch);

            }
            SDL_UnlockTexture(bitmapTex);

            draw_flag = 0;
        }

        SDL_RenderClear(m_display);
        SDL_RenderCopy(m_display, bitmapTex, ((void*)0), ((void*)0));
        SDL_RenderPresent(m_display);


        int32_t time_to_sleep = SDL_GetTicks() - time - rate;

            SDL_Delay(16);

    }


    SDL_CloseAudio();
    SDL_DestroyTexture(bitmapTex);
    SDL_DestroyRenderer(m_display);
    SDL_DestroyWindow(m_win);
    SDL_Quit();
    return 0;
}
